/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.17 $ of : mfd-top.m2c,v $
 *
 * $Id$
 */
#ifndef IFXTABLE_H
#define IFXTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>
#include <net-snmp/data_access/interface.h>

    /*
     * other required module components 
     */
    config_require(if-mib/data_access/interface);
    config_require(if-mib/ifXTable/ifXTable_interface);
    config_require(if-mib/ifXTable/ifXTable_data_access);
    config_exclude(mibII/interfaces);

    /*
     * OID, column number and enum definions for  
     */
#include "ifXTable_constants.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_ifXTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table ifXTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * ifXTable is subid 1 of ifMIBObjects.
     * It's status is Current.
     * OID: .1.3.6.1.2.1.31.1.1, length: 9
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     */
    typedef netsnmp_data_list *ifXTable_registration_ptr;

/**********************************************************************/
    /*
     * data context
     */
    typedef netsnmp_interface_entry *ifXTable_data;


    /*
     *********************************************************************
     * undo context
     * We're just going to use the same data structure for our
     * undo_context. If you want to do something more efficent,
     * define your typedef here.
     */
    typedef ifXTable_data ifXTable_undo_data;

    /*
     * This structure is used to represent the index for a table.
     */
    typedef struct ifXTable_mib_index_s {

        /** ifIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/r/d/h */
        long            ifIndex;


    } ifXTable_mib_index;


    /*
     *********************************************************************
     * Row request context
     * When your functions are called, you will be passed a
     * ifXTable_rowreq_ctx pointer.
     */
    typedef struct ifXTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_OID_LEN];   /* xxx-rks: shrink this */

        ifXTable_mib_index tbl_idx;

        ifXTable_data   data;
        ifXTable_undo_data undo;

    /** implementor's context pointer provided during registration */
        ifXTable_registration_ptr ifXTable_reg;

        /*
         * TODO:
         * add any other useful data
         *       (e.g. flags for when a column has been set)
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *ifXTable_data_list;

    } ifXTable_rowreq_ctx;

    typedef struct ifXTable_ref_rowreq_ctx_s {
        ifXTable_rowreq_ctx *rowreq_ctx;
    } ifXTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int             ifXTable_pre_request(ifXTable_registration_ptr
                                         user_context);
    int             ifXTable_post_request(ifXTable_registration_ptr
                                          user_context);


    int             ifXTable_check_dependencies(ifXTable_rowreq_ctx *
                                                rowreq_ctx);
    int             ifXTable_commit(ifXTable_rowreq_ctx * rowreq_ctx);

    extern oid      ifXTable_oid[];
    extern int      ifXTable_oid_size;


#include "ifXTable_interface.h"
#include "ifXTable_data_access.h"
    /*
     *********************************************************************
     * GET function declarations
     */

    /*
     *********************************************************************
     * GET Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table ifXTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * ifXTable is subid 1 of ifMIBObjects.
     * It's status is Current.
     * OID: .1.3.6.1.2.1.31.1.1, length: 9
     */
    /*
     * indexes
     */

    int             ifName_get(ifXTable_rowreq_ctx * rowreq_ctx,
                               char **ifName_ptr_ptr,
                               size_t * ifName_ptr_len_ptr);
    int             ifInMulticastPkts_get(ifXTable_rowreq_ctx * rowreq_ctx,
                                          u_long * ifInMulticastPkts_ptr);
    int             ifInBroadcastPkts_get(ifXTable_rowreq_ctx * rowreq_ctx,
                                          u_long * ifInBroadcastPkts_ptr);
    int             ifOutMulticastPkts_get(ifXTable_rowreq_ctx *
                                           rowreq_ctx,
                                           u_long *
                                           ifOutMulticastPkts_ptr);
    int             ifOutBroadcastPkts_get(ifXTable_rowreq_ctx *
                                           rowreq_ctx,
                                           u_long *
                                           ifOutBroadcastPkts_ptr);
    int             ifHCInOctets_get(ifXTable_rowreq_ctx * rowreq_ctx,
                                     U64 * ifHCInOctets_ptr);
    int             ifHCInUcastPkts_get(ifXTable_rowreq_ctx * rowreq_ctx,
                                        U64 * ifHCInUcastPkts_ptr);
    int             ifHCInMulticastPkts_get(ifXTable_rowreq_ctx *
                                            rowreq_ctx,
                                            U64 * ifHCInMulticastPkts_ptr);
    int             ifHCInBroadcastPkts_get(ifXTable_rowreq_ctx *
                                            rowreq_ctx,
                                            U64 * ifHCInBroadcastPkts_ptr);
    int             ifHCOutOctets_get(ifXTable_rowreq_ctx * rowreq_ctx,
                                      U64 * ifHCOutOctets_ptr);
    int             ifHCOutUcastPkts_get(ifXTable_rowreq_ctx * rowreq_ctx,
                                         U64 * ifHCOutUcastPkts_ptr);
    int             ifHCOutMulticastPkts_get(ifXTable_rowreq_ctx *
                                             rowreq_ctx,
                                             U64 *
                                             ifHCOutMulticastPkts_ptr);
    int             ifHCOutBroadcastPkts_get(ifXTable_rowreq_ctx *
                                             rowreq_ctx,
                                             U64 *
                                             ifHCOutBroadcastPkts_ptr);
    int             ifLinkUpDownTrapEnable_get(ifXTable_rowreq_ctx *
                                               rowreq_ctx,
                                               u_long *
                                               ifLinkUpDownTrapEnable_ptr);
    int             ifHighSpeed_get(ifXTable_rowreq_ctx * rowreq_ctx,
                                    u_long * ifHighSpeed_ptr);
    int             ifPromiscuousMode_get(ifXTable_rowreq_ctx * rowreq_ctx,
                                          u_long * ifPromiscuousMode_ptr);
    int             ifConnectorPresent_get(ifXTable_rowreq_ctx *
                                           rowreq_ctx,
                                           u_long *
                                           ifConnectorPresent_ptr);
    int             ifAlias_get(ifXTable_rowreq_ctx * rowreq_ctx,
                                char **ifAlias_ptr_ptr,
                                size_t * ifAlias_ptr_len_ptr);
    int             ifCounterDiscontinuityTime_get(ifXTable_rowreq_ctx *
                                                   rowreq_ctx,
                                                   u_long *
                                                   ifCounterDiscontinuityTime_ptr);


    int             ifXTable_indexes_set_tbl_idx(ifXTable_mib_index *
                                                 tbl_idx, long ifIndex);
    int             ifXTable_indexes_set(ifXTable_rowreq_ctx * rowreq_ctx,
                                         long ifIndex);



    /*
     *********************************************************************
     * SET function declarations
     */

    /*
     *********************************************************************
     * SET Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table ifXTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * ifXTable is subid 1 of ifMIBObjects.
     * It's status is Current.
     * OID: .1.3.6.1.2.1.31.1.1, length: 9
     */
    int             ifXTable_ifIndex_check_index(ifXTable_rowreq_ctx * rowreq_ctx);     /* external */


    int             ifXTable_undo_setup(ifXTable_rowreq_ctx * rowreq_ctx);
    int             ifXTable_commit(ifXTable_rowreq_ctx * rowreq_ctx);


    int             ifName_check_value(ifXTable_rowreq_ctx * rowreq_ctx,
                                       char *ifName_ptr,
                                       size_t ifName_ptr_len);
    int             ifName_undo_setup(ifXTable_rowreq_ctx * rowreq_ctx);
    int             ifName_set(ifXTable_rowreq_ctx * rowreq_ctx,
                               char *ifName_ptr, size_t ifName_ptr_len);
    int             ifName_undo(ifXTable_rowreq_ctx * rowreq_ctx);

    int             ifInMulticastPkts_check_value(ifXTable_rowreq_ctx *
                                                  rowreq_ctx,
                                                  u_long
                                                  ifInMulticastPkts);
    int             ifInMulticastPkts_undo_setup(ifXTable_rowreq_ctx *
                                                 rowreq_ctx);
    int             ifInMulticastPkts_set(ifXTable_rowreq_ctx * rowreq_ctx,
                                          u_long ifInMulticastPkts);
    int             ifInMulticastPkts_undo(ifXTable_rowreq_ctx *
                                           rowreq_ctx);

    int             ifInBroadcastPkts_check_value(ifXTable_rowreq_ctx *
                                                  rowreq_ctx,
                                                  u_long
                                                  ifInBroadcastPkts);
    int             ifInBroadcastPkts_undo_setup(ifXTable_rowreq_ctx *
                                                 rowreq_ctx);
    int             ifInBroadcastPkts_set(ifXTable_rowreq_ctx * rowreq_ctx,
                                          u_long ifInBroadcastPkts);
    int             ifInBroadcastPkts_undo(ifXTable_rowreq_ctx *
                                           rowreq_ctx);

    int             ifOutMulticastPkts_check_value(ifXTable_rowreq_ctx *
                                                   rowreq_ctx,
                                                   u_long
                                                   ifOutMulticastPkts);
    int             ifOutMulticastPkts_undo_setup(ifXTable_rowreq_ctx *
                                                  rowreq_ctx);
    int             ifOutMulticastPkts_set(ifXTable_rowreq_ctx *
                                           rowreq_ctx,
                                           u_long ifOutMulticastPkts);
    int             ifOutMulticastPkts_undo(ifXTable_rowreq_ctx *
                                            rowreq_ctx);

    int             ifOutBroadcastPkts_check_value(ifXTable_rowreq_ctx *
                                                   rowreq_ctx,
                                                   u_long
                                                   ifOutBroadcastPkts);
    int             ifOutBroadcastPkts_undo_setup(ifXTable_rowreq_ctx *
                                                  rowreq_ctx);
    int             ifOutBroadcastPkts_set(ifXTable_rowreq_ctx *
                                           rowreq_ctx,
                                           u_long ifOutBroadcastPkts);
    int             ifOutBroadcastPkts_undo(ifXTable_rowreq_ctx *
                                            rowreq_ctx);

    int             ifHCInOctets_check_value(ifXTable_rowreq_ctx *
                                             rowreq_ctx, U64 ifHCInOctets);
    int             ifHCInOctets_undo_setup(ifXTable_rowreq_ctx *
                                            rowreq_ctx);
    int             ifHCInOctets_set(ifXTable_rowreq_ctx * rowreq_ctx,
                                     U64 ifHCInOctets);
    int             ifHCInOctets_undo(ifXTable_rowreq_ctx * rowreq_ctx);

    int             ifHCInUcastPkts_check_value(ifXTable_rowreq_ctx *
                                                rowreq_ctx,
                                                U64 ifHCInUcastPkts);
    int             ifHCInUcastPkts_undo_setup(ifXTable_rowreq_ctx *
                                               rowreq_ctx);
    int             ifHCInUcastPkts_set(ifXTable_rowreq_ctx * rowreq_ctx,
                                        U64 ifHCInUcastPkts);
    int             ifHCInUcastPkts_undo(ifXTable_rowreq_ctx * rowreq_ctx);

    int             ifHCInMulticastPkts_check_value(ifXTable_rowreq_ctx *
                                                    rowreq_ctx,
                                                    U64
                                                    ifHCInMulticastPkts);
    int             ifHCInMulticastPkts_undo_setup(ifXTable_rowreq_ctx *
                                                   rowreq_ctx);
    int             ifHCInMulticastPkts_set(ifXTable_rowreq_ctx *
                                            rowreq_ctx,
                                            U64 ifHCInMulticastPkts);
    int             ifHCInMulticastPkts_undo(ifXTable_rowreq_ctx *
                                             rowreq_ctx);

    int             ifHCInBroadcastPkts_check_value(ifXTable_rowreq_ctx *
                                                    rowreq_ctx,
                                                    U64
                                                    ifHCInBroadcastPkts);
    int             ifHCInBroadcastPkts_undo_setup(ifXTable_rowreq_ctx *
                                                   rowreq_ctx);
    int             ifHCInBroadcastPkts_set(ifXTable_rowreq_ctx *
                                            rowreq_ctx,
                                            U64 ifHCInBroadcastPkts);
    int             ifHCInBroadcastPkts_undo(ifXTable_rowreq_ctx *
                                             rowreq_ctx);

    int             ifHCOutOctets_check_value(ifXTable_rowreq_ctx *
                                              rowreq_ctx,
                                              U64 ifHCOutOctets);
    int             ifHCOutOctets_undo_setup(ifXTable_rowreq_ctx *
                                             rowreq_ctx);
    int             ifHCOutOctets_set(ifXTable_rowreq_ctx * rowreq_ctx,
                                      U64 ifHCOutOctets);
    int             ifHCOutOctets_undo(ifXTable_rowreq_ctx * rowreq_ctx);

    int             ifHCOutUcastPkts_check_value(ifXTable_rowreq_ctx *
                                                 rowreq_ctx,
                                                 U64 ifHCOutUcastPkts);
    int             ifHCOutUcastPkts_undo_setup(ifXTable_rowreq_ctx *
                                                rowreq_ctx);
    int             ifHCOutUcastPkts_set(ifXTable_rowreq_ctx * rowreq_ctx,
                                         U64 ifHCOutUcastPkts);
    int             ifHCOutUcastPkts_undo(ifXTable_rowreq_ctx *
                                          rowreq_ctx);

    int             ifHCOutMulticastPkts_check_value(ifXTable_rowreq_ctx *
                                                     rowreq_ctx,
                                                     U64
                                                     ifHCOutMulticastPkts);
    int             ifHCOutMulticastPkts_undo_setup(ifXTable_rowreq_ctx *
                                                    rowreq_ctx);
    int             ifHCOutMulticastPkts_set(ifXTable_rowreq_ctx *
                                             rowreq_ctx,
                                             U64 ifHCOutMulticastPkts);
    int             ifHCOutMulticastPkts_undo(ifXTable_rowreq_ctx *
                                              rowreq_ctx);

    int             ifHCOutBroadcastPkts_check_value(ifXTable_rowreq_ctx *
                                                     rowreq_ctx,
                                                     U64
                                                     ifHCOutBroadcastPkts);
    int             ifHCOutBroadcastPkts_undo_setup(ifXTable_rowreq_ctx *
                                                    rowreq_ctx);
    int             ifHCOutBroadcastPkts_set(ifXTable_rowreq_ctx *
                                             rowreq_ctx,
                                             U64 ifHCOutBroadcastPkts);
    int             ifHCOutBroadcastPkts_undo(ifXTable_rowreq_ctx *
                                              rowreq_ctx);

    int             ifLinkUpDownTrapEnable_check_value(ifXTable_rowreq_ctx
                                                       * rowreq_ctx,
                                                       u_long
                                                       ifLinkUpDownTrapEnable);
    int             ifLinkUpDownTrapEnable_undo_setup(ifXTable_rowreq_ctx *
                                                      rowreq_ctx);
    int             ifLinkUpDownTrapEnable_set(ifXTable_rowreq_ctx *
                                               rowreq_ctx,
                                               u_long
                                               ifLinkUpDownTrapEnable);
    int             ifLinkUpDownTrapEnable_undo(ifXTable_rowreq_ctx *
                                                rowreq_ctx);

    int             ifHighSpeed_check_value(ifXTable_rowreq_ctx *
                                            rowreq_ctx,
                                            u_long ifHighSpeed);
    int             ifHighSpeed_undo_setup(ifXTable_rowreq_ctx *
                                           rowreq_ctx);
    int             ifHighSpeed_set(ifXTable_rowreq_ctx * rowreq_ctx,
                                    u_long ifHighSpeed);
    int             ifHighSpeed_undo(ifXTable_rowreq_ctx * rowreq_ctx);

    int             ifPromiscuousMode_check_value(ifXTable_rowreq_ctx *
                                                  rowreq_ctx,
                                                  u_long
                                                  ifPromiscuousMode);
    int             ifPromiscuousMode_undo_setup(ifXTable_rowreq_ctx *
                                                 rowreq_ctx);
    int             ifPromiscuousMode_set(ifXTable_rowreq_ctx * rowreq_ctx,
                                          u_long ifPromiscuousMode);
    int             ifPromiscuousMode_undo(ifXTable_rowreq_ctx *
                                           rowreq_ctx);

    int             ifConnectorPresent_check_value(ifXTable_rowreq_ctx *
                                                   rowreq_ctx,
                                                   u_long
                                                   ifConnectorPresent);
    int             ifConnectorPresent_undo_setup(ifXTable_rowreq_ctx *
                                                  rowreq_ctx);
    int             ifConnectorPresent_set(ifXTable_rowreq_ctx *
                                           rowreq_ctx,
                                           u_long ifConnectorPresent);
    int             ifConnectorPresent_undo(ifXTable_rowreq_ctx *
                                            rowreq_ctx);

    int             ifAlias_check_value(ifXTable_rowreq_ctx * rowreq_ctx,
                                        char *ifAlias_ptr,
                                        size_t ifAlias_ptr_len);
    int             ifAlias_undo_setup(ifXTable_rowreq_ctx * rowreq_ctx);
    int             ifAlias_set(ifXTable_rowreq_ctx * rowreq_ctx,
                                char *ifAlias_ptr, size_t ifAlias_ptr_len);
    int             ifAlias_undo(ifXTable_rowreq_ctx * rowreq_ctx);

    int            
        ifCounterDiscontinuityTime_check_value(ifXTable_rowreq_ctx *
                                               rowreq_ctx,
                                               u_long
                                               ifCounterDiscontinuityTime);
    int            
        ifCounterDiscontinuityTime_undo_setup(ifXTable_rowreq_ctx *
                                              rowreq_ctx);
    int             ifCounterDiscontinuityTime_set(ifXTable_rowreq_ctx *
                                                   rowreq_ctx,
                                                   u_long
                                                   ifCounterDiscontinuityTime);
    int             ifCounterDiscontinuityTime_undo(ifXTable_rowreq_ctx *
                                                    rowreq_ctx);


    int             ifXTable_check_dependencies(ifXTable_rowreq_ctx * ctx);



#ifndef MFD_SUCCESS
#define MFD_SUCCESS              SNMP_ERR_NOERROR
#define MFD_SKIP                 SNMP_NOSUCHINSTANCE
#define MFD_ERROR                SNMP_ERR_GENERR
#define MFD_RESOURCE_UNAVAILABLE SNMP_ERR_RESOURCEUNAVAILABLE
#define MFD_INCONSISTENT_VALUE   SNMP_ERR_INCONSISTENTVALUE
#define MFD_BAD_VALUE            SNMP_ERR_BADVALUE
#define MFD_END_OF_DATA          SNMP_ENDOFMIBVIEW
#endif

#ifdef __cplusplus
};
#endif

#endif                          /* IFXTABLE_H */

/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.17 $ of : mfd-top.m2c,v $
 *
 * $Id$
 */
#ifndef IPCIDRROUTETABLE_H
#define IPCIDRROUTETABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>
#include <net-snmp/data_access/route.h>

#include "mibII/route_headers.h"

    /*
     * other required module components 
     */
    config_require(ip-forward-mib/data_access/route);
    config_require(ip-forward-mib/ipCidrRouteTable/ipCidrRouteTable_interface);
    config_require(ip-forward-mib/ipCidrRouteTable/ipCidrRouteTable_data_access);
    config_exclude(mibII/var_route);
    config_exclude(mibII/ip);

    /*
     * OID, column number and enum definions for  
     */
#include "ipCidrRouteTable_constants.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_ipCidrRouteTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table ipCidrRouteTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * ipCidrRouteTable is subid 4 of ipForward.
     * It's status is Current.
     * OID: .1.3.6.1.2.1.4.24.4, length: 9
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     */
    typedef netsnmp_data_list *ipCidrRouteTable_registration_ptr;

/**********************************************************************/
    /*
     * data context
     */
    typedef netsnmp_route_entry ipCidrRouteTable_data;


    /*
     *********************************************************************
     * undo context
     * We're just going to use the same data structure for our
     * undo_context. If you want to do something more efficent,
     * define your typedef here.
     */
    typedef ipCidrRouteTable_data ipCidrRouteTable_undo_data;

    /*
     * This structure is used to represent the index for a table.
     */
    typedef struct ipCidrRouteTable_mib_index_s {

        /** ipCidrRouteDest(1)/IPADDR/ASN_IPADDRESS/u_long(u_long)//l/A/w/e/r/d/h */
        u_long          ipCidrRouteDest;

        /** ipCidrRouteMask(2)/IPADDR/ASN_IPADDRESS/u_long(u_long)//l/A/w/e/r/d/h */
        u_long          ipCidrRouteMask;

        /** ipCidrRouteTos(3)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h */
        long            ipCidrRouteTos;

        /** ipCidrRouteNextHop(4)/IPADDR/ASN_IPADDRESS/u_long(u_long)//l/A/w/e/r/d/h */
        u_long          ipCidrRouteNextHop;


    } ipCidrRouteTable_mib_index;


    /*
     *********************************************************************
     * Row request context
     * When your functions are called, you will be passed a
     * ipCidrRouteTable_rowreq_ctx pointer.
     */
    typedef struct ipCidrRouteTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_OID_LEN];   /* xxx-rks: shrink this */

        ipCidrRouteTable_mib_index tbl_idx;

        ipCidrRouteTable_data *data;
        ipCidrRouteTable_undo_data *undo;

    /** implementor's context pointer provided during registration */
        ipCidrRouteTable_registration_ptr ipCidrRouteTable_reg;

        /*
         * TODO:
         * add any other useful data
         *       (e.g. flags for when a column has been set)
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *ipCidrRouteTable_data_list;

    } ipCidrRouteTable_rowreq_ctx;

    typedef struct ipCidrRouteTable_ref_rowreq_ctx_s {
        ipCidrRouteTable_rowreq_ctx *rowreq_ctx;
    } ipCidrRouteTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        ipCidrRouteTable_pre_request(ipCidrRouteTable_registration_ptr
                                     user_context);
    int            
        ipCidrRouteTable_post_request(ipCidrRouteTable_registration_ptr
                                      user_context);

    ipCidrRouteTable_data *ipCidrRouteTable_allocate_data(void);
    void            ipCidrRouteTable_release_data(ipCidrRouteTable_data *
                                                  data);

    int             ipCidrRouteTable_commit(ipCidrRouteTable_rowreq_ctx *
                                            rowreq_ctx);

    extern oid      ipCidrRouteTable_oid[];
    extern int      ipCidrRouteTable_oid_size;


#include "ipCidrRouteTable_interface.h"
#include "ipCidrRouteTable_data_access.h"
    /*
     *********************************************************************
     * GET function declarations
     */

    /*
     *********************************************************************
     * GET Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table ipCidrRouteTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * ipCidrRouteTable is subid 4 of ipForward.
     * It's status is Current.
     * OID: .1.3.6.1.2.1.4.24.4, length: 9
     */
    /*
     * indexes
     */

    int             ipCidrRouteIfIndex_get(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx,
                                           long *ipCidrRouteIfIndex_ptr);
    int             ipCidrRouteType_get(ipCidrRouteTable_rowreq_ctx *
                                        rowreq_ctx,
                                        u_long * ipCidrRouteType_ptr);
    int             ipCidrRouteProto_get(ipCidrRouteTable_rowreq_ctx *
                                         rowreq_ctx,
                                         u_long * ipCidrRouteProto_ptr);
    int             ipCidrRouteAge_get(ipCidrRouteTable_rowreq_ctx *
                                       rowreq_ctx,
                                       long *ipCidrRouteAge_ptr);
    int             ipCidrRouteInfo_get(ipCidrRouteTable_rowreq_ctx *
                                        rowreq_ctx,
                                        oid ** ipCidrRouteInfo_ptr_ptr,
                                        size_t *
                                        ipCidrRouteInfo_ptr_len_ptr);
    int             ipCidrRouteNextHopAS_get(ipCidrRouteTable_rowreq_ctx *
                                             rowreq_ctx,
                                             long
                                             *ipCidrRouteNextHopAS_ptr);
    int             ipCidrRouteMetric1_get(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx,
                                           long *ipCidrRouteMetric1_ptr);
    int             ipCidrRouteMetric2_get(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx,
                                           long *ipCidrRouteMetric2_ptr);
    int             ipCidrRouteMetric3_get(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx,
                                           long *ipCidrRouteMetric3_ptr);
    int             ipCidrRouteMetric4_get(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx,
                                           long *ipCidrRouteMetric4_ptr);
    int             ipCidrRouteMetric5_get(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx,
                                           long *ipCidrRouteMetric5_ptr);
    int             ipCidrRouteStatus_get(ipCidrRouteTable_rowreq_ctx *
                                          rowreq_ctx,
                                          u_long * ipCidrRouteStatus_ptr);


    int            
        ipCidrRouteTable_indexes_set_tbl_idx(ipCidrRouteTable_mib_index *
                                             tbl_idx,
                                             u_long ipCidrRouteDest,
                                             u_long ipCidrRouteMask,
                                             long ipCidrRouteTos,
                                             u_long ipCidrRouteNextHop);
    int            
        ipCidrRouteTable_indexes_set(ipCidrRouteTable_rowreq_ctx *
                                     rowreq_ctx, u_long ipCidrRouteDest,
                                     u_long ipCidrRouteMask,
                                     long ipCidrRouteTos,
                                     u_long ipCidrRouteNextHop);



    /*
     *********************************************************************
     * SET function declarations
     */

    /*
     *********************************************************************
     * SET Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table ipCidrRouteTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * ipCidrRouteTable is subid 4 of ipForward.
     * It's status is Current.
     * OID: .1.3.6.1.2.1.4.24.4, length: 9
     */
    int             ipCidrRouteDest_check_index(ipCidrRouteTable_rowreq_ctx * rowreq_ctx);      /* internal */
    int             ipCidrRouteMask_check_index(ipCidrRouteTable_rowreq_ctx * rowreq_ctx);      /* internal */
    int             ipCidrRouteTos_check_index(ipCidrRouteTable_rowreq_ctx * rowreq_ctx);       /* internal */
    int             ipCidrRouteNextHop_check_index(ipCidrRouteTable_rowreq_ctx * rowreq_ctx);   /* internal */


    int            
        ipCidrRouteTable_validate_index(ipCidrRouteTable_registration_ptr
                                        ipCidrRouteTable_reg,
                                        ipCidrRouteTable_rowreq_ctx *
                                        rowreq_ctx);
    int             ipCidrRouteTable_undo_setup(ipCidrRouteTable_rowreq_ctx
                                                * rowreq_ctx);
    int             ipCidrRouteTable_commit(ipCidrRouteTable_rowreq_ctx *
                                            rowreq_ctx);


    int            
        ipCidrRouteIfIndex_check_value(ipCidrRouteTable_rowreq_ctx *
                                       rowreq_ctx,
                                       long ipCidrRouteIfIndex);
    int            
        ipCidrRouteIfIndex_undo_setup(ipCidrRouteTable_rowreq_ctx *
                                      rowreq_ctx);
    int             ipCidrRouteIfIndex_set(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx,
                                           long ipCidrRouteIfIndex);
    int             ipCidrRouteIfIndex_undo(ipCidrRouteTable_rowreq_ctx *
                                            rowreq_ctx);

    int             ipCidrRouteType_check_value(ipCidrRouteTable_rowreq_ctx
                                                * rowreq_ctx,
                                                u_long ipCidrRouteType);
    int             ipCidrRouteType_undo_setup(ipCidrRouteTable_rowreq_ctx
                                               * rowreq_ctx);
    int             ipCidrRouteType_set(ipCidrRouteTable_rowreq_ctx *
                                        rowreq_ctx,
                                        u_long ipCidrRouteType);
    int             ipCidrRouteType_undo(ipCidrRouteTable_rowreq_ctx *
                                         rowreq_ctx);

    int            
        ipCidrRouteProto_check_value(ipCidrRouteTable_rowreq_ctx *
                                     rowreq_ctx, u_long ipCidrRouteProto);
    int             ipCidrRouteProto_undo_setup(ipCidrRouteTable_rowreq_ctx
                                                * rowreq_ctx);
    int             ipCidrRouteProto_set(ipCidrRouteTable_rowreq_ctx *
                                         rowreq_ctx,
                                         u_long ipCidrRouteProto);
    int             ipCidrRouteProto_undo(ipCidrRouteTable_rowreq_ctx *
                                          rowreq_ctx);

    int             ipCidrRouteAge_check_value(ipCidrRouteTable_rowreq_ctx
                                               * rowreq_ctx,
                                               long ipCidrRouteAge);
    int             ipCidrRouteAge_undo_setup(ipCidrRouteTable_rowreq_ctx *
                                              rowreq_ctx);
    int             ipCidrRouteAge_set(ipCidrRouteTable_rowreq_ctx *
                                       rowreq_ctx, long ipCidrRouteAge);
    int             ipCidrRouteAge_undo(ipCidrRouteTable_rowreq_ctx *
                                        rowreq_ctx);

    int             ipCidrRouteInfo_check_value(ipCidrRouteTable_rowreq_ctx
                                                * rowreq_ctx,
                                                oid * ipCidrRouteInfo_ptr,
                                                size_t
                                                ipCidrRouteInfo_ptr_len);
    int             ipCidrRouteInfo_undo_setup(ipCidrRouteTable_rowreq_ctx
                                               * rowreq_ctx);
    int             ipCidrRouteInfo_set(ipCidrRouteTable_rowreq_ctx *
                                        rowreq_ctx,
                                        oid * ipCidrRouteInfo_ptr,
                                        size_t ipCidrRouteInfo_ptr_len);
    int             ipCidrRouteInfo_undo(ipCidrRouteTable_rowreq_ctx *
                                         rowreq_ctx);

    int            
        ipCidrRouteNextHopAS_check_value(ipCidrRouteTable_rowreq_ctx *
                                         rowreq_ctx,
                                         long ipCidrRouteNextHopAS);
    int            
        ipCidrRouteNextHopAS_undo_setup(ipCidrRouteTable_rowreq_ctx *
                                        rowreq_ctx);
    int             ipCidrRouteNextHopAS_set(ipCidrRouteTable_rowreq_ctx *
                                             rowreq_ctx,
                                             long ipCidrRouteNextHopAS);
    int             ipCidrRouteNextHopAS_undo(ipCidrRouteTable_rowreq_ctx *
                                              rowreq_ctx);

    int            
        ipCidrRouteMetric1_check_value(ipCidrRouteTable_rowreq_ctx *
                                       rowreq_ctx,
                                       long ipCidrRouteMetric1);
    int            
        ipCidrRouteMetric1_undo_setup(ipCidrRouteTable_rowreq_ctx *
                                      rowreq_ctx);
    int             ipCidrRouteMetric1_set(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx,
                                           long ipCidrRouteMetric1);
    int             ipCidrRouteMetric1_undo(ipCidrRouteTable_rowreq_ctx *
                                            rowreq_ctx);

    int            
        ipCidrRouteMetric2_check_value(ipCidrRouteTable_rowreq_ctx *
                                       rowreq_ctx,
                                       long ipCidrRouteMetric2);
    int            
        ipCidrRouteMetric2_undo_setup(ipCidrRouteTable_rowreq_ctx *
                                      rowreq_ctx);
    int             ipCidrRouteMetric2_set(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx,
                                           long ipCidrRouteMetric2);
    int             ipCidrRouteMetric2_undo(ipCidrRouteTable_rowreq_ctx *
                                            rowreq_ctx);

    int            
        ipCidrRouteMetric3_check_value(ipCidrRouteTable_rowreq_ctx *
                                       rowreq_ctx,
                                       long ipCidrRouteMetric3);
    int            
        ipCidrRouteMetric3_undo_setup(ipCidrRouteTable_rowreq_ctx *
                                      rowreq_ctx);
    int             ipCidrRouteMetric3_set(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx,
                                           long ipCidrRouteMetric3);
    int             ipCidrRouteMetric3_undo(ipCidrRouteTable_rowreq_ctx *
                                            rowreq_ctx);

    int            
        ipCidrRouteMetric4_check_value(ipCidrRouteTable_rowreq_ctx *
                                       rowreq_ctx,
                                       long ipCidrRouteMetric4);
    int            
        ipCidrRouteMetric4_undo_setup(ipCidrRouteTable_rowreq_ctx *
                                      rowreq_ctx);
    int             ipCidrRouteMetric4_set(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx,
                                           long ipCidrRouteMetric4);
    int             ipCidrRouteMetric4_undo(ipCidrRouteTable_rowreq_ctx *
                                            rowreq_ctx);

    int            
        ipCidrRouteMetric5_check_value(ipCidrRouteTable_rowreq_ctx *
                                       rowreq_ctx,
                                       long ipCidrRouteMetric5);
    int            
        ipCidrRouteMetric5_undo_setup(ipCidrRouteTable_rowreq_ctx *
                                      rowreq_ctx);
    int             ipCidrRouteMetric5_set(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx,
                                           long ipCidrRouteMetric5);
    int             ipCidrRouteMetric5_undo(ipCidrRouteTable_rowreq_ctx *
                                            rowreq_ctx);

    int            
        ipCidrRouteStatus_check_value(ipCidrRouteTable_rowreq_ctx *
                                      rowreq_ctx,
                                      u_long ipCidrRouteStatus);
    int            
        ipCidrRouteStatus_undo_setup(ipCidrRouteTable_rowreq_ctx *
                                     rowreq_ctx);
    int             ipCidrRouteStatus_set(ipCidrRouteTable_rowreq_ctx *
                                          rowreq_ctx,
                                          u_long ipCidrRouteStatus);
    int             ipCidrRouteStatus_undo(ipCidrRouteTable_rowreq_ctx *
                                           rowreq_ctx);


    int            
        ipCidrRouteTable_check_dependencies(ipCidrRouteTable_rowreq_ctx *
                                            ctx);



#ifndef MFD_SUCCESS
#define MFD_SUCCESS              SNMP_ERR_NOERROR
#define MFD_SKIP                 SNMP_NOSUCHINSTANCE
#define MFD_ERROR                SNMP_ERR_GENERR
#define MFD_RESOURCE_UNAVAILABLE SNMP_ERR_RESOURCEUNAVAILABLE
#define MFD_INCONSISTENT_VALUE   SNMP_ERR_INCONSISTENTVALUE
#define MFD_BAD_VALUE            SNMP_ERR_BADVALUE
#define MFD_END_OF_DATA          SNMP_ENDOFMIBVIEW
#endif

#ifdef __cplusplus
};
#endif

#endif                          /* IPCIDRROUTETABLE_H */

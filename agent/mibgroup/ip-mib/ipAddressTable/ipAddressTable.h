/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.17 $ of : mfd-top.m2c,v $
 *
 * $Id$
 */
#ifndef IPADDRESSTABLE_H
#define IPADDRESSTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>
#include <net-snmp/data_access/ipaddress.h>

    /*
     * other required module components 
     */
    config_require(ip-mib/data_access/ipaddress);
    config_require(ip-mib/ipAddressTable/ipAddressTable_interface);
    config_require(ip-mib/ipAddressTable/ipAddressTable_data_access);

    /*
     * OID, column number and enum definions for  
     */
#include "ipAddressTable_constants.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_ipAddressTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table ipAddressTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * ipAddressTable is subid 33 of ip.
     * It's status is Current.
     * OID: .1.3.6.1.2.1.4.33, length: 8
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     */
    typedef netsnmp_data_list *ipAddressTable_registration_ptr;

/**********************************************************************/
    /*
     * data context
     */
    typedef netsnmp_ipaddress_entry ipAddressTable_data;


    /*
     * This structure is used to represent the index for a table.
     */
    typedef struct ipAddressTable_mib_index_s {

        /** ipAddressAddrType(1)/InetAddressType/ASN_INTEGER/long(u_long)//l/a/w/E/r/d/h */
        u_long          ipAddressAddrType;

        /** ipAddressAddr(2)/InetAddress/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h */
        char            ipAddressAddr[36];
        size_t          ipAddressAddr_len;


    } ipAddressTable_mib_index;


    /*
     *********************************************************************
     * Row request context
     * When your functions are called, you will be passed a
     * ipAddressTable_rowreq_ctx pointer.
     */
    typedef struct ipAddressTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_OID_LEN];   /* xxx-rks: shrink this */

        ipAddressTable_mib_index tbl_idx;

        ipAddressTable_data *data;

    /** implementor's context pointer provided during registration */
        ipAddressTable_registration_ptr ipAddressTable_reg;

        /*
         * TODO:
         * add any other useful data
         *       (e.g. flags for when a column has been set)
         */
       u_int32_t created;    /* sysUpTime */
       u_int32_t changed;    /* sysUpTime */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *ipAddressTable_data_list;

    } ipAddressTable_rowreq_ctx;

    typedef struct ipAddressTable_ref_rowreq_ctx_s {
        ipAddressTable_rowreq_ctx *rowreq_ctx;
    } ipAddressTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        ipAddressTable_pre_request(ipAddressTable_registration_ptr
                                   user_context);
    int            
        ipAddressTable_post_request(ipAddressTable_registration_ptr
                                    user_context);

    ipAddressTable_data *ipAddressTable_allocate_data(void);
    void            ipAddressTable_release_data(ipAddressTable_data *
                                                data);


    extern oid      ipAddressTable_oid[];
    extern int      ipAddressTable_oid_size;


#include "ipAddressTable_interface.h"
#include "ipAddressTable_data_access.h"
    /*
     *********************************************************************
     * GET function declarations
     */

    /*
     *********************************************************************
     * GET Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table ipAddressTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * ipAddressTable is subid 33 of ip.
     * It's status is Current.
     * OID: .1.3.6.1.2.1.4.33, length: 8
     */
    /*
     * indexes
     */
    int             ipAddressAddrType_map(u_long *
                                          mib_ipAddressAddrType_ptr,
                                          u_long raw_ipAddressAddrType);

    int             ipAddressIfIndex_get(ipAddressTable_rowreq_ctx *
                                         rowreq_ctx,
                                         long *ipAddressIfIndex_ptr);
    int             ipAddressType_get(ipAddressTable_rowreq_ctx *
                                      rowreq_ctx,
                                      u_long * ipAddressType_ptr);
    int             ipAddressPrefix_get(ipAddressTable_rowreq_ctx *
                                        rowreq_ctx,
                                        oid ** ipAddressPrefix_ptr_ptr,
                                        size_t *
                                        ipAddressPrefix_ptr_len_ptr);
    int             ipAddressOrigin_get(ipAddressTable_rowreq_ctx *
                                        rowreq_ctx,
                                        u_long * ipAddressOrigin_ptr);
    int             ipAddressStatus_get(ipAddressTable_rowreq_ctx *
                                        rowreq_ctx,
                                        u_long * ipAddressStatus_ptr);
    int             ipAddressCreated_get(ipAddressTable_rowreq_ctx *
                                         rowreq_ctx,
                                         u_long * ipAddressCreated_ptr);
    int             ipAddressLastChanged_get(ipAddressTable_rowreq_ctx *
                                             rowreq_ctx,
                                             u_long *
                                             ipAddressLastChanged_ptr);


    int            
        ipAddressTable_indexes_set_tbl_idx(ipAddressTable_mib_index *
                                           tbl_idx,
                                           u_long ipAddressAddrType,
                                           char *ipAddressAddr_ptr,
                                           size_t ipAddressAddr_ptr_len);
    int             ipAddressTable_indexes_set(ipAddressTable_rowreq_ctx *
                                               rowreq_ctx,
                                               u_long ipAddressAddrType,
                                               char *ipAddressAddr_ptr,
                                               size_t
                                               ipAddressAddr_ptr_len);



    /*
     *********************************************************************
     * SET function declarations
     */

    /*
     *********************************************************************
     * SET Table declarations
     */



#ifndef MFD_SUCCESS
#define MFD_SUCCESS              SNMP_ERR_NOERROR
#define MFD_SKIP                 SNMP_NOSUCHINSTANCE
#define MFD_ERROR                SNMP_ERR_GENERR
#define MFD_RESOURCE_UNAVAILABLE SNMP_ERR_RESOURCEUNAVAILABLE
#define MFD_INCONSISTENT_VALUE   SNMP_ERR_INCONSISTENTVALUE
#define MFD_BAD_VALUE            SNMP_ERR_BADVALUE
#define MFD_END_OF_DATA          SNMP_ENDOFMIBVIEW
#endif

#ifdef __cplusplus
};
#endif

#endif                          /* IPADDRESSTABLE_H */

# Checks for library functions.
AC_FUNC_ALLOCA
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_GETMNTENT
AC_CHECK_FUNCS(setmntent hasmntopt gethostname uname gettimeofday select poll socket strtol strtoul strlcpy)
AC_CHECK_FUNCS(strchr strtok_r strdup memcpy memmove index bcopy strcasestr regcomp)
AC_CHECK_FUNCS(signal setsid sigset sigblock sighold strerror setenv vsnprintf snprintf)
AC_CHECK_FUNCS(sigaction)
AC_CHECK_FUNCS(random lrand48 rand)
AC_CHECK_FUNCS(execv system fork getpid strncasecmp sigalrm)
AC_CHECK_FUNCS(lseek64 pread64)
if test "x$with_rpm" != "xno" && \
        echo " $module_list " | $GREP " host/hr_swinst " > /dev/null; then
  OLDLIBS=$LIBS
  LIBS=$LMIBLIBS
  AC_CHECK_FUNCS(rpmGetPath)
  LIBS=$OLDLIBS
fi

AC_CHECK_FUNCS(getloadavg)
AC_CHECK_FUNCS(getaddrinfo getipnodebyname gai_strerror)
# BSDi2 functions differ
AC_CHECK_FUNCS(statvfs statfs)
AC_CHECK_FUNCS(getdtablesize)
# freebsd2 checks
AC_CHECK_FUNCS(getfsstat getvfsstat)
AC_CHECK_FUNCS(usleep)
AC_CHECK_FUNCS(setlocale)
AC_CHECK_FUNCS(tcgetattr)
AC_CHECK_FUNCS(if_nameindex if_freenameindex)
# solaris checks
AC_CHECK_FUNCS(getpagesize)
AC_CHECK_FUNCS(mkstemp)
AC_CHECK_FUNCS(getpwnam getgrnam setgid setuid setgroups initgroups)
# High resolution alarm support
AC_CHECK_FUNCS(setitimer)
# functions to support the clock.
AC_CHECK_FUNCS(mktime stime times sysconf)
# missing from hp-ux
AC_CHECK_FUNCS(if_nametoindex)

AC_CACHE_CHECK([for SIOCGIFADDR in sys/ioctl.h],
               netsnmp_cv_sys_ioctl_h_has_SIOCGIFADDR,
               AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#ifdef HAVE_SYS_IOCTL_H
#include <sys/ioctl.h>
#endif
#ifndef SIOCGIFADDR
No SIOCGIFADDR found here.
#endif
]])],
               [netsnmp_cv_sys_ioctl_h_has_SIOCGIFADDR=yes],
               [netsnmp_cv_sys_ioctl_h_has_SIOCGIFADDR=no]))
if test $netsnmp_cv_sys_ioctl_h_has_SIOCGIFADDR = yes; then
  AC_DEFINE(SYS_IOCTL_H_HAS_SIOCGIFADDR)
fi

# ultrix
AC_MSG_CHECKING([[for two-argument statfs with struct fs_data (Ultrix)]])
AC_CACHE_VAL(fu_cv_sys_stat_fs_data,
[AC_TRY_RUN([
#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif
#include <sys/types.h>
#ifdef HAVE_SYS_MOUNT_H
#include <sys/mount.h>
#endif
#ifdef HAVE_SYS_FS_TYPES_H
#include <sys/fs_types.h>
#endif
main ()
{
struct fs_data fsd;
/* Ultrix's statfs returns 1 for success,
   0 for not mounted, -1 for failure.  */
exit (statfs (".", &fsd) != 1);
}],
fu_cv_sys_stat_fs_data=yes,
fu_cv_sys_stat_fs_data=no,
fu_cv_sys_stat_fs_data=no)])
AC_MSG_RESULT($fu_cv_sys_stat_fs_data)
if test $fu_cv_sys_stat_fs_data = yes; then
  AC_DEFINE(STAT_STATFS_FS_DATA)
fi

AC_CACHE_CHECK([how to get the name of the current function],
               [netsnmp_cv__func__name],[
netsnmp_cv__func__name=no
AC_COMPILE_IFELSE(
        AC_LANG_PROGRAM(
                [[extern inline void t1() { const char* cp = __func__; }]],
                [[const char* cp = __func__;]]),
        [netsnmp_cv__func__name=__func__])
if test "$netsnmp_cv__func__name" = no ; then
AC_COMPILE_IFELSE(
        AC_LANG_PROGRAM(,[[const char* cp = __FUNCTION__;]]),
        [netsnmp_cv__func__name=__FUNCTION__])
fi])
if test "$netsnmp_cv__func__name" != no; then
    AC_DEFINE_UNQUOTED([NETSNMP_FUNCTION],[$netsnmp_cv__func__name],
        [Should evaluate to the name of the current function if defined])
fi

#--------------------------------------------------------------
# on SCO Unixware 7.1.4 (SCO compiler), "static inline" functions
# are not supported, so this disables the whole inline thing if it
# doesn't work properly. Should have no effect on other platforms.
AC_CACHE_CHECK([[whether static inline functions are broken (Unixware)]],
    [netsnmp_cv_c_broken_inline],
AC_COMPILE_IFELSE([[
static inline int nested_inline_function(void) {
  return 0;
}
inline int main_inline_function( void ) {
  return nested_inline_function();
}
]], netsnmp_cv_broken_inline=no, netsnmp_cv_broken_inline=yes))

# But, sadly, the usage of inline in NET_SNMP disagrees seriously with at least
# solaris2, so disable it for now.
case "$target_os" in
    solaris*)
        netsnmp_cv_broken_inline=yes
        ;;
    *)
        ;;
esac

if test "$netsnmp_cv_broken_inline" = yes ; then
  AC_DEFINE(NETSNMP_BROKEN_INLINE, 1,
        [Define if static inline functions are unsupported])
fi

.TH "generic linked-list data handling with a string as a key." 3 "28 Apr 2003" "net-snmp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
generic linked-list data handling with a string as a key. \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBnetsnmp_free_list_data\fP (netsnmp_data_list *node)"
.br
.RI "\fIfrees the data and a name at a given data_list node.\fP"
.ti -1c
.RI "void \fBnetsnmp_free_all_list_data\fP (netsnmp_data_list *head)"
.br
.RI "\fIfrees all data and nodes in a list.\fP"
.ti -1c
.RI "netsnmp_data_list * \fBnetsnmp_create_data_list\fP (const char *name, void *data, Netsnmp_Free_List_Data *beer)"
.br
.RI "\fIadds creates a data_list node given a name, data and a free function ptr.\fP"
.ti -1c
.RI "void \fBnetsnmp_add_list_data\fP (netsnmp_data_list **head, netsnmp_data_list *node)"
.br
.RI "\fIadds data to a datalist.\fP"
.ti -1c
.RI "void * \fBnetsnmp_get_list_data\fP (netsnmp_data_list *head, const char *name)"
.br
.RI "\fIreturns a data_list node's data for a given name within a data_list.\fP"
.ti -1c
.RI "netsnmp_data_list * \fBnetsnmp_get_list_node\fP (netsnmp_data_list *head, const char *name)"
.br
.RI "\fIreturns a data_list node for a given name within a data_list.\fP"
.ti -1c
.RI "int \fBnetsnmp_remove_list_node\fP (netsnmp_data_list **realhead, const char *name)"
.br
.RI "\fIRemoves a named node from a data_list (and frees it).\fP"
.ti -1c
.RI "void \fBnetsnmp_register_save_list\fP (netsnmp_data_list **datalist, const char *type, const char *token, Netsnmp_Save_List_Data *data_list_save_ptr, Netsnmp_Read_List_Data *data_list_read_ptr, Netsnmp_Free_List_Data *data_list_free_ptr)"
.br
.RI "\fIregisters to store a data_list set of data at persistant storage time.\fP"
.ti -1c
.RI "int \fBnetsnmp_save_all_data_callback\fP (int major, int minor, void *serverarg, void *clientarg)"
.br
.RI "\fIintended to be registerd as a callback operation.\fP"
.ti -1c
.RI "int \fBnetsnmp_save_all_data\fP (netsnmp_data_list *head, const char *type, const char *token, Netsnmp_Save_List_Data *data_list_save_ptr)"
.br
.RI "\fIintended to be called as a callback during persistent save operations.\fP"
.ti -1c
.RI "void \fBnetsnmp_read_data_callback\fP (const char *token, char *line)"
.br
.RI "\fIintended to be registerd as a .conf parser It should be registered using:.\fP"
.in -1c
.SH "FUNCTION DOCUMENTATION"
.PP 
.SS "void netsnmp_add_list_data (netsnmp_data_list ** head, netsnmp_data_list * node)\fC [inline]\fP"
.PP
adds data to a datalist.
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIhead\fP\fP
a pointer to the head node of a data_list 
.TP
\fB\fInode\fP\fP
a node to stash in the data_list 
.PP
\fBReturns: \fP
.in +1c
a pointer to the data cached at that node 
.PP
Definition at line 76 of file data_list.c.
.SS "netsnmp_data_list* netsnmp_create_data_list (const char * name, void * data, Netsnmp_Free_List_Data * beer)\fC [inline]\fP"
.PP
adds creates a data_list node given a name, data and a free function ptr.
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIname\fP\fP
the name of the node to cache the data. 
.TP
\fB\fIdata\fP\fP
the data to be stored under that name 
.TP
\fB\fIbeer\fP\fP
A function that can free the data pointer (in the future) 
.PP
\fBReturns: \fP
.in +1c
a newly created data_list node which can be given to the netsnmp_add_list_data function. 
.PP
Definition at line 57 of file data_list.c.
.SS "void netsnmp_free_all_list_data (netsnmp_data_list * head)\fC [inline]\fP"
.PP
frees all data and nodes in a list.
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIhead\fP\fP
the top node of the list to be freed. 
.PP
Definition at line 39 of file data_list.c.
.SS "void netsnmp_free_list_data (netsnmp_data_list * node)\fC [inline]\fP"
.PP
frees the data and a name at a given data_list node.
.PP
Note that this doesn't free the node itself. 
.PP
Parameters: \fP
.in +1c
.TP
\fB\fInode\fP\fP
the node for which the data should be freed 
.PP
Definition at line 23 of file data_list.c.
.SS "void* netsnmp_get_list_data (netsnmp_data_list * head, const char * name)\fC [inline]\fP"
.PP
returns a data_list node's data for a given name within a data_list.
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIhead\fP\fP
the head node of a data_list 
.TP
\fB\fIname\fP\fP
the name to find 
.PP
\fBReturns: \fP
.in +1c
a pointer to the data cached at that node 
.PP
Definition at line 103 of file data_list.c.
.SS "netsnmp_data_list* netsnmp_get_list_node (netsnmp_data_list * head, const char * name)\fC [inline]\fP"
.PP
returns a data_list node for a given name within a data_list.
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIhead\fP\fP
the head node of a data_list 
.TP
\fB\fIname\fP\fP
the name to find 
.PP
\fBReturns: \fP
.in +1c
a pointer to the data_list node 
.PP
Definition at line 119 of file data_list.c.
.SS "void netsnmp_read_data_callback (const char * token, char * line)"
.PP
intended to be registerd as a .conf parser It should be registered using:.
.PP
register_app_config_handler('token', netsnmp_read_data_callback, XXX)
.PP
where INFO_POINTER is a pointer to a netsnmp_data_list_saveinfo object containing apporpriate registration information 
.PP
Definition at line 267 of file data_list.c.
.SS "void netsnmp_register_save_list (netsnmp_data_list ** datalist, const char * type, const char * token, Netsnmp_Save_List_Data * data_list_save_ptr, Netsnmp_Read_List_Data * data_list_read_ptr, Netsnmp_Free_List_Data * data_list_free_ptr)"
.PP
registers to store a data_list set of data at persistant storage time.
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIdatalist\fP\fP
the data to be saved 
.TP
\fB\fItype\fP\fP
the name of the application to save the data as. If left NULL the default application name that was registered during the init_snmp call will be used (recommended). 
.TP
\fB\fItoken\fP\fP
the unique token identifier string to use as the first word in the persistent file line. 
.TP
\fB\fIdata_list_save_ptr\fP\fP
a function pointer which will be called to save the rest of the data to a buffer. 
.TP
\fB\fIdata_list_read_ptr\fP\fP
a function pointer which can read the remainder of a saved line and return the application specific void * pointer. 
.TP
\fB\fIdata_list_free_ptr\fP\fP
a function pointer which will be passed to the data node for freeing it in the future when/if the list/node is cleaned up or destroyed. 
.PP
Definition at line 166 of file data_list.c.
.SS "int netsnmp_remove_list_node (netsnmp_data_list ** realhead, const char * name)"
.PP
Removes a named node from a data_list (and frees it).
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIrealhead\fP\fP
a pointer to the head node of a data_list 
.TP
\fB\fIname\fP\fP
the name to find and remove 
.PP
\fBReturns: \fP
.in +1c
0 on successful find-and-delete, 1 otherwise. 
.PP
Definition at line 135 of file data_list.c.
.SS "int netsnmp_save_all_data (netsnmp_data_list * head, const char * type, const char * token, Netsnmp_Save_List_Data * data_list_save_ptr)"
.PP
intended to be called as a callback during persistent save operations.
.PP
See the netsnmp_save_all_data_callback for where this is typically used. 
.PP
Definition at line 232 of file data_list.c.
.SS "int netsnmp_save_all_data_callback (int major, int minor, void * serverarg, void * clientarg)"
.PP
intended to be registerd as a callback operation.
.PP
It should be registered using:
.PP
snmp_register_callback(SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_STORE_DATA, netsnmp_save_all_data_callback, INFO_POINTER);
.PP
where INFO_POINTER is a pointer to a netsnmp_data_list_saveinfo object containing apporpriate registration information 
.PP
Definition at line 215 of file data_list.c.

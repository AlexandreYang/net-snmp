.TH VARBIND_API 3 "20 Apr 2009" VVERSIONINFO "Net-SNMP"
.UC 5
.SH NAME
snmp_pdu_add_var, snmp_varlist_add_var, snmp_add_null_var,
snmp_clone_varbind, snmp_free_varbind, snmp_free_var,
print_variable, fprint_variable, snprint_variable,
print_value, fprint_value, snprint_value - varbind_api functions
.SH SYNOPSIS
.B #include <net-snmp/varbind_api.h>
.SS Creation
.PP
.BI "netsnmp_variable_list *snmp_pdu_add_variable( netsnmp_pdu*" pdu ","
.br
.BI "                                     const oid *" objid ", size_t" objidlen ","
.br
.BI "                                     u_char " type ", const void * " value ", size_t " len ");"
.br
.BI "netsnmp_variable_list *snmp_varlist_add_variable( netsnmp_variable_list **" varlist ","
.br
.BI "                                     const oid *" objid ", size_t" objidlen ","
.br
.BI "                                     u_char " type ", const void * " value ", size_t " len ");"
.br
.BI "netsnmp_variable_list *snmp_add_null_var( netsnmp_pdu*" pdu ","
.br
.BI "                                     const oid *" objid ", size_t" objidlen ");"
.br
.BI "netsnmp_variable_list *snmp_clone_varbind( netsnmp_variable_list *" variables ");"
.SS Setting Values
.PP
.BI "int  snmp_set_var_objid( netsnmp_variable_list* " variables ","
.br
.BI "                         const oid * " objid ", size_t " objidlen ");"
.br
.BI "int  snmp_set_var_value( netsnmp_variable_list* " variables ","
.br
.BI "                         const void * " value ", size_t " vallen ");"
.br
.BI "int  snmp_set_var_typed_value( netsnmp_variable_list* " variables ","
.br
.BI "                         u_char " type ","
.br
.BI "                         const void * " value ", size_t " vallen ");"
.br
.BI "int  snmp_set_var_typed_integer( netsnmp_variable_list* " variables ","
.br
.BI "                         u_char " type ", long " value ");"
.br
.SS Output
.PP
.BI "void  print_variable(const oid *" "objid" ", size_t " "objidlen" ","
.br
.BI "                     const netsnmp_variable_list *" variable ");"
.br
.BI "void fprint_variable(FILE *" fp ","
.br
.BI "                     const oid *" objid ", size_t " objidlen ","
.br
.BI "                     const netsnmp_variable_list *" variable ");"
.br
.BI "int snprint_variable(char *" "buf" ", size_t " "len" ","
.br
.BI "                     const oid *" objid ", size_t " objidlen ","
.br
.BI "                     const netsnmp_variable_list *" variable ");"
.PP
.BI "void  print_value(const oid *" objid ", size_t " objidlen ","
.br
.BI "                  const netsnmp_variable_list *" variable ");"
.br
.BI "void fprint_value(FILE *" fp ","
.br
.BI "                  const oid *" objid ", size_t " objidlen ","
.br
.BI "                  const netsnmp_variable_list *" variable ");"
.br
.BI "int snprint_value(char *" buf ", size_t " "len" ","
.br
.BI "                  const oid *" objid ", size_t " objidlen ","
.br
.BI "                  const netsnmp_variable_list *" variable ");"
.br
.br
.SS Deletion
.PP
.BI "void snmp_free_varbind( netsnmp_variable_list *" variables ");"
.br
.BI "void snmp_free_var(     netsnmp_variable_list *" variable ");"
.PP
.SH DESCRIPTION
The functions dealing with variable bindings fall into four groups - 
dealing with the creation, setting of values, output and deletion of varbinds.
.SS Creation
.B snmp_pdu_add_variable
.br
.B snmp_varlist_add_variable
.br
.B snmp_add_null_var
.br
.B snmp_clone_varbind
.SS Setting of values
.B snmp_set_var_objid
.br
.B snmp_set_var_value
.br
.B snmp_set_var_typed_value
.br
.B snmp_set_var_typed_integer
.SS Deletion
.B snmp_free_varbind
.br
.B snmp_free_var
.SS Output
.B print_variable
will take an object identifier (as returned by
.B read_objid
or
.BR get_module_node )
and an instance of such a variable, and prints to the standard output
the textual form of the object identifier together with the value
of the variable.
.PP
.B fprint_variable
does the same, but prints to the FILE pointer specified by the initial
parameter.
.PP
.B snprint_variable
prints the same information into the buffer pointed to by
.I buf
which is of length
.IR len 
and returns either the number of characters printed, or -1 if the
buffer was not large enough.  In the latter case,
.I buf
will typically contained a truncated version of the information (but
this behaviour is not guaranteed).  This function replaces the
obsolete function
.BR sprint_variable .
.PP
.BR print_value ,
.BR fprint_value ,
and
.B snprint_value
do the same as the equivalent
.B print_variable
routines, but only displaying the value of the variable, without the
corresponding object identifier.
.SH "SEE ALSO"
.BR pdu_api "(3)"
.BR mib_api "(3)"

# 
# Define types of data by mib type, and translate into needed C code.
#

# We need to get some extra stuff into the variable declarations
# before sourcing the main mib2c.vartypes.conf file below.
type:		OCTETSTR
storage:	    char *$name;
storage:	    int   ${name}Len;
varlenname:	StorageTmp->${name}Len
vartest:	  if (StorageTmp->${name} == NULL) {
vartest:	    config_perror(\"invalid specification for $name\");
vartest:	    return;
vartest:	  }
vartest:
action:	             tmpvar = StorageTmp->$name;
action:	             tmplen = StorageTmp->${name}Len;
action:	             memdup(&StorageTmp->$name, var_val, var_val_len);
action:	             StorageTmp->${name}Len = var_val_len;
undo:	             SNMP_FREE(StorageTmp->${name});
undo:	             StorageTmp->${name} = tmpvar;
undo:	             StorageTmp->${name}Len = tmplen;
commit:		     SNMP_FREE(tmpvar);
sizeofstart:	
sizeofend:	Len
tmpvar:		char *
casttmp:	strdup((char *) tmpvar);
#
type:		INTEGER
storage:	    long  $name;
storageret:	&
varlenname:	tmpint
sizeofstart:	sizeof(
sizeofend:	)
tmpvar:		int
action:	             tmpvar = StorageTmp->$name;
action:	             StorageTmp->${name} = *((long *) var_val);
undo:	             StorageTmp->${name} = tmpvar;
casttmp:	tmpvar;
#
type:		OBJECTID
storage:	    oid  *$name;
storage:	    int   ${name}Len
varlenname:	StorageTmp->${name}Len
vartest:	  if (StorageTmp->${name} == NULL) {
vartest:	    config_perror(\"invalid specification for $name\");
vartest:	    return;
vartest:	  }
vartest:
action:	             tmpvar = StorageTmp->$name;
action:	             tmplen = StorageTmp->${name}Len;
action:	             memdup(&StorageTmp->$name, var_val, var_val_len);
action:	             StorageTmp->${name}Len = var_val_len/sizeof(oid);
undo:	             SNMP_FREE(StorageTmp->${name});
undo:	             StorageTmp->${name} = tmpvar;
undo:	             StorageTmp->${name}Len = tmplen;
commit:		     SNMP_FREE(tmpvar);
sizeofstart:	
sizeofend:	Len
tmpvar:		oid *
casttmp:	(oid *) tmpvar;
freetmp:	SNMP_FREE(tmpvar);
#
type:		COUNTER64
storage:	    struct counter64 $name;
varlenname:	tmpint
sizeofstart:	sizeof(
sizeofend:	)
tmpvar:		struct counter64 *
casttmp:	(struct counter64 *) tmpvar;

############################################################################
# source variable typing information:
include: mib2c.vartypes.conf

############################################################################
# The .h file
############################################################################
type:	code-dot-h
code:	/* This file was generated by mib2c and is intended for use as a mib module
code:	  for the ucd-snmp snmpd agent. */
code:
code:	#ifndef _MIBGROUP_${OUTPUTNAME}_H
code:	#define _MIBGROUP_${OUTPUTNAME}_H
code:	
code:	/* we may use header_complex from the header_complex module */
code:	
code:	config_require(header_complex)
code:
code:	/* our storage structure(s) */
code:	$variables{'code-structure-per-table'}{'processed'}
code:
code:	/* function prototypes */
code:	
code:	void   init_$outputName(void);
code:	$variables{'code-var_table-decl'}{'processed'}
code:	$variables{'code-write-func-decl'}{'processed'}
code:	
code:	#endif /* _MIBGROUP_${OUTPUTNAME}_H */

#
# Structure defitition, one per table
#
type:		code-structure-per-table
processtable:	code-structure-per-table

code:	struct ${vtable}_data {
code:	$variables{$vtable}{'code-structure'}{'processed'}
code:	};

#
# Structure storage arrays, one per table
#
type:		code-structure-storage
processtable:	code-structure-storage

code:	static struct header_complex_index *${vtable}Storage = NULL;

#
# Structure definition line.
#
type:	code-structure
process: code-structure

code:	" . evalstr($variables{$mib->{'type'}}{'storage'}) . "

############################################################################
# The .c file, top
############################################################################
type:	code-main-part
code:	/* This file was generated by mib2c and is intended for use as
code:	   a mib module for the ucd-snmp snmpd agent. */
code:	
code:	/* This should always be included first before anything else */
code:	#include <config.h>
code:	
code:	/* minimal include directives */
code:	#include \"mibincl.h\"
code:	#include \"header_complex.h\"
code:	#include \"$outputName.h\"
code:	
code:	/* 
code:	 * ${outputName}_variables_oid:
code:	 *   this is the top level oid that we want to register under.  This
code:	 *   is essentially a prefix, with the suffix appearing in the
code:	 *   variable below.
code:	 */
code:	
code:	oid ${outputName}_variables_oid[] = { $commaoid };
code:	
code:	/* 
code:	 * variable$varlen ${outputName}_variables:
code:	 *   this variable defines function callbacks and type return information 
code:	 *   for the $outputName mib section 
code:	 */
code:	
code:	struct variable$varlen ${outputName}_variables[] = {
code:	/*  magic number        , variable type , ro/rw , callback fn  , L, oidsuffix */
code:	$variables{'variable-structure-info'}{'processed'}
code:	};
code:	/*    (L = length of the oidsuffix) */
code:	
code:	/* global storage of our data, saved in and configured by header_complex() */
code:	$variables{'code-structure-storage'}{'processed'}
code:
code:	/*
code:	 * init_$outputName():
code:	 *   Initialization routine.  This is called when the agent starts up.
code:	 *   At a minimum, registration of your variables should take place here.
code:	 */
code:	void init_$outputName(void) {
code:	
code:	  /* register ourselves with the agent to handle our mib tree */
code:	  REGISTER_MIB(\"$outputName\", ${outputName}_variables, variable$varlen,\
code:	               ${outputName}_variables_oid);
code:
code:	  /* register our config handler(s) to deal with registrations */
code:	$variables{'code-parser-registration'}{'processed'}
code:
code:	  /* place any other initialization junk you need here */
code:	}
code:	
code:	$variables{'code-parser'}{'processed'}
code:	
code:	$variables{'code-var_table'}{'processed'}
code:
code:	$variables{'code-write-func'}{'processed'}

############################################################################
# var_ function for tables, which is handled specially and used above
#
#   Note: $vtable is set to the table name in the processtable loop.
############################################################################

#
# header file defs first
#
type:		code-var_table-decl
processtable:	code-var_table-decl

code:	unsigned char *var_$vtable(struct variable *, oid *, int *, int, int *, WriteMethod **write_method);
code:	void parse_$vtable(char *, char *);

#
# .conf Parser Code per table
#
type:		code-parser-registration
processtable:	code-parser-registration
code:	  snmpd_register_config_handler(\"$vtable\", parse_$vtable, NULL,
code:	                                \"HELP STRING\");

type:		code-parser
processtable:	code-parser

code:	/* 
code:	 * ${vtable}_add(): adds a structure node to our data set 
code:	 */
code:	${vtable}_add(struct ${vtable}_data *thedata) {
code:	  struct variable_list *vars = NULL;
code:
code:   /* Example only:  tailor to your index scheme for your table */
code:	/*
code:	  snmp_varlist_add_variable(&vars, NULL, 0, ASN_OCTET_STR,
code:	                            (char *) thedata->owner,
code:	                            strlen(thedata->owner));
code:	  snmp_varlist_add_variable(&vars, NULL, 0, ASN_OCTET_STR,
code:	                            (char *) thedata->scriptname,
code:	                            strlen(thedata->scriptname));
code:	 */
code:
code:	  header_complex_add_data(&${vtable}Storage, vars, thedata);
code:	  DEBUGMSGTL((\"$vtable\",\"registered an entry\\n\"));
code:	
code:	}
code:
code:	/*
code:	 * parse_$vtable():
code:	 *   parses .conf file entries needed to configure the mib.
code:	 */
code:	void
code:	parse_$vtable(char *token, char *line) {
code:	  int tmpint;
code:	  struct ${vtable}_data *StorageTmp = SNMP_MALLOC_STRUCT(${vtable}_data);
code:	  struct variable_list *vars = NULL;
code:
code:	  if (StorageTmp == NULL) {
code:	    config_perror(\"malloc failure\");
code:	    return;
code:	  }
code:
code:	$variables{$vtable}{'code-parser-sections'}{'processed'}
code:
code:	  ${vtable}_add(StorageTmp);
code:	    
code:	}
code:	
code:	
code:	/*
code:	 * store_$vtable():
code:	 *   stores .conf file entries needed to configure the mib.
code:	 */
code:	void
code:	store_$vtable() {
code:	  char line[SNMP_MAXBUF];
code:	  char *cptr;
code:	  int tmpint;
code:	  struct ${vtable}_data *StorageTmp;
code:	  struct header_complex_index *hcindex;
code:	
code:	  memset(line,0,sizeof(line));
code:	
code:	  strcat(line, \"$vtable\");
code:	  cptr = line + strlen(line);
code:
code:	  for(hcindex=${vtable}Storage; hcindex != NULL; 
code:	      hcindex = hcindex->next) {
code:	    StorageTmp = (struct ${vtable}_data *) hcindex->data;
code:
code:	$variables{$vtable}{'code-persistent-sections'}{'processed'}
code:
code:	    snmpd_store_config(line);
code:	  }
code:	}

# individual sections for the parser
type:		code-parser-sections
process:	code-parser-sections

code:	  line = read_config_read_data($variables{$mib->{type}}{asnType}, line, &StorageTmp->$name, &" . evalstr($variables{$mib->{type}}{varlenname}) . ");
code:	" . evalstr($variables{$mib->{type}}{vartest}) . "

#
# .conf persistent save Code per table
#
type:		code-persistent-sections
process:	code-persistent-sections
code:	    cptr = read_config_store_data($variables{$mib->{type}}{asnType}, cptr, &StorageTmp->$name, &" . evalstr($variables{$mib->{type}}{varlenname}) . ");

#
# Code code per table
#
type:		code-var_table
processtable:	code-var_table

code:	/*
code:	 * var_$vtable():
code:	 *   Handle this table separately from the scalar value case.
code:	 *   The workings of this are basically the same as for var_$outputName above.
code:	 */
code:	unsigned char *
code:	var_$vtable(struct variable *vp,
code:	    	    oid     *name,
code:	    	    int     *length,
code:	    	    int     exact,
code:	    	    int     *var_len,
code:	    	    WriteMethod **write_method)
code:	{
code:
code:	struct ${vtable}_data *StorageTmp = NULL;
code:	
code:	  /* 
code:	   * this assumes you have registered all your data properly
cdoe:	   * with header_complex_add() somewhere before this
code:	   */
code:	  if ((StorageTmp =
code:	       header_complex(${vtable}Storage, vp,name,length,exact,
code:	                           var_len,write_method)) == NULL)
code:	    return NULL;
code:	
code:	  /* 
code:	   * this is where we do the value assignments for the mib results.
code:	   */
code:	  switch(vp->magic) {\n\n
code:	$variables{$vtable}{'code-case-statements'}{'processed'}
code:	    default:
code:	      ERROR_MSG(\"\");
code:	  }
code:	  return NULL;
code:	}


############################################################################
# case statement sections
############################################################################
type:		code-case-statements
process:	code-case-statements
skipif:		$mib->{'access'} =~ /NoAccess/

code:		    case $NAME:
code:		        " . (($mib->{'access'} =~ /ReadWrite|WriteOnly|Create/) ? "*write_method = write_$mib->{label};" : "") . "
code:		        *var_len = $variables{$mib->{'type'}}{'sizeofstart'}StorageTmp->$mib->{label}$variables{$mib->{'type'}}{'sizeofend'};
code:		        return (u_char *) $variables{$mib->{'type'}}{'storageret'}StorageTmp->$mib->{label};
code:		

############################################################################
# storage structure information
############################################################################
type:		variable-structure-info
process:	variable-structure-info
skipif:		$mib->{'access'} =~ /NoAccess/
code:		" . sprintf("#define   %-20s  $count", $NAME) . "
code:		" . sprintf("  { %-20s, %-14s, %-6.6s, %s, %d, { %s } },", $NAME, $variables{$mib->{'type'}}{'asnType'}, $accessToUCD{$mib->{'access'}}, "var_$vroutine", $depth-1, $subid) . "

############################################################################
# write function defitition, also appended to the end of the .c file.
############################################################################
#
# Header info: declair write functions for set processing
#
process:	code-write-func-decl
type:		code-write-func-decl
skipif:		$mib->{'access'} !~ /Write|Create/
code:		int write_$name(int, u_char *,u_char, int, u_char *,oid*, int);
#
# C code
#
type:		code-write-func
process:	code-write-func
skipif:		$mib->{'access'} !~ /Write|Create/
code:	int
code:	write_$name(int      action,
code:	            u_char   *var_val,
code:	            u_char   var_val_type,
code:	            int      var_val_len,
code:	            u_char   *statP,
code:	            oid      *name,
code:	            int      name_len)
code:	{
code:	  static $variables{$mib->{'type'}}{tmpvar} tmpvar;
code:	  struct ${vroutine}_data *StorageTmp = NULL;
code:	  static int tmplen;
code:	  int newlen=name_len - (sizeof(${outputName}_variables_oid)/sizeof(oid) + $depth - 1);
code:
code:	  if ((StorageTmp =
code:	       header_complex(${vroutine}Storage, NULL,
code:	                      &name[sizeof(${outputName}_variables_oid)/sizeof(oid) + $depth - 1], 
code:	                      &newlen, 1, NULL, NULL)) == NULL)
code:	      return SNMP_ERR_NOSUCHNAME; /* remove if you support creation here */
code:	
code:	  switch ( action ) {
code:	        case RESERVE1:
code:	          if (var_val_type != $variables{$mib->{'type'}}{asnType}){
code:	              fprintf(stderr, \"write to $name not $variables{$mib->{'type'}}{asnType}\\n\");
code:	              return SNMP_ERR_WRONGTYPE;
code:	          }
code:	          break;
code:	
code:	        case RESERVE2:
code:	             /* memory reseveration, final preparation... */
code:	          break;
code:	
code:	        case FREE:
code:	             /* Release any resources that have been allocated */
code:	          break;
code:	
code:	        case ACTION:
code:	             /* The variable has been stored in $variables{$mib->{'type'}}{variable} for
code:	             you to use, and you have just been asked to do something with
code:	             it.  Note that anything done here must be reversable in the UNDO case */
code:		".evalstr($variables{$mib->{type}}{action})."
code:	          break;
code:	
code:	        case UNDO:
code:	             /* Back out any changes made in the ACTION case */
code:		".evalstr($variables{$mib->{type}}{undo})."
code:	          break;
code:	
code:	        case COMMIT:
code:	             /* Things are working well, so it's now safe to make the change
code:	             permanently.  Make sure that anything done here can't fail! */
code:		".evalstr($variables{$mib->{'type'}}{'commit'})."
code:	          break;
code:	  }
code:	  return SNMP_ERR_NOERROR;
code:	}
code:
code:

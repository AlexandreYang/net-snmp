############################################################  -*- c -*-
###generic include for XXX. Do not use directly.
###
### $Id$
########################################################################
@if $m2c_mark_boundary == 1@
/** START code generated by $RCSfile$ $Revision$ */
@end@
##//####################################################################
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@if $m2c_processing_type eq 'h'@
void
${table}_container_init(netsnmp_container **container,
                        netsnmp_cache **cache);
@end@ // m2c_processing_type eq 'h'
##//####################################################################
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@if $m2c_processing_type eq 'b'@
/**
 * container-cached overview
 *
 */

static void ${context}_cache_item_free(${context}_rowreq_ctx *rowreq_ctx,
                                       void *context);
static int ${context}_cache_load(netsnmp_cache *cache, void *vmagic);
static void ${context}_cache_free(netsnmp_cache *cache, void *magic);

/***********************************************************************
 *
 * cache
 *
 ***********************************************************************/
void
${table}_container_init(netsnmp_container **container,
                        netsnmp_cache **cache)
{
    if((NULL == cache) || (NULL == container)) {
        snmp_log(LOG_ERR,"bad params to ${table}_container_init\n");
        return;
    }
    
    *container = netsnmp_container_find("${table}:table_container");
    if(NULL == *container) {
        snmp_log(LOG_ERR,"error creating container in "
                 "${table}_container_init\n");
        return;
    }
   
@    if 0@
    /*
     * find cache
     */
    *cache =
        netsnmp_cache_find_by_oid(PARTNER_oid, OID_LENGTH(PARTNER_oid));
@    else@
    /*
     * set up the cache
     */
    *cache = netsnmp_cache_create(10, /* timeout in seconds */
                                 ${context}_cache_load,
                                 ${context}_cache_free,
                                 ${context}_oid,
                                 ${context}_oid_size);
@    end@ // shared cache

    if(NULL == *cache) {
        snmp_log(LOG_ERR, "error creating cache for ${context}\n");
        return;
    }
    (*cache)->magic = (void*)*container;

}
    
static int
${context}_cache_load(netsnmp_cache *cache, void *vmagic)
{
    ${context}_rowreq_ctx *rowreq_ctx;
    netsnmp_container *container;

    DEBUGTRACE;

    if((NULL == cache) || (NULL == cache->magic)) {
        snmp_log(LOG_ERR, "invalid cache for ${table}_cache_load\n");
        return -1;
    }
    DEBUGMSGTL(("ifTable/cache", "ifTable_load %p/%p\n",
                cache, cache->magic));

    container = (netsnmp_container*)cache->magic;

    if(cache->valid)
        ${table}_cache_free(cache, NULL);

    /*
     * TODO: update cache
     *
     * allocate, set index, insert into the cache
     */
    while( 0 ) { /* TODO: test condition */
        rowreq_ctx = ${context}_allocate_rowreq_ctx();
        ${context}_indexes_set(rowreq_ctx->tbl_idx
@   foreach $node index@
@      include m2c_setup_node.m2i@
@        if $m2c_node_needlength == 1@
                               , TODO_${node}_ptr, TODO_${node}_len
@        else@
                               , TODO_$node
@        end@
@   end@ # foreach index
            );

        CONTAINER_INSERT(container, rowreq_ctx);
    }

    return 0;
}

/*
 * simple wrapper.
 */
static void
${context}_cache_item_free(${context}_rowreq_ctx *rowreq_ctx, void *context)
{
    if(NULL == rowreq_ctx)
        return;

    ${context}_release_rowreq_ctx(rowreq_ctx);
}

static void
${context}_cache_free(netsnmp_cache *cache, void *magic)
{
    netsnmp_container *container;

    if((NULL == cache) || (NULL == cache->magic)) {
        snmp_log(LOG_ERR, "invalid cache for ifTable\n");
        return;
    }
    DEBUGMSGTL(("ifTable/cache", "ifTable_free %p/%p\n",
                cache, cache->magic));

    container = (netsnmp_container*)cache->magic;

    /*
     * free all items. inefficient, but easy.
     */
    CONTAINER_CLEAR(container,
                    (netsnmp_container_func *)${context}_cache_item_free,
                    NULL);    
}

/**
 * desc
 *
 * Summary
 * -------
 *  This function 
 *
 *
 * More Details
 * ------------
 * @param 
 * @param 
 *
 * @return MFD_SUCCESS     : success.
 *         MFD_ERROR       : other error.
 */

@end@ // m2c_processing_type eq 'b'
########################################################################
##//####################################################################
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@if $m2c_processing_type eq 'i'@
@end@ // m2c_processing_type eq 'i'
##//####################################################################
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@if $m2c_processing_type eq 'i'@
/**
 * @internal
 * initialize the iterator container with functions or wrappers
 */
void
_${table}_container_init(${context}_interface_ctx *if_ctx)
{
    DEBUGTRACE;
    
    ${table}_container_init(&if_ctx->container, &if_ctx->cache);
    if(NULL == if_ctx->container)
        if_ctx->container = netsnmp_container_find("${table}:table_container");
}

@end@ // m2c_processing_type eq 'i'
########################################################################
##//####################################################################
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@if $m2c_processing_type eq 'r'@
##
  container-cached summary
  ------------------------
    The container-cached data access code is for cases when you want to
    cache your data in the agent/sub-agent.

    ... to be continued...
@end@ // m2c_processing_type eq 'i'
########################################################################
##//####################################################################
@if $m2c_mark_boundary == 1@
/** END code generated by $RCSfile$ $Revision$ */
@end@

#############################################################  -*- c -*-
## generic include for XXX. Do not use directly.
##
## $Id$
########################################################################
@if $m2c_mark_boundary == 1@
/** START code generated by $RCSfile$ $Revision$ */
@end@
########################################################################
##
########################################################################
@open ${name}_interface.h@
/*
 * Note: this file originally auto-generated by mib2c using
 *       version $Revision$ of $RCSfile$ 
 */
@eval $m2c_save = "$name"@
@eval $name = "${name}_INTERFACE"
@include generic-header-top.m2i@
@eval $name = $m2c_save@

#include "ppk.h"

/* ********************************************************************
 * Table declarations
 */
@foreach $table table@
@    include m2c_setup_table.m2i@

void initialize_table_$table(void);

@    if $m2c_data_context eq "generated"@
    ${table}_ctx * _${table}_allocate_ctx(netsnmp_mfd_registration *reg);
@        if $m2c_data_allocate == 1@
    ${context}_data *${context}_allocate_data(void);
@        end@

@   end@
int _${context}_get_values($mfd_base_params, ${table}_ctx * ctx);
@   if $m2c_table_writable@
int _${context}_check_objects($mfd_base_params, ${table}_ctx * ctx);
int _${context}_undo_setup($mfd_base_params, ${table}_ctx * ctx);
int _${context}_set_values($mfd_base_params, ${table}_ctx * ctx);
int _${context}_undo_values($mfd_base_params, ${table}_ctx * ctx);
@   end@

@end@ # for each
@eval $m2c_save = "$name"@
@eval $name = "${name}_INTERFACE"
@include generic-header-bottom.m2i@
@eval $name = $m2c_save@
########################################################################
##
@open ${name}_interface.c@
/*
 * Note: this file originally auto-generated by mib2c using
 *       version $Revision$ of $RCSfile$ 
 */
@include generic-source-includes.m2i@

#include "ppk_interface.h"

#include <net-snmp/agent/table_mfd.h>

@foreach $table table@
@   include m2c_setup_table.m2i@
@   include details-table.m2i@
########################################################################
/**
 * Initialize the table $table 
 *    (Define its contents and how it's structured)
 */
void
_${table}_initialize_table(netsnmp_mfd_registration *mfdr)
{
    static oid ${table}_oid[] = { $table.uc_OID };
    netsnmp_handler_registration *my_handler;
    netsnmp_table_registration_info *table_info;
    
    netsnmp_container *container;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    /* create the table registration information structures */
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    if (!table_info) {
        snmp_log(LOG_ERR, "table_info malloc failed in "
                          "initialize_table_$table");
        return; /** Serious error. */
    }

    /* if your table is read only, it's easiest to change the
        HANDLER_CAN_RWRITE definition below to HANDLER_CAN_RONLY */
    my_handler = netsnmp_create_handler_registration("$table",
                                             NULL,
                                             ${table}_oid,
                                             OID_LENGTH(${table}_oid),
                                             HANDLER_CAN_BABY_STEP |
@if $m2c_table_writable == 1@
                                             HANDLER_CAN_RWRITE
@else@
                                             HANDLER_CAN_RONLY
@end@
);
    if (!my_handler) {
        snmp_log(LOG_ERR, "handler registration failed in "
                          "initialize_table_$table");
        return; /** Serious error. */
    }

    /* *************************************************
     * Setting up the table's definition
     */
    netsnmp_table_helper_add_indexes(table_info,
    @foreach $tabledx index@
                                  $tabledx.type, /** index: $tabledx */
    @end@
                             0);

    /*  Define the minimum and maximum accessible columns.  This
        optimizes retrival. */
    table_info->min_column = $table.uc_MIN_COL;
    table_info->max_column = $table.uc_MAX_COL;


    mfdr->cbsm.get_values = (Netsnmp_MFD_Request_Op*)_${table}_get_values;
@   if $m2c_table_writable@
    mfdr->cbsm.object_syntax_checks = (Netsnmp_MFD_Request_Op*)_${table}_check_objects;
    mfdr->cbse.undo_setup = (Netsnmp_MFD_Request_Op*)_${table}_undo_setup;
    mfdr->cbsm.set_values = (Netsnmp_MFD_Request_Op*)_${table}_set_values;
    mfdr->cbse.undo_sets = (Netsnmp_MFD_Request_Op*)_${table}_undo_values;
@   end@ # writable

    /* *************************************************
     * set up container
     */
    container = ${table}_container_init(mfdr);

    /* *************************************************
     * registering the table with the master agent
     */
    DEBUGMSGTL(("$name:init_$table",
                "Registering $table as a mibs-for-dummies table.\n"));		 
    netsnmp_mfd_register_table(my_handler, table_info, container, mfdr);
}

########################################################################
##
@    if $m2c_data_allocate == 1 && $m2c_data_context eq "generated"@
@        include generic-data-allocate.m2i@
@    end@
########################################################################
/* *********************************************************************
 * allocate resources for a ${table}_ctx
 */
${table}_ctx *
_${table}_allocate_ctx(netsnmp_mfd_registration *reg)
{
    ${table}_ctx *ctx = SNMP_MALLOC_TYPEDEF(${table}_ctx);

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    if(NULL == ctx) {
        snmp_log(LOG_ERR,"Couldn't allocate memory for a "
                 "${table}_ctx.\n");
    }
@if $m2c_data_allocate == 1@
    else if (NULL == (ctx->data = ${table}_allocate_data())) {
        SNMP_FREE(ctx);
    }

    /*
     * undo context will be allocated when needed (in *_undo_setup)
     */
@end@
    
    return ctx;
}

/*
 * release resources for a ${table}_ctx
 */
void
_${table}_release_ctx(netsnmp_mfd_registration *reg, ${table}_ctx *ctx)
{
    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

@if $m2c_data_allocate == 1@
    if(ctx->data)
        ${table}_release_data(ctx->data);
 
     if(ctx->undo) 
         ${table}_release_data(ctx->undo);
@end@ 
    SNMP_FREE(ctx);
}

########################################################################
##
/***********************************************************************
 *
 * GET processing
 *
 ***********************************************************************/
/*
 * Retrieve the value for a particular column
 */
NETSNMP_STATIC_INLINE int
_${context}_get_column( ${context}_ctx *ctx,
                       netsnmp_variable_list *var, int column )
{
    int rc = SNMPERR_SUCCESS;
    
    DEBUGMSGT(("${name}:trace",">%s %d\n",__FUNCTION__, column));

    switch(column) {
@   foreach $node index@
@      include m2c_setup_node.m2i@
@      if $node.accessible == 1@

    /* (INDEX) $m2c_node_summary */
    case COLUMN_$node.uc:
    var->type = $node.type;
@         if $m2c_node_needlength == 1@
        if (var->val_len < ctx->tbl_idx.${node}_len) {
           var->val.string = malloc(ctx->tbl_idx.${node}_len);
        }
        var->val_len = ctx->tbl_idx.${node}_len;
        memcpy( var->val.string, ctx->tbl_idx.$node, var->val_len );
@         else@
        (*var->val.integer) = ctx->tbl_idx.$node;
@         end@
        break;
@      end@ ## accessible
@   end@ ## index
@   foreach $node nonindex@
@      include m2c_setup_node.m2i@
@      if $node.accessible == 1@

    /* $m2c_node_summary */
    case COLUMN_$node.uc:
    var->type = $node.type;
        rc = ${node}_get(ctx, $m2c_node_var_val_ptr );
        break;
 @      end@ # accessible
@   end@ # for each column

    }

    return rc;
}

########################################################################
##
int
_${table}_get_values($mfd_base_params, ${table}_ctx * ctx)
{
    netsnmp_table_request_info * tri;
    u_char * old_string;
    void    (*dataFreeHook)(void *);

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    netsnmp_assert(ctx);
    
    for(;requests; requests = requests->next) {
        /*
         * save old pointer, so we can free it if replaced
         */
        old_string = requests->requestvb->val.string;
        dataFreeHook = requests->requestvb->dataFreeHook;
        if(NULL == requests->requestvb->val.string) { /* xxx-rks: move this up to mfd helper? */
            requests->requestvb->val.string = requests->requestvb->buf;
            requests->requestvb->val_len = sizeof(requests->requestvb->buf);
        }

        /*
         * get column data
         */
        tri = netsnmp_extract_table_info(requests);
        if(NULL == tri)
            continue;
        
        _${table}_get_column(ctx, requests->requestvb, tri->colnum);

        /*
         * if the buffer wasn't used previously for the old data (i.e. it
         * was allcoated memory)  and the get routine replaced the pointer,
         * we need to free the previous pointer.
         */
        if((old_string != requests->requestvb->buf) &&
           (requests->requestvb->val.string != old_string)) {
            if(dataFreeHook)
                (*dataFreeHook)(old_string);
            else
                free(old_string);
        }
    } /* for results */

    return SNMP_ERR_NOERROR;
}

########################################################################
##
/***********************************************************************
 *
 * SET processing
 *
 ***********************************************************************/

@if $m2c_table_writable == 0@
/*
 * NOT APPLICABLE (per MIB or user setting)
 */
@else@
/*----------------------------------------------------------------------
 *
 * SET: Syntax checks
 *
 *---------------------------------------------------------------------*/
/*
 * Check the syntax for a particular column
 */
NETSNMP_STATIC_INLINE int
_${context}_check_column( ${context}_ctx *ctx,
                         netsnmp_variable_list *var, int column )
{
    int rc = SNMPERR_SUCCESS;
    
    DEBUGMSGT(("${name}:trace",">%s %d\n",__FUNCTION__, column));

    switch(column) {
@   foreach $node index@
@      include m2c_setup_node.m2i@
@      if $node.settable == 1@

    /* (INDEX) $m2c_node_summary */
    case COLUMN_$node.uc:
        return SNMP_ERR_NOTWRITABLE; /* can not change index of active row */
        break;
@      end@ ## settable
@   end@ ## index
@   foreach $node nonindex@
@      include m2c_setup_node.m2i@
@      if $node.settable == 0@
@          break@
@      end@

    /* $m2c_node_summary */
    case COLUMN_$node.uc:
@      include node-varbind-validate.m2i@
    if(SNMPERR_SUCCESS == rc) {
        rc = ${node}_check_value( ctx, $m2c_node_var_val );
        if(rc)
        rc = SNMP_ERR_BADVALUE;
    }
        break;
@   end@ # for each nonindex

        default: /** We shouldn't get here */
            rc = SNMP_ERR_GENERR;
 snmp_log(LOG_ERR, "unknown column in %s\n", __FUNCTION__);
    }

    return rc;
}

##----------------------------------------------------------------------
int
_${context}_check_objects($mfd_base_params, ${table}_ctx * ctx)
{
    netsnmp_table_request_info * tri;
    int                          rc;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    netsnmp_assert(ctx);
    
    for(;requests; requests = requests->next) {

        /*
         * get column number from table request info, and check that column
         */
        tri = netsnmp_extract_table_info(requests);
        if(NULL == tri)
            continue;

        rc = _${table}_check_column(ctx, requests->requestvb, tri->colnum);
        if(rc) {
            netsnmp_request_set_error(requests, rc);
            break;
        }

    } /* for results */

    return rc;
}

##----------------------------------------------------------------------
/*
 * Check the syntax for a particular column
 */
NETSNMP_STATIC_INLINE int
_${context}_check_index( ${context}_ctx *ctx,
                         netsnmp_variable_list *var, int column )
{
    int rc = SNMPERR_SUCCESS;
    
    DEBUGMSGT(("${name}:trace",">%s %d\n",__FUNCTION__, column));

    switch(column) {
@   foreach $node index@
@      include m2c_setup_node.m2i@

    /* (INDEX) $m2c_node_summary */
    case COLUMN_$node.uc:
@      eval $m2c_nvv_sizeof="ctx->tbl_idx.$node"@
@      include node-varbind-validate.m2i@

       /* call user code */
       if(SNMPERR_SUCCESS == rc) {
          ${node}_check_index( ctx, $m2c_node_var_ref );
       }
        break;
@   end@ # for each nonindex

        default: /** We shouldn't get here */
            rc = SNMP_ERR_GENERR;
 snmp_log(LOG_ERR, "unknown column in %s\n", __FUNCTION__);
    }

    return rc;
}

##----------------------------------------------------------------------
int
_${context}_check_indexes($mfd_base_params, ${table}_ctx * ctx)
{
    netsnmp_table_request_info * tri;
    int                          rc;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    netsnmp_assert(ctx);

    /*
     * xxx-rks: extract indexes from oid and set them in ctx.
     *          or has that already been done??
     */

    
    /*
     * get column number from table request info, and check that column
     */
    for(;requests; requests = requests->next) {

        tri = netsnmp_extract_table_info(requests);
        if(NULL == tri)
            continue;

        rc = _${table}_check_index(ctx, requests->requestvb, tri->colnum);
        if(rc) {
            netsnmp_request_set_error(requests, rc);
            break;
        }

    } /* for requests */

    /*
     * if individual parts look ok, check them as a whole
     */
    if(!rc)
        rc = ${context}_validate_index( mfdr, ctx );
    
    return rc;
}

/*----------------------------------------------------------------------
 *
 * SET: Set values
 *
 *---------------------------------------------------------------------*/
/*
 * Set the value for a particular column
 */
NETSNMP_STATIC_INLINE int
_${context}_set_column( ${context}_ctx *ctx,
                       netsnmp_variable_list *var, int column )
{
    int rc = SNMPERR_SUCCESS;
    
    DEBUGMSGT(("${name}:trace",">%s %d\n",__FUNCTION__, column));

    switch(column) {
@   foreach $node nonindex@
@      include m2c_setup_node.m2i@
@      if $node.settable == 1@

    /* $m2c_node_summary */
    case COLUMN_$node.uc:
        rc = ${node}_set(ctx, $m2c_node_var_val );
        break;
 @      end@ # settable
@   end@ # for each column

    }

    return rc;
}

########################################################################
##
int
_${table}_set_values($mfd_base_params, ${table}_ctx * ctx)
{
    netsnmp_table_request_info * tri;
    int                          rc = SNMP_ERR_NOERROR;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    netsnmp_assert(ctx);
    
    for(;requests; requests = requests->next) {
        /*
         * set column data
         */
        tri = netsnmp_extract_table_info(requests);
        if(NULL == tri)
            continue;
        
        _${table}_set_column(ctx, requests->requestvb, tri->colnum);

    } /* for results */

    return SNMP_ERR_NOERROR;
}

/*----------------------------------------------------------------------
 *
 * SET: Undo setup
 *
 *---------------------------------------------------------------------*/
@if $m2c_data_context eq "generated"@
/**
 * @internal
 * Setup up context with information needed to undo a set request.
 */
NETSNMP_STATIC_INLINE int
${context}_undo_setup( ${context}_ctx *ctx )
{
    int rc;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != ctx );

    /*
     * copy data to undo
     */
@if $m2c_data_context ne "generated"@
$example_start
@end@
@    foreach $node nonindex@
@        include m2c_setup_node.m2i@
@        eval $m2c_ctx_lh = "$m2c_undo_item"@
@        eval $m2c_ctx_rh = "$m2c_data_item"@
@        include generic-ctx-copy.m2i@
@    end@ # foreach nonindex
@if $m2c_data_context ne "generated"@
$example_end
@end@

    return SNMP_ERR_NOERROR;
}

@end@
##----------------------------------------------------------------------
/**
 * @internal
 * undo the value for a particular column
 */
int
_${context}_undo_setup($mfd_base_params, ${table}_ctx * ctx)
{
@if $m2c_data_allocate == 1@
    /*
     * allocate context, if needed
     */
    ctx->undo = ${context}_allocate_data();
    if(NULL == ctx->data) {
        /** msg already logged */
        return SNMP_ERR_RESOURCEUNAVAILABLE;
    }

@end@
    return ${context}_undo_setup(ctx);
}

/*----------------------------------------------------------------------
 *
 * SET: reversible commit
 *
 *---------------------------------------------------------------------*/
/**
 * @internal
 * no interface code, call user code directly
 */

/*----------------------------------------------------------------------
 *
 * SET: Undo
 *
 *---------------------------------------------------------------------*/
/**
 * @internal
 * undo the value for a particular column
 */
NETSNMP_STATIC_INLINE int
_${context}_undo_column( ${context}_ctx *ctx,
                       netsnmp_variable_list *var, int column )
{
    int rc = SNMPERR_SUCCESS;
    
    DEBUGMSGT(("${name}:trace",">%s %d\n",__FUNCTION__, column));

    switch(column) {
@   foreach $node nonindex@
@      include m2c_setup_node.m2i@
@      if $node.settable == 1@

    /* $m2c_node_summary */
    case COLUMN_$node.uc:
        rc = ${node}_undo(ctx);
        break;
 @      end@ # settable
@   end@ # for each column

    }

    return rc;
}

########################################################################
##
int
_${table}_undo_values($mfd_base_params, ${table}_ctx * ctx)
{
    netsnmp_table_request_info * tri;
    int                          rc = SNMP_ERR_NOERROR;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    netsnmp_assert(ctx);
    
    for(;requests; requests = requests->next) {
        /*
         * set column data
         */
        tri = netsnmp_extract_table_info(requests);
        if(NULL == tri)
            continue;
        
        _${table}_undo_column(ctx, requests->requestvb, tri->colnum);

    } /* for results */

    return SNMP_ERR_NOERROR;
}

/*----------------------------------------------------------------------
 *
 * SET: final commit
 *
 *---------------------------------------------------------------------*/
/*
* no interface code, call user code directly
*/

@end@ # settable
/***********************************************************************
 *
 * DATA ACCESS
 *
 ***********************************************************************/
@    include mfd-access-${m2c_table_access}-interface.m2i@
@end@ # foreach table
##
########################################################################
@if $m2c_mark_boundary == 1@
/** END code generated by $RCSfile$ $Revision$ */
@end@

#############################################################  -*- c -*-
## generic include for XXX. Do not use directly.
##
## $Id$
########################################################################
@if $m2c_mark_boundary == 1@
/** START code generated by $RCSfile$ $Revision$ */
@end@
########################################################################
##
########################################################################
@open ${name}_interface.h@
/*
 * Note: this file originally auto-generated by mib2c using
 *       version $Revision$ of $RCSfile$
 */
@include m2c-internal-warning.m2i@
##
@eval $m2c_save = "$name"@
@eval $name = "${name}_INTERFACE"
@include generic-header-top.m2i@
@eval $name = $m2c_save@

#include "${name}.h"

/* ********************************************************************
 * Table declarations
 */
@foreach $table table@
@    include m2c_setup_table.m2i@

/* PUBLIC interface initialization routine */
void _${table}_initialize_interface(${context}_registration_ptr user_ctx,
                                    u_long flags);

${table}_ctx * ${table}_allocate_ctx(void);
void ${table}_release_ctx(${table}_ctx *ctx);
@    if ("$m2c_data_context" eq "generated") && ($m2c_data_allocate == 1)@
static ${context}_data *${context}_allocate_data(void);

@   end@

@end@ # for each
@eval $m2c_save = "$name"@
@eval $name = "${name}_INTERFACE"
@include generic-header-bottom.m2i@
@eval $name = $m2c_save@
########################################################################
##
@open ${name}_interface.c@
/*
 * Note: this file originally auto-generated by mib2c using
 *       version $Revision$ of $RCSfile$ 
 */
@include m2c-internal-warning.m2i@

@include generic-source-includes.m2i@

#include <net-snmp/agent/table_mfd.h>
#include <net-snmp/library/container.h>

#include "${name}_interface.h"

@foreach $table table@
@   include m2c_setup_table.m2i@
@   include details-table.m2i@
########################################################################
typedef struct ${context}_interface_ctx_s {

   netsnmp_container              *container;

   ${context}_registration_ptr      user_ctx;
   
   netsnmp_table_registration_info  tbl_inf;
   
} ${context}_interface_ctx;

static ${context}_interface_ctx ${context}_if_ctx;

NETSNMP_STATIC_INLINE netsnmp_container * _${table}_container_init(
    ${context}_interface_ctx *if_ctx);


NETSNMP_STATIC_INLINE int _mfd_${table}_pre_request( ${context}_interface_ctx *if_ctx,
                       netsnmp_data_list *data_list, u_long id);
NETSNMP_STATIC_INLINE int _mfd_${table}_post_request( ${context}_interface_ctx *if_ctx,
                       netsnmp_data_list *data_list, u_long id);
NETSNMP_STATIC_INLINE int _mfd_${context}_object_lookup($mfd_base_params, ${table}_ctx * ctx);
NETSNMP_STATIC_INLINE int _mfd_${context}_get_values($mfd_base_params, ${table}_ctx * ctx);
@   if $m2c_table_settable@
NETSNMP_STATIC_INLINE int _mfd_${context}_check_objects($mfd_base_params, ${table}_ctx * ctx);
NETSNMP_STATIC_INLINE int _mfd_${context}_undo_setup($mfd_base_params, ${table}_ctx * ctx);
NETSNMP_STATIC_INLINE int _mfd_${context}_set_values($mfd_base_params, ${table}_ctx * ctx);
NETSNMP_STATIC_INLINE int _mfd_${context}_undo_values($mfd_base_params, ${table}_ctx * ctx);
NETSNMP_STATIC_INLINE int _mfd_${context}_commit($mfd_base_params, ${table}_ctx * ctx);
@      if $m2c_irreversible_commit == 1@
NETSNMP_STATIC_INLINE int _mfd_${context}_irreversible_commit($mfd_base_params, ${table}_ctx * ctx);
@      end@
@      if $m2c_table_dependencies == 1@
NETSNMP_STATIC_INLINE int _mfd_${context}_check_dependencies($mfd_base_params, ${table}_ctx * ctx);
@      end@

NETSNMP_STATIC_INLINE int _${context}_undo_column( ${context}_ctx *ctx,
                                                   netsnmp_variable_list *var, int column );
@if $m2c_table_row_creation == 1@
NETSNMP_STATIC_INLINE int _${context}_check_indexes(${table}_ctx * ctx);
@end@

@   end@ # writable

/**
 * Initialize the table $table 
 *    (Define its contents and how it's structured)
 */
void
_${table}_initialize_interface(${context}_registration_ptr reg_ptr,  u_long flags)
{
    static oid ${table}_oid[] = { $table.uc_OID };
    netsnmp_mfd_registration *mfd_reg;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));


    /*************************************************
     *
     * save interface context for ${context}
     */
    /*
     * Setting up the table's definition
     */
    netsnmp_table_helper_add_indexes(&${context}_if_ctx.tbl_inf,
    @foreach $tabledx index@
                                  $tabledx.type, /** index: $tabledx */
    @end@
                             0);

    /*  Define the minimum and maximum accessible columns.  This
        optimizes retrival. */
    ${context}_if_ctx.tbl_inf.min_column = $table.uc_MIN_COL;
    ${context}_if_ctx.tbl_inf.max_column = $table.uc_MAX_COL;


    /*
     * save users context
     */
    ${context}_if_ctx.user_ctx = reg_ptr;

    /*
     * set up the container
     */
    ${context}_if_ctx.container =
                  _${table}_container_init(&${context}_if_ctx);

    /*************************************************
     *
     * Create registration
     */
    mfd_reg = SNMP_MALLOC_TYPEDEF(netsnmp_mfd_registration);
    if (!mfd_reg) {
        snmp_log(LOG_ERR, "malloc failed in %s\n", __FUNCTION__);
        return; /** Serious error. */
    }
    
    /*
     * save our context
     */
    mfd_reg->mfd_user_ctx = (void*)&${context}_if_ctx;

    /*
     * No flags yet, but in the future thie is where to
     * validate and save flags
     */
    mfd_reg->mfd_flags = flags;
    
    /*
     * set up the container
     */
    mfd_reg->container = ${context}_if_ctx.container;
    mfd_reg->table_info = &${context}_if_ctx.tbl_inf;

    /*
     * OPTIONAL pre/post request handlers
     */
    mfd_reg->pre_request = (Netsnmp_MFD_Organize_Op*)_mfd_${table}_pre_request;
    mfd_reg->post_request = (Netsnmp_MFD_Organize_Op*)_mfd_${table}_post_request;

    /*
     * REQUIRED wrapper for get request handling
     */
    mfd_reg->object_lookup = (Netsnmp_MFD_Request_Op*)_mfd_${table}_object_lookup;
    mfd_reg->get_values = (Netsnmp_MFD_Request_Op*)_mfd_${table}_get_values;
##
@   if $m2c_table_settable@

    /*
     * REQUIRED wrappers for set request handling
     */
    mfd_reg->object_syntax_checks = (Netsnmp_MFD_Request_Op*)_mfd_${table}_check_objects;
    mfd_reg->undo_setup = (Netsnmp_MFD_Request_Op*)_mfd_${table}_undo_setup;
    mfd_reg->set_values = (Netsnmp_MFD_Request_Op*)_mfd_${table}_set_values;
    mfd_reg->undo_sets = (Netsnmp_MFD_Request_Op*)_mfd_${table}_undo_values;

    /*
     * no wrappers yet
     */
    mfd_reg->commit = (Netsnmp_MFD_Request_Op*)_mfd_${table}_commit;
@   if $m2c_irreversible_commit == 1@
    mfd_reg->irreversible_commit = (Netsnmp_MFD_Request_Op*)_mfd_${table}_irreversible_commit;
@   end@
##
@      if $m2c_table_dependencies == 1@
    
    /*
     * REQUIRED for tables with dependencies
     */
    mfd_reg->consistency_checks = (Netsnmp_MFD_Request_Op*)_mfd_${table}_check_dependencies;
@      end@
@   end@ # writable

    /* *************************************************
     * registering the table with the master agent
     */
    DEBUGMSGTL(("$name:init_$table",
                "Registering $table as a mibs-for-dummies table.\n"));		 
          
    /* if your table is read only, it's easiest to change the
        HANDLER_CAN_RWRITE definition below to HANDLER_CAN_RONLY */
    netsnmp_mfd_register_table(mfd_reg, "$table", NULL,
                               ${table}_oid, OID_LENGTH(${table}_oid),
                               HANDLER_CAN_BABY_STEP |
@if $m2c_table_settable == 1@
                               HANDLER_CAN_RWRITE
@else@
                               HANDLER_CAN_RONLY
@end@
        );
}

@include generic-table-indexes-to-oid.m2i@
@include generic-table-indexes-from-oid.m2i@

########################################################################
##
@    if $m2c_data_allocate == 1 && $m2c_data_context eq "generated"@
@        include generic-data-allocate.m2i@
@    end@
########################################################################
/* *********************************************************************
 * allocate resources for a ${table}_ctx
 */
${table}_ctx *
${table}_allocate_ctx(void)
{
    ${table}_ctx *ctx = SNMP_MALLOC_TYPEDEF(${table}_ctx);

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    if(NULL == ctx) {
        snmp_log(LOG_ERR,"Couldn't allocate memory for a "
                 "${table}_ctx.\n");
    }
@if $m2c_data_allocate == 1@
    else if (NULL == (ctx->data = ${table}_allocate_data())) {
        SNMP_FREE(ctx);
    }

    /*
     * undo context will be allocated when needed (in *_undo_setup)
     */
@end@

    ctx->oid_idx.oids = ctx->oid_tmp;

    ctx->request_mode = 0;
ctx->${context}_data_list = NULL;
ctx->${context}_reg = ${context}_if_ctx.user_ctx;

@if $m2c_data_init == 1@
    if(SNMPERR_SUCCESS != ${context}_ctx_init(ctx)) {
       ${table}_release_ctx(if_ctx, ctx);
       ctx = NULL;
    }
@end@

    return ctx;
}

/*
 * release resources for a ${table}_ctx
 */
void
${table}_release_ctx(${table}_ctx *ctx)
{
    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    netsnmp_assert(NULL != ctx);
    
@if $m2c_data_init == 1@
    ${context}_ctx_cleanupx(ctx);
@end@

@if $m2c_data_allocate == 1@
    if(ctx->data)
        ${table}_release_data(ctx->data);
 
     if(ctx->undo) 
         ${table}_release_data(ctx->undo);
@end@ 

    /*
     * free index oid pointer
     */
    if(ctx->oid_idx.oids != ctx->oid_tmp)
        free(ctx->oid_idx.oids);

    SNMP_FREE(ctx);
}

########################################################################
##
/**
 * @internal
 * wrapper
 */
static int
_mfd_${table}_pre_request( ${context}_interface_ctx *if_ctx,
                       netsnmp_data_list *data_list, u_long id)
{
   DEBUGMSGT(("mfd:table:trace:${name}", ">%s\n", __FUNCTION__));

    netsnmp_assert(NULL != if_ctx);
    
   return ${table}_pre_request(if_ctx->user_ctx, data_list, id);
}

/**
 * @internal
 * wrapper
 */
static int
_mfd_${table}_post_request( ${context}_interface_ctx *if_ctx,
                        netsnmp_data_list *data_list, u_long id)
{
   DEBUGMSGT(("mfd:table:trace:${name}", ">%s\n", __FUNCTION__));

    netsnmp_assert(NULL != if_ctx);
    
    return ${table}_post_request(if_ctx->user_ctx, data_list, id);
}

/**
 * @internal
 * wrapper
 */
static int
_mfd_${context}_object_lookup( $mfd_base_params, ${table}_ctx * ctx)
{
    int rc = MFD_SUCCESS;
    
    /*
     * get our context from mfd
     */
    ${context}_interface_ctx *if_ctx =
                  (${context}_interface_ctx *)pdu_ctx->mfd_user_ctx;

    if(NULL == ctx) {
@   if $m2c_table_row_creation == 1@
        /*
         * xxx-rks:
         *   check indexes vs check syntax?
         *   row creation flag check?
         *   create temporary context?
         */
        rc = _${context}_check_indexes(ctx);
@   else@
        rc = MFD_ERROR;
@   end@
        if(rc) {
            netsnmp_request_set_error_all(requests, rc);
        }

    }
    else {
        netsnmp_table_request_info * tri;

        /*
         * set indexes
         */
        for(;requests; requests = requests->next) {
            tri = netsnmp_extract_table_info(requests);
            if(NULL == tri)
                continue;
            /*
             * xxx-rks: this is silly. we set the vb in index2oid to set oid,
             * to set the vb here, which is used to set the vb oid. sheesh.
             */
            if(ctx->oid_idx.len > (sizeof(tri->index_oid) / sizeof(oid))) {
                snmp_log(LOG_ERR,"truncated oid length\n");
                ctx->oid_idx.len = sizeof(tri->index_oid) / sizeof(oid);
            }
            memcpy(tri->index_oid, ctx->oid_idx.oids,
                   ctx->oid_idx.len * sizeof(oid));
            tri->index_oid_len = ctx->oid_idx.len;
            netsnmp_update_variable_list_from_index(tri);
            netsnmp_assert(requests->subtree && requests->subtree->reginfo);
            netsnmp_table_build_oid(requests->subtree->reginfo, requests, tri);

        }
        
        /*
         * set up registration pointer for user
         */
        ctx->${context}_reg = if_ctx->user_ctx;

        /*
         * save mode
         */
        ctx->request_mode = pdu_ctx->request_mode;

        /*
         * set up data list for user
         */
        ctx->${context}_data_list = pdu_ctx->mfd_data_list;

    }

    return rc;
}

########################################################################
##
/***********************************************************************
 *
 * GET processing
 *
 ***********************************************************************/
/*
 * Retrieve the value for a particular column
 */
NETSNMP_STATIC_INLINE int
_${context}_get_column( ${context}_ctx *ctx,
                       netsnmp_variable_list *var, int column )
{
    int rc = SNMPERR_SUCCESS;
    
    DEBUGMSGT(("${name}:trace",">%s column %d\n",__FUNCTION__, column));

    netsnmp_assert(NULL != ctx);

    switch(column) {
@   foreach $node internalindex@
@      include m2c_setup_node.m2i@
@      if $node.accessible == 1@

    /* (INDEX) $m2c_node_summary */
    case COLUMN_$node.uc:
    var->type = $node.type;
@         if $m2c_node_needlength == 1@
        if (var->val_len < ctx->tbl_idx.${node}_len) {
           var->val.string = malloc(ctx->tbl_idx.${node}_len);
        }
        var->val_len = ctx->tbl_idx.${node}_len;
        memcpy( var->val.string, ctx->tbl_idx.$node, var->val_len );
@         else@
        (*var->val.integer) = ctx->tbl_idx.$node;
@         end@
        break;
@      end@ ## accessible
@   end@ ## index
@   foreach $node nonindex@
@      include m2c_setup_node.m2i@
@      if $node.accessible == 1@

    /* $m2c_node_summary */
    case COLUMN_$node.uc:
    var->type = $node.type;
rc = ${node}_get(ctx, $m2c_node_var_ref );
        break;
 @      end@ # accessible
@   end@ # for each column

    }

    return rc;
}

########################################################################
##
int
_mfd_${table}_get_values($mfd_base_params, ${table}_ctx * ctx)
{
    netsnmp_table_request_info * tri;
    u_char                     * old_string;
    void                      (*dataFreeHook)(void *);
    int                        rc;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    netsnmp_assert(NULL != ctx);
    
    for(;requests; requests = requests->next) {
        /*
         * save old pointer, so we can free it if replaced
         */
        old_string = requests->requestvb->val.string;
        dataFreeHook = requests->requestvb->dataFreeHook;
        if(NULL == requests->requestvb->val.string) { /* xxx-rks: move this up to mfd helper? */
            requests->requestvb->val.string = requests->requestvb->buf;
            requests->requestvb->val_len = sizeof(requests->requestvb->buf);
        }

        /*
         * get column data
         */
        tri = netsnmp_extract_table_info(requests);
        if(NULL == tri)
            continue;
        
        rc = _${table}_get_column(ctx, requests->requestvb, tri->colnum);
        if(rc) {
            if(MFD_SKIP == rc) {
                requests->requestvb->type = ASN_PRIV_RETRY;
                rc = SNMP_ERR_NOERROR;
            }
        }
        else if (NULL == requests->requestvb->val.string) {
            snmp_log(LOG_ERR,"NULL varbind data pointer!\n");
            rc = SNMP_ERR_GENERR;
        }
        if(rc)
            netsnmp_request_set_error(requests, rc);

        /*
         * if the buffer wasn't used previously for the old data (i.e. it
         * was allcoated memory)  and the get routine replaced the pointer,
         * we need to free the previous pointer.
         */
        if(old_string && (old_string != requests->requestvb->buf) &&
           (requests->requestvb->val.string != old_string)) {
            if(dataFreeHook)
                (*dataFreeHook)(old_string);
            else
                free(old_string);
        }
    } /* for results */

    return SNMP_ERR_NOERROR;
}

########################################################################
##
/***********************************************************************
 *
 * SET processing
 *
 ***********************************************************************/

@if $m2c_table_settable == 0@
/*
 * NOT APPLICABLE (per MIB or user setting)
 */
@else@
/*----------------------------------------------------------------------
 *
 * SET: Syntax checks
 *
 *---------------------------------------------------------------------*/
/*
 * Check the syntax for a particular column
 */
NETSNMP_STATIC_INLINE int
_${context}_check_column( ${context}_ctx *ctx,
                         netsnmp_variable_list *var, int column )
{
    int rc = SNMPERR_SUCCESS;
    
    DEBUGMSGT(("${name}:trace",">%s %d\n",__FUNCTION__, column));

    netsnmp_assert(NULL != ctx);

    switch(column) {
@   foreach $node internalindex@
@      include m2c_setup_node.m2i@
@      if $node.settable == 1@

    /* (INDEX) $m2c_node_summary */
    case COLUMN_$node.uc:
        return SNMP_ERR_NOTWRITABLE; /* can not change index of active row */
        break;
@      end@ ## settable
@   end@ ## index
@   foreach $node nonindex@
@      include m2c_setup_node.m2i@
@      if $node.settable == 0@
@          break@
@      end@

    /* $m2c_node_summary */
    case COLUMN_$node.uc:
@      include node-varbind-validate.m2i@
    if(SNMPERR_SUCCESS == rc) {
        rc = ${node}_check_value( ctx, $m2c_node_var_val );
        if(rc)
        rc = SNMP_ERR_BADVALUE;
    }
        break;
@   end@ # for each nonindex

        default: /** We shouldn't get here */
            rc = SNMP_ERR_GENERR;
 snmp_log(LOG_ERR, "unknown column in %s\n", __FUNCTION__);
    }

    return rc;
}

##----------------------------------------------------------------------
int
_mfd_${context}_check_objects($mfd_base_params, ${table}_ctx * ctx)
{
    netsnmp_table_request_info * tri;
    int                          rc;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    netsnmp_assert(NULL != ctx);
    
    for(;requests; requests = requests->next) {

        /*
         * get column number from table request info, and check that column
         */
        tri = netsnmp_extract_table_info(requests);
        if(NULL == tri)
            continue;

        rc = _${table}_check_column(ctx, requests->requestvb, tri->colnum);
        if(rc) {
            netsnmp_request_set_error(requests, rc);
            break;
        }

    } /* for results */

    return rc;
}

##----------------------------------------------------------------------
@if $m2c_table_row_creation == 1@
NETSNMP_STATIC_INLINE int
_${context}_check_indexes(${table}_ctx * ctx)
{
    netsnmp_table_request_info * tri;
    int                          rc;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    netsnmp_assert(NULL != ctx);

    /*
     * xxx-rks: extract indexes from oid and set them in ctx.
     *          or has that already been done??
     */

##
@if $m2c_table_external_indexes != 0@
    /*
     * check that the corresponding row exists
     */
@   foreach $node externalindex@
@      include m2c_setup_node.m2i@

    /* (INDEX) $m2c_node_summary */
    rc = ${table}_${node}_check_index( ctx );
    if(SNMPERR_SUCCESS != rc)
        return rc;
@   end@ # for each nonindex

@end@ # external index
@   foreach $node internalindex@
@      include m2c_setup_node.m2i@

    /* (INDEX) $m2c_node_summary */
        rc = ${node}_check_index( ctx );
       if(SNMPERR_SUCCESS != rc)
           return rc;
@   end@ # for each internalindex

    /*
     * if individual parts look ok, check them as a whole
     */
    if(!rc)
        rc = ${context}_validate_index( ctx->${context}_reg, ctx );
    
    return rc;
}
@end@ # $m2c_table_row_creation


@      if $m2c_table_dependencies == 1@
/*----------------------------------------------------------------------
 *
 * SET: check dependencies
 *
 *---------------------------------------------------------------------*/
/*
 * Set the value for a particular column
 */
NETSNMP_STATIC_INLINE int
_mfd_${context}_check_dependencies($mfd_base_params, ${table}_ctx * ctx)
{
    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    netsnmp_assert(NULL != ctx);

    return ${context}_check_dependencies(ctx);
}

@end@ dependencies
/*----------------------------------------------------------------------
 *
 * SET: Undo setup
 *
 *---------------------------------------------------------------------*/
@if "$m2c_data_context" eq "generated"@
/**
 * @internal
 * Setup up context with information needed to undo a set request.
 */
NETSNMP_STATIC_INLINE int
${context}_undo_setup( ${context}_ctx *ctx )
{
    int rc;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != ctx );

    /*
     * copy data to undo
     */
@if "$m2c_data_context" ne "generated"@
$example_start
@end@
@    foreach $node nonindex@
@        include m2c_setup_node.m2i@
@        eval $m2c_ctx_lh = "$m2c_undo_item"@
@        eval $m2c_ctx_rh = "$m2c_data_item"@
@        include generic-ctx-copy.m2i@
@    end@ # foreach nonindex
@if "$m2c_data_context" ne "generated"@
$example_end
@end@

    return SNMP_ERR_NOERROR;
}

@end@
##----------------------------------------------------------------------
/**
 * @internal
 * undo the value for a particular column
 */
int
_mfd_${context}_undo_setup($mfd_base_params, ${table}_ctx * ctx)
{
    netsnmp_assert(NULL != ctx);
@if $m2c_data_allocate == 1@
    /*
     * allocate context, if needed
     */
    ctx->undo = ${context}_allocate_data();
    if(NULL == ctx->data) {
        /** msg already logged */
        return SNMP_ERR_RESOURCEUNAVAILABLE;
    }

@end@
    return ${context}_undo_setup(ctx);
}

/*----------------------------------------------------------------------
 *
 * SET: Set values
 *
 *---------------------------------------------------------------------*/
/*
 * Set the value for a particular column
 */
NETSNMP_STATIC_INLINE int
_${context}_set_column( ${context}_ctx *ctx,
                       netsnmp_variable_list *var, int column )
{
    int rc = SNMPERR_SUCCESS;
    
    DEBUGMSGT(("${name}:trace",">%s %d\n",__FUNCTION__, column));

    netsnmp_assert(NULL != ctx);

    switch(column) {
@   foreach $node nonindex@
@      include m2c_setup_node.m2i@
@      if $node.settable == 1@

    /* $m2c_node_summary */
    case COLUMN_$node.uc:
        rc = ${node}_set(ctx, $m2c_node_var_val );
        break;
 @      end@ # settable
@   end@ # for each column

    }

    return rc;
}

########################################################################
##
int
_mfd_${table}_set_values($mfd_base_params, ${table}_ctx * ctx)
{
    netsnmp_table_request_info * tri;
    int                          rc = SNMP_ERR_NOERROR;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    netsnmp_assert(NULL != ctx);
    
    for(;requests; requests = requests->next) {
        /*
         * set column data
         */
        tri = netsnmp_extract_table_info(requests);
        if(NULL == tri)
            continue;
        
        _${table}_set_column(ctx, requests->requestvb, tri->colnum);

    } /* for results */

    return SNMP_ERR_NOERROR;
}

/*----------------------------------------------------------------------
 *
 * SET: commit
 *
 *---------------------------------------------------------------------*/
/**
 * @internal
 * commit the value for a particular column
 */
int
_mfd_${context}_commit($mfd_base_params, ${table}_ctx * ctx)
{
    netsnmp_assert(NULL != ctx);
    return ${context}_commit(ctx);
}

/*----------------------------------------------------------------------
 *
 * SET: Undo
 *
 *---------------------------------------------------------------------*/
/**
 * @internal
 * undo the value for a particular column
 */
NETSNMP_STATIC_INLINE int
_${context}_undo_column( ${context}_ctx *ctx,
                       netsnmp_variable_list *var, int column )
{
    int rc = SNMPERR_SUCCESS;
    
    DEBUGMSGT(("${name}:trace",">%s %d\n",__FUNCTION__, column));

    netsnmp_assert(NULL != ctx);

    switch(column) {
@   foreach $node nonindex@
@      include m2c_setup_node.m2i@
@      if $node.settable == 1@

    /* $m2c_node_summary */
    case COLUMN_$node.uc:
        rc = ${node}_undo(ctx);
        break;
 @      end@ # settable
@   end@ # for each column

    }

    return rc;
}

########################################################################
##
int
_mfd_${context}_undo_values($mfd_base_params, ${table}_ctx * ctx)
{
    netsnmp_table_request_info * tri;
    int                          rc = SNMP_ERR_NOERROR;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    netsnmp_assert(NULL != ctx);
    
    for(;requests; requests = requests->next) {
        /*
         * set column data
         */
        tri = netsnmp_extract_table_info(requests);
        if(NULL == tri)
            continue;
        
        _${context}_undo_column(ctx, requests->requestvb, tri->colnum);

    } /* for results */

    return SNMP_ERR_NOERROR;
}

@   if $m2c_irreversible_commit == 1@
/*----------------------------------------------------------------------
 *
 * SET: irreversible commit
 *
 *---------------------------------------------------------------------*/
/**
 * @internal
 * commit irreversible actions
 */
int
_mfd_${context}_irreversible_commit($mfd_base_params, ${table}_ctx * ctx)
{
    netsnmp_assert(NULL != ctx);
    return ${context}_irreversible_commit(ctx);
}

@end@
@end@ # settable
/***********************************************************************
 *
 * DATA ACCESS
 *
 ***********************************************************************/
@    include mfd-access-${m2c_table_access}-interface.m2i@
@end@ # foreach table
##
########################################################################
@if $m2c_mark_boundary == 1@
/** END code generated by $RCSfile$ $Revision$ */
@end@

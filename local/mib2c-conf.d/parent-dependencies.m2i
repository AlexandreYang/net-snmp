#############################################################  -*- c -*-
## generic include for XXX. Do not use directly.
##
## $Id$
########################################################################
@if $m2c_mark_boundary == 1@
/** START code generated by $RCSfile$ $Revision$ */
@end@ # ;
########################################################################
##
/**
 * check dependencies
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the FLAG_* bits can be found in
@if $m2c_create_fewer_files != 1@
 * ${context}_oids.h.
@else@
 * ${context}.h.
@end@
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @retval MFD_SUCCESS all the changes to the row are legal
 * @retval MFD_ERROR   one or more changes are not legal
 *
 * (see README-table-${table} if you don't have dependencies)
 */
int
${context}_check_dependencies(${context}_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;
    
    DEBUGMSGTL(("internal:${context}:${context}_check_dependencies","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:
     * check that all new value are legal.
     *
     * This is useful for for tables which have dependencies
     * between columns (or rows, or tables).
     *
     * For example, two columns allocating a percentage of something
     * should add up to 100%.
     */
## }
@foreach $node nonindex@
@   ifconf syntax-$node.syntax-dependencies.m2i@
@      include syntax-$node.syntax-dependencies.m2i@
    if ( MFD_SUCCESS != rc )
        return rc;

@   end@
@end@ # for each
## {
    return rc;
}

##
########################################################################
@if $m2c_mark_boundary == 1@
/** END code generated by $RCSfile$ $Revision$ */
@end@

@define DO_DESCR@
<td>
@eval $x = "$i.description"@
@startperl@
  my ($s) = ($vars{'x'} =~ /\n(\s+)/);
  $vars{'x'} =~ s/^$s//gm;
  0;
@endperl@
@if "$i.perltype" ne "$i.syntax"@
<p>
@eval $tmpsyn = "$i.syntax"@
@perleval if (!defined($TCS{$vars{'tmpsyn'}})) { $TCS{$vars{'tmpsyn'}} = $vars{'i'}; }; 0;@
Note: this object is based on the <a href="#$i.syntax"> $i.syntax TEXTUAL-CONVENTION</a>.
</p>
@end@
<pre>
$x
</pre>
</td>
@enddefine@
@define NODE_INFO@
  <td>$i</td><td>
  $i.perltype

  @if "$i.perltype" ne "$i.syntax"@
 <br>
 @eval $tmpsyn = "$i.syntax"@
 @perleval if (!defined($TCS{$vars{'tmpsyn'}})) { $TCS{$vars{'tmpsyn'}} = $vars{'i'}; }; 0;@
 <a href="#$i.syntax">$i.syntax</a>
    @if $i.enums@
     <br>(ENUM list below)
    @end@
  @else@
    @if $i.enums@
      <table border=2 bgcolor="#cccccc">
      <tr><th>Value</th><th>Label/Meaning</th></tr>
      @foreach $e $v enum@
        <tr><td>$v</td><td>$e</td></tr>
      @end@
      </table>
    @end@
  @end@

  </td><td>$i.access</td>
  @if !"$dont_do_oids"@
    <td>$i.objectID</td>
  @end@
  @calldefine DO_DESCR@
@enddefine@
@open ${name}.html@
<head>
  <title>MIB information for $name</title>
</head>
<body bgcolor="#ffffff">
<h2>INTRODUCTION</h2>
<ul>
<p>
This is a summary of information regarding objects below the <b>$name</b>
MIB object, which is defined within the <b>$name.module</b> MIB
document as <b>$name.objectID</b>.
</p>
</ul>
<h2>SCALAR OBJECTS</h2>
<ul>
<table border=2 bgcolor="#dddddd">
<tr bgcolor="#bbbbbb"><th>Name</th><th>Type</th><th>Access</th><th>OID</th><th>Description</th></tr>
@foreach $i scalar@
  <tr>
  @calldefine NODE_INFO@
  </tr>
@end@
</table>
</ul>

<h2>TABLE OBJECTS</h2>
@eval $dont_do_oids = 1@
@foreach $t table@
<h3>Table $t</h3>
<ul>
  <table border=2 bgcolor="#dddddd">
  <tr><td bgcolor="#bbbbbb">Table Name</td><td>$t</td></tr>
  <tr><td bgcolor="#bbbbbb">In MIB</td><td>$t.module</td></tr>
  <tr><td bgcolor="#bbbbbb">Registered at OID</td><td>$t.objectID</td></tr>
  <tr><td bgcolor="#bbbbbb">Table Description</td>
@eval $i ="$t"@
@calldefine DO_DESCR@
</tr>
  <tr><td bgcolor="#bbbbbb">Row Description</td>
    @eval $x = $t@
    @perleval $vars{'x'} =~ s/Table/Entry/; 0;@
@eval $i ="$x"@
@calldefine DO_DESCR@
</tr>
  </table>

  <h3>Table Indexes:</h3>

<table border=2 bgcolor="#dddddd">
<tr bgcolor="#bbbbbb"><th>Name</th><th>Type</th><th>Access</th><th>Description</th></tr>
@foreach $i index@
  <tr>
  @calldefine NODE_INFO@
  </tr>
@end@
</table>

  <h3>Other Table Columns:</h3>
<table border=2 bgcolor="#dddddd">
<tr bgcolor="#bbbbbb"><th>Name</th><th>Type</th><th>Access</th><th>Description</th></tr>
@foreach $i nonindex@
  <tr>
  @calldefine NODE_INFO@
  </tr>
@end@
</table>
</ul>
@end@

<br>
<h2>TEXTUAL CONVENTIONS</h2>
<ul>
<p>
These TEXTUAL-CONVENTIONS are used in other parts of the document
above.  They are SNMP's way of defining a datatype that is used
repeatedly by other MIB objects.  Any implementation implementing
objects that use one of these definitions must follow its DESCRIPTION
clause as well as the DESCRIPTION clause of the object itself.
</p>
@startperl@
mib2c_output("<table border=2 bgcolor=\"#dddddd\">");
mib2c_output("<tr bgcolor=\"bbbbbb\"><th>Name</th><th>Type</th><th>Description</th></tr>\n");
map {
    my $desc = $SNMP::MIB{$TCS{$_}}{'TCDescription'};
      my ($s) = ($desc =~ /\n(\s+)/);
      $desc =~ s/^$s//gm;
    mib2c_output("<tr><td><a name=\"$_\">$_</td><td>");
    mib2c_output($SNMP::MIB{$TCS{$_}}{'type'});
    my @enumkeys = keys(%{$SNMP::MIB{$TCS{$_}}{'enums'}});
    if ($#enumkeys > -1) {
       mib2c_output("<table border=2 bgcolor=\"#cccccc\">");
       mib2c_output("<tr><th>Value</th><th>Label/Meaning</th></tr>");
       foreach $k (sort { $SNMP::MIB{$TCS{$_}}{'enums'}{$a} <=>
			  $SNMP::MIB{$TCS{$_}}{'enums'}{$b} } @enumkeys) {
            mib2c_output("<tr><td>$SNMP::MIB{$TCS{$_}}{'enums'}{$k}</td><td>$k</td></tr>");
       }
       mib2c_output("</table>");
    }
    mib2c_output("</td><td><pre>$desc</pre></td></tr>\n");
} keys(%TCS); 
0;
@endperl@
</ul>

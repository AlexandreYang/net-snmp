## -*- c -*-
######################################################################
## Do the .h file
######################################################################
@open ${name}_checkfns.h@
/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.iterate.conf,v 5.6 2003/02/20 00:52:07 hardaker Exp $
 */
#ifndef $name.uc_CHECKFNS_H
#define $name.uc_CHECKFNS_H

@foreach $t table@
/* these functions are designed to check incoming values for 
columns in the $t table for legality with respect to 
datatype and value.
 */

  @foreach $i column@
    @if $i.access =~ /(Write|Create)/@
      int check_$i(int type, $i.decl *val, size_t val_len);
    @end@
  @end@
@end@

#endif /* $name.uc_CHECKFNS_H */

######################################################################
## Do the .c file
######################################################################
@open ${name}_checkfns.c@
/*
 * Note: this file originally auto-generated by mib2c using
 *        $Id$
 */

/* standard headers */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include "${name}_checkfns.h"
#include "${name}_enums.h"
@run mib2c.column_enums.conf@

@foreach $t table@
  @foreach $i column@
    @if $i.access =~ /(Write|Create)/@
/** Decides if an incoming value for the $i mib node is legal.
 *  @param type    The incoming data type.
 *  @param val     The value to be checked.
 *  @param val_len The length of data stored in val (in bytes).
 *  @return 0 if the incoming value is legal, an SNMP error code otherwise.
 */
    int
    check_$i(int type, $i.decl *val, size_t val_len) {

    /** Check to see that we were called legally */
      if (!val)
        return SNMP_ERR_GENERR;

    /** Check the incoming type for correctness */
      if (type != $i.type)
        return SNMP_ERR_WRONGTYPE;

      @if $i.type =~ /int/i@
        @eval $x = 0@
      	@foreach $l, $v enum@
           @if $x == 0@
    /** Check the enums.  Legal values continue. */
           switch (*val) {
	       @eval $x = 1@
	   @end@
      	  case $i.uc_$l.uc:
      	@end@
        @if $x == 1@
      	    break;

    /** not a legal enum value.  return an error */
      	  default:
      	    return SNMP_ERR_INCONSISTENTVALUE;
      	}
        @end@
        @foreach $min $max range $i@
          @if $x == 0@
    /** Check the ranges of the passed value for legality */
            @eval $x = 1@
          @end@
          if (*val >= $min && *val <= $max)
            return SNMP_ERR_NOERROR;
        @end@
      @end@
      @if $i.type =~ /str/i@
        @eval $x = 0@
        @foreach $min $max range $i@
          @if $x == 0@
    /** Check the ranges of the passed value for legality */
            @eval $x = 1@
          @end@
          if (val_len >= $min && val_len <= $max)
            return SNMP_ERR_NOERROR;
        @end@
      @end@
    /** looks ok */
      return SNMP_ERR_NOERROR;
    }
    @end@
  @end@
@end@

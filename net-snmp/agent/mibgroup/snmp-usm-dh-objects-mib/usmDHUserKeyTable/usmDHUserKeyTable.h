/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.25 $ of : mfd-top.m2c,v $
 *
 * $Id$
 */
#ifndef USMDHUSERKEYTABLE_H
#define USMDHUSERKEYTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_require(snmp-usm-dh-objects-mib/usmDHUserKeyTable/usmDHUserKeyTable_interface);
config_require(snmp-usm-dh-objects-mib/usmDHUserKeyTable/usmDHUserKeyTable_data_access);
config_require(snmp-usm-dh-objects-mib/usmDHUserKeyTable/usmDHUserKeyTable_data_get);
config_require(snmp-usm-dh-objects-mib/usmDHUserKeyTable/usmDHUserKeyTable_data_set);
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for  
     */
#include "usmDHUserKeyTable_oids.h"

    /*
     * enum definions 
     */
#include "usmDHUserKeyTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_usmDHUserKeyTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table usmDHUserKeyTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * usmDHUserKeyTable is subid 2 of usmDHPublicObjects.
     * It's status is Current.
     * OID: .1.3.6.1.3.101.1.1.2, length: 9
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     */
    typedef struct usmUser *usmDHUserKeyTable_registration_ptr;

/**********************************************************************/
    /*
     * data context
     */
    typedef struct usmUser *usmDHUserKeyTable_data;


    /*
     *********************************************************************
     * undo context
     * We're just going to use the same data structure for our
     * undo_context. If you want to do something more efficent,
     * define your typedef here.
     */
    typedef usmDHUserKeyTable_data usmDHUserKeyTable_undo_data;

    /*
     * This structure is used to represent the index for a table.
     */
    typedef struct usmDHUserKeyTable_mib_index_s {

        /*
         * usmUserEngineID(1)/SnmpEngineID/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h
         */
        char            usmUserEngineID[32];
        size_t          usmUserEngineID_len;

        /*
         * usmUserName(2)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/H
         */
        char            usmUserName[32];
        size_t          usmUserName_len;


    } usmDHUserKeyTable_mib_index;


    /*
     *********************************************************************
     * Row request context
     * When your functions are called, you will be passed a
     * usmDHUserKeyTable_rowreq_ctx pointer.
     */
    typedef struct usmDHUserKeyTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_OID_LEN];   /* xxx-rks: shrink this */

        usmDHUserKeyTable_mib_index tbl_idx;

        usmDHUserKeyTable_data data;
        usmDHUserKeyTable_undo_data *undo;
        unsigned int    set_flags;

    /** implementor's context pointer provided during registration */
        usmDHUserKeyTable_registration_ptr usmDHUserKeyTable_reg;

        /*
         * TODO:
         * add any other useful data
         *       (e.g. flags for when a column has been set)
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *usmDHUserKeyTable_data_list;

    } usmDHUserKeyTable_rowreq_ctx;

    typedef struct usmDHUserKeyTable_ref_rowreq_ctx_s {
        usmDHUserKeyTable_rowreq_ctx *rowreq_ctx;
    } usmDHUserKeyTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        usmDHUserKeyTable_pre_request(usmDHUserKeyTable_registration_ptr
                                      user_context);
    int            
        usmDHUserKeyTable_post_request(usmDHUserKeyTable_registration_ptr
                                       user_context);

    int            
        usmDHUserKeyTable_check_dependencies(usmDHUserKeyTable_rowreq_ctx *
                                             rowreq_ctx);
    int             usmDHUserKeyTable_commit(usmDHUserKeyTable_rowreq_ctx *
                                             rowreq_ctx);

    extern oid      usmDHUserKeyTable_oid[];
    extern int      usmDHUserKeyTable_oid_size;


#include "usmDHUserKeyTable_interface.h"
#include "usmDHUserKeyTable_data_access.h"
#include "usmDHUserKeyTable_data_get.h"
#include "usmDHUserKeyTable_data_set.h"


#ifndef MFD_SUCCESS
#define MFD_SUCCESS              SNMP_ERR_NOERROR
#define MFD_SKIP                 SNMP_NOSUCHINSTANCE
#define MFD_ERROR                SNMP_ERR_GENERR
#define MFD_RESOURCE_UNAVAILABLE SNMP_ERR_RESOURCEUNAVAILABLE
#define MFD_NOT_VALID_NOW        SNMP_ERR_INCONSISTENTVALUE
#define MFD_NOT_VALID_EVER       SNMP_ERR_WRONGVALUE
#define MFD_CANNOT_CREATE_NOW    SNMP_ERR_INCONSISTENTNAME
#define MFD_CANNOT_CREATE_EVER   SNMP_ERR_NOCREATION
#define MFD_END_OF_DATA          SNMP_ENDOFMIBVIEW
#endif

#ifdef __cplusplus
}
#endif

#endif                          /* USMDHUSERKEYTABLE_H */

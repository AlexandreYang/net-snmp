########################################################################
## generic include for XXX. Don't use directly.
##
## $Id$
########################################################################
@if $m2c_mark_boundary == 1@
/** START code generated by $RCSfile$ $Revision$ */
@end@
########################################################################
##
/*
 * ${node}_check_value
 *
 * return 0 if the incoming value is legal, an SNMP error code otherwise.
 */
int
${node}_check_value( ${context}_reg *reg, ${context}_ctx *ctx,
                     ${context}_ctx *undo_ctx, $m2c_node_set_parms)
{
    netsnmp_assert(NULL != reg);
    netsnmp_assert(NULL != ctx);
    netsnmp_assert(NULL != undo_ctx);
@if $m2c_node_needlength == 1@
    netsnmp_assert(NULL != ${node}_ptr);
@end@

    /*
     * TODO: check that new value is legal
     *
     * The following checks have already been done for you:
     *    The syntax is $node.syntax
@if $node.enums == 1@
     *    The value is one of $m2c_evals
@elsif $node.ranges == 1@
     *    The value is in one of the range set(s): $m2c_evals
@end@
     *
     * NOTE: this is not the place to do any checks for values
     *       which depend on some other value in the mib. Those
     *       types of checks should be done in the
     *       ${node}_check_dependencies() function.
     */

    /*
     * TODO: check that the requested change between the undo value and the
     * new value is legal (ie, the transistion from one value to another
     * is legal
     */
      
    /* if everything looks ok, return SNMP_ERR_NOERROR */
      return SNMP_ERR_NOERROR;
}

/*
 * ${node}_set
 *
 * Purpose:
 *
 * Param: ${context}_reg
 *        Pointer supplied by user during registration.
 * Param: ${context}_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
@if $m2c_node_set_comments ne ""@
$m2c_node_set_comments
@else@
 * Param: ${node}
 *        Pointer to storage for a $node.decl variable
@    if $m2c_node_needlength == 1@
 * Param: ${node}_len
 *        Pointer to a size_t. The size (in bytes) of the data pointed to by
 *        If you need more memory, allocate it using malloc(), update the
 *        the $node pointer.
@    end@
@end@
 */
int
${node}_set( ${context}_reg *reg, ${context}_ctx *ctx,
             ${context}_ctx *undo_ctx, $m2c_node_set_parms )
{
@ifconf syntax-$node.syntax-set.m2i@
@    include syntax-$node.syntax-set.m2i@
@else@
    netsnmp_assert(NULL != reg);
    netsnmp_assert(NULL != ctx);
    netsnmp_assert(NULL != undo_ctx);
@if $m2c_node_needlength == 1@
    netsnmp_assert(NULL != ${node}_ptr);
@end@

    /** syntax-$node.syntax-set.m2i not found */
@    if $m2c_node_skip_mapping != 1@
@        include generic-value-map-reverse.m2i@
@    end@
@    if ($node.enums != 1) || ("$node.perltype" ne "BITS")@
@        include generic-ctx-set.m2i@
@    end@ # ! enums & bits
@end@ # no syntax include
    return SNMP_ERR_NOERROR;
}

/*
 * ${node}_undo
 *
 * Purpose:
 *
 * Param: ${context}_reg
 *        Pointer supplied by user during registration.
 * Param: ${context}_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
@if $m2c_node_undo_comments ne ""@
$m2c_node_undo_comments
@else@
 * Param: ${node}
 *        Pointer to storage for a $node.decl variable
@    if $m2c_node_needlength == 1@
 * Param: ${node}_len
 *        Pointer to a size_t. The size (in bytes) of the data pointed to by
 *        If you need more memory, allocate it using malloc(), update the
 *        the $node pointer.
@    end@
@end@
 */
int
${node}_undo( ${context}_reg *reg, ${context}_ctx *ctx,
              ${context}_ctx *undo_ctx, $m2c_node_set_parms )
{
@ifconf syntax-$node.syntax-undo.m2i@
@    include syntax-$node.syntax-undo.m2i@
@else@
    /** syntax-$node.syntax-undo.m2i not found */
    netsnmp_assert(NULL != reg);
    netsnmp_assert(NULL != ctx);
    netsnmp_assert(NULL != undo_ctx);
@if $m2c_node_needlength == 1@
    netsnmp_assert(NULL != ${node}_ptr);
@end@

##@    if ($node.enums != 1) || ("$node.perltype" ne "BITS")@
##@        include generic-ctx-set.m2i@
##@    end@ # ! enums & bits
@end@ # no syntax include
    return SNMP_ERR_NOERROR;
}

##
########################################################################
@if $m2c_mark_boundary == 1@
/** END code generated by $RCSfile$ $Revision$ */
@end@

#############################################################  -*- c -*-
## generic include for XXX. Do not use directly.
##
## $Id$
########################################################################
@if $m2c_mark_boundary == 1@
/** START code generated by $RCSfile$ $Revision$ */
@end@
########################################################################
##
##----------------------------------------------------------------------
/**
 * Check that the proposed new value is potentially valid.
 *
 * Note that this check is only to determine if the new value
 * is *potentially* valid. This is the first check of many, and
 * is one of simplest ones.
 *
 * The following checks have already been done for you:
 *    The syntax is $node.type
@if $node.enums == 1@
 *    The value is one of $m2c_evals
@elsif $node.ranges == 1@
@    if ("$node.decl" eq "long") || ("$node.decl" eq "u_long")@
@        eval $m2c_tmp_ns = "value"@
@    else@
@        eval $m2c_tmp_ns = "length"@
@    end@
 *    The $m2c_tmp_ns is in (one of) the range set(s): $m2c_evals
@end@
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
@    if ("$node.decl" eq "long") || ("$node.decl" eq "u_long")@
 * For example, an object with the syntax INTEGER(0..500) will
 * have already been checked for a value between 0 and 500. But
 * if the description also specifies that the value must be an
 * even number, you would enforce that requirement here.
@    else@
 * For example, and object with the syntax DisplayString(0..40)
 * will have already been checked for a length between 0 and 40.
 * But if the description also specified that the value must
 * be all uppercase letters, you would enforce that requirement here.
@    end@
 *
 * check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal
 *      
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 * 
 * NOTE: this is not the place to do any checks for values
 *       which depend on some other value in the mib. Those
 *       types of checks should be done in the
 *       ${context}_check_dependencies() function.
 *
 * @param ${context}_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param ${node}
 *        A $node.decl containing the new value.
@    if $m2c_node_needlength == 1@
 * @param ${node}_len
 *        The size (in bytes) of the data pointed to by ${node}_ptr.
@    end@
 *
 * @return MFD_SUCCESS : incoming value is legal
 *         MFD_ERROR   : incoming value is NOT legal
 */
int
${node}_check_value( ${context}_ctx *ctx, $m2c_node_param_val)
{
    /** should never get a NULL pointer */
    netsnmp_assert(NULL != ctx);
@if $m2c_node_needlength == 1@
    netsnmp_assert(NULL != ${node}_ptr);
@end@

    /*
     * TODO:
     * check that new value is legal
     */

    /* if everything looks ok, return 0 */
    return MFD_SUCCESS;
}

##----------------------------------------------------------------------
/**
 * Save old value information
 *
 * This function will be called after the table level undo setup function
 * ${context}_undo_setup has been called.
 *
 * Note that the function will only be called if a new value will be
 * set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 *
 * @param ctx
 *        Pointer to the table context (${context}_ctx)
 *
 * @return MFD_SUCCESS : success
 *         MFD_ERROR   : error. set will fail.
 */
int
${node}_undo_setup( ${context}_ctx *ctx )
{
    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

@ifconf syntax-$node.syntax-set.m2i@
@    include syntax-$node.syntax-set.m2i@
@else@
    /** should never get a NULL pointer */
    netsnmp_assert(NULL != ctx);

@   eval $m2c_ctx_lh = "$m2c_undo_item"@
@   eval $m2c_ctx_rh = "$m2c_data_item"@
@   include generic-ctx-copy.m2i@
@end@

    return MFD_SUCCESS;
}

##----------------------------------------------------------------------
/*
 * Set the new value.
 *
@if $m2c_node_set_comments ne ""@
$m2c_node_set_comments
*
@end@
 * @param ${context}_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param ${node}
 *        A $node.decl containing the new value.
@    if $m2c_node_needlength == 1@
 * @param ${node}_len
 *        The size (in bytes) of the data pointed to by ${node}_ptr.
@    end@
 */
int
${node}_set( ${context}_ctx *ctx, $m2c_node_param_val )
{
@ifconf syntax-$node.syntax-set.m2i@
@    include syntax-$node.syntax-set.m2i@
@else@
    /** should never get a NULL pointer */
    netsnmp_assert(NULL != ctx);
@if $m2c_node_needlength == 1@
    netsnmp_assert(NULL != ${node}_ptr);
@end@

    /** syntax-$node.syntax-set.m2i not found */
@    if $m2c_node_skip_mapping != 1@
@        include generic-value-map-reverse.m2i@
@    end@
@    if ($node.enums != 1) || ("$node.perltype" ne "BITS")@
@        include generic-ctx-set.m2i@
@    end@ # ! enums & bits
@end@ # no syntax include
    return MFD_SUCCESS;
}

##----------------------------------------------------------------------
/*
 * undo the previous set.
 *
@if $m2c_node_undo_comments ne ""@
$m2c_node_undo_comments
*
@end@
 * @param ${context}_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
@if $m2c_node_needlength == 1@
 * @param ${node}_len
 *        The size (in bytes) of the data pointed to by ${node}_ptr.
@end@
 */
int
${node}_undo( ${context}_ctx *ctx )
{
@ifconf syntax-$node.syntax-undo.m2i@
@    include syntax-$node.syntax-undo.m2i@
@else@
    /** syntax-$node.syntax-undo.m2i not found */
    netsnmp_assert(NULL != ctx);

##@    if ($node.enums != 1) || ("$node.perltype" ne "BITS")@
##@        include generic-ctx-set.m2i@
##@    end@ # ! enums & bits
@end@ # no syntax include
    return MFD_SUCCESS;
}

##
########################################################################
@if $m2c_mark_boundary == 1@
/** END code generated by $RCSfile$ $Revision$ */
@end@

#############################################################  -*- c -*-
## generic include for XXX. Do not use directly.
## $Id$
########################################################################
@if $m2c_mark_boundary == 1@
/** START code generated by $RCSfile$ $Revision$ */
@end@
########################################################################
##
## mfd function params
@eval $mfd_base_params="mfd_pdu_context *pdu_ctx, netsnmp_request_info *requests"@
##
@ifconf ${name}.m2d@
@   include ${name}.m2d@
@end@
########################################################################
@open ${name}.h@
/*
 * Note: this file originally auto-generated by mib2c using
 *       version $Revision$ of $RCSfile$ 
 */
@include generic-header-top.m2i@

#include <net-snmp/library/asn1.h>

/* other required module components */
config_require(${name}_interface);
config_require(${name}_data_access);
config_require(${name}_data_get);
config_require(${name}_data_set);

/* OID and column number definitions for table $table */
#include "${name}_oids.h"

/* enum definions */
#include "${name}_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_$name(void);

/* *********************************************************************
 * Table declarations
 */
@foreach $table table@
@    include m2c_setup_table.m2i@
@    include details-table.m2i@
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 */
@    if "x$m2c_context_reg" eq "x"@
    /*
     * TODO:
     * update typedef to correct pointer type.
     * (or add @eval $@m2c_context_reg = "TYPE"@ and regenerate code)
     */
@        eval $m2c_context_reg = "void *"@
@    end@
typedef $m2c_context_reg ${context}_registration_ptr;

@    include generic-data-context.m2i@

@   if $m2c_table_settable@
/* *********************************************************************
 * undo context
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef ${context}_data ${context}_undo_data;

@    end@
@    include generic-table-indexes.m2i@

/* *********************************************************************
 * Row request context
 * When your functions are called, you will be passed a
 * ${context}_rowreq_ctx pointer.
 */
typedef struct ${context}_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_OID_LEN]; /* xxx-rks: shrink this */
    
    ${context}_mib_index        tbl_idx;
    
    ${context}_data             data;
@   if $m2c_table_settable@
    ${context}_undo_data        undo;
@   end@

    /** implementor's context pointer provided during registration */
    ${context}_registration_ptr ${context}_reg;

    /*
     * TODO:
     * add any other useful data
     *       (e.g. flags for when a column has been set)
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *${context}_data_list;

} ${context}_rowreq_ctx;

typedef struct ${table}_ref_rowreq_ctx_s {
    ${context}_rowreq_ctx *rowreq_ctx;
} ${table}_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
## {
    int ${context}_pre_request(${context}_registration_ptr reg,
                        netsnmp_data_list *data_list, u_long id);
    int ${context}_post_request(${context}_registration_ptr reg,
                        netsnmp_data_list *data_list, u_long id);

@   if $m2c_data_init == 1@
    int ${context}_init_rowreq_ctx(${context}_rowreq_ctx *rowreq_ctx);
    void ${context}_cleanup_rowreq_ctx(${context}_rowreq_ctx *rowreq_ctx);
@   end@
@    if "$m2c_data_context" ne "generated"@
@        if $m2c_data_allocate == 1@
    ${context}_data *${context}_allocate_data(void);
@        end@

@   end@
@   if $m2c_table_settable@
@      if $m2c_table_dependencies == 1@
    int ${table}_check_dependencies(${context}_rowreq_ctx * rowreq_ctx); 
@      end@ 
    int ${context}_commit(${context}_rowreq_ctx * rowreq_ctx);
@      if $m2c_irreversible_commit == 1@
    int ${context}_irreversible_commit(${context}_rowreq_ctx * rowreq_ctx);
@      end@
@   end@ # writable

@end@ # for each

#include "${name}_interface.h"
#include "${name}_data_access.h"
#include "${name}_data_get.h"
#include "${name}_data_set.h"

@include generic-header-bottom.m2i@
######################################################################
## Do the .c file
######################################################################
@open ${name}.c@
/*
 * Note: this file originally auto-generated by mbi2c using
 *       version $Revision$ of $RCSfile$ 
 */
@include generic-source-includes.m2i@

#include "${name}_interface.h"

@foreach $table table@
@    include m2c_setup_table.m2i@
void initialize_table_$table(void);
@end@

/**
 * Initializes the $name module
 */
void
init_$name(void)
{
    DEBUGTRACE;

  /* here we initialize all the tables we're planning on supporting */
  @foreach $table table@
    if (should_init("$table"))
        initialize_table_$table();

  @end@
}

########################################################################
##
@foreach $table table@
@    include m2c_setup_table.m2i@
/**
 * Initialize the table $table 
 *    (Define its contents and how it's structured)
 */
void
initialize_table_$table(void)
{
    ${context}_registration_ptr user_context;
    u_long flags;

    DEBUGTRACE;

    /*
     * if you'd like to pass in a pointer to some data for this
     * table, allocate or set it up here.
     */
    user_context = NULL;
    
    /*
     * No support for any flags yet, but in the future you would
     * set any flags here.
     */
    flags = 0;
    
    /*
     * call interface initialization code
     */
    _${table}_initialize_interface(user_context, flags);
}

@   if $m2c_data_init == 1@
/**
 * extra context initialization
 *
 * @return MFD_SUCCESS : no errors
 *        !MFD_SUCCESS : error (context allocate will fail)
 */
int ${context}_rowreq_ctx_init(${context}_rowreq_ctx *rowreq_ctx)
{
    /*
     * TODO:
     * extra initialization
     */

    return MFD_SUCCESS;
}

/**
 * extra context cleanup
 *
 */
void ${context}_rowreq_ctx_cleanup(${context}_rowreq_ctx *rowreq_ctx)
{
    /*
     * TODO:
     * extra cleanup
     */
}

@   end@
/**
 * pre-request callback
 *
 * This is a useful place to make sure you have access to your
 * data source, and perhaps to cache it.
 *
 * @param mfd_reg Pointer to the netsnmp_mfd_registration for the handler.
 * @param id The request id from the incoming pdu. Hopefully unique,
 *           but no guarantees.
 *
 * @return MFD_SUCCESS              : success.
 *         MFD_RESOURCE_UNAVAILABLE : if you can not get your data.
 *         MFD_ERROR                : other error
 */
int
${context}_pre_request( ${context}_registration_ptr reg,
                        netsnmp_data_list *data_list, u_long id)
{
    DEBUGTRACE;

    /*
     * TODO:
     * pre-request setup
     */

    return MFD_SUCCESS;
}

/**
 * post-request callback
 *
 * This is a useful place to clean up after a request. If you
 * cached data, you could clean up here.
 *
 * @param mfd_refr Pointer to the netsnmp_mfd_registration for the handler.
 * @param id The request id from the incoming pdu. Hopefully unique,
 *           but no guarantees.
 *
 * @return MFD_SUCCESS : success.
 *         MFD_ERROR   : other error (ignored)
 */
int
${context}_post_request(${context}_registration_ptr reg,
                        netsnmp_data_list *data_list, u_long id)
{
    DEBUGTRACE;

    /*
     * TODO:
     * post-request cleanup
     */

    return MFD_SUCCESS;
}


@end@

########################################################################
## Do support files
########################################################################
@run generic-table-oids.m2c@
@run generic-table-enums.m2c@
@run mfd-interface.m2c@
@run mfd-data-access.m2c@
@run mfd-data-get.m2c@
@run mfd-data-set.m2c@
@run mfd-readme.m2c@
@ifconf ${name}_Makefile@
@else@
@   run mfd-makefile.m2m@
@end@
@ifconf ${name}_subagent.c@
@else@
@   run subagent.m2c@
@end@
##
########################################################################
@if $m2c_mark_boundary == 1@
/** END code generated by $RCSfile$ $Revision$ */
@end@

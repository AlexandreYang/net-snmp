#############################################################  -*- c -*-
## generic include for XXX. Do not use directly.
## $Id$
########################################################################
@if $m2c_mark_boundary == 1@
/** START code generated by $RCSfile$ $Revision$ */
@end@
########################################################################
##
@open ${name}.h@
/*
 * Note: this file originally auto-generated by mib2c using
 *       version $Revision$ of $RCSfile$ 
 */
@include generic-header-top.m2i@

/* other required module components */
config_require(${name}_interface);
config_require(${name}_data_access);
config_require(${name}_data_get);
config_require(${name}_data_set);

/* OID and column number definitions for table $table */
#include "${name}_oids.h"

/* enum definions */
#include "${name}_enums.h"

/***********************************************************************
 * function declarations
 */
void init_$name(void);

/***********************************************************************
 * Table declarations
 */
@foreach $table table@
@    include m2c_setup_table.m2i@
@    include details-table.m2i@
/***********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 */
@    if "$m2c_context_reg" eq ""@
    /** TODO: update typedef to correct pointer type.
     * (or add @eval $@m2c_context_reg = "TYPE"@ and regenerate code) */
@        eval $m2c_context_reg = "void *"@
@    end@
typedef $m2c_context_reg ${context}_reg_data;

@    include generic-data-context.m2i@

/***********************************************************************
 * undo context
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef ${context}_data ${context}_undo_data;

@    include generic-table-indexes.m2i@

/***********************************************************************
 * context
 * When your functions are called, you will be passed a
 * ${context}_ctx pointer.
 */
typedef struct ${context}_ctx_s {
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_OID_LEN]; /* xxx-rks: shrink this */
    ${context}_idx       tbl_idx;
    
    ${context}_data      data;
    ${context}_undo_data undo;

    /*
     * TODO: add any other useful data
     *       (e.g. flags for when a column has been set)
     */
    
} ${context}_ctx;

typedef struct ${table}_ref_ctx_s {
    ${table}_ctx *ctx;
} ${table}_ref_ctx;

/***********************************************************************
 * function prototypes
 */
netsnmp_container *${table}_container_init(netsnmp_mfd_registration *reg);

@    include mfd-access-${m2c_table_access}-header.m2i@

    ${table}_ctx *${table}_allocate_ctx(netsnmp_mfd_registration *reg);
@if $m2c_data_allocate == 1@
    ${context}_data *${context}_allocate_data(void);
@end@
@end@

@include generic-header-bottom.m2i@
######################################################################
## Do the .c file
######################################################################
@open ${name}.c@
/*
 * Note: this file originally auto-generated by mbi2c using
 *       version $Revision$ of $RCSfile$ 
 */
@include generic-source-includes.m2i@

@foreach $table table@
void initialize_table_$table(void);
int ${table}_get_values(netsnmp_mfd_registration *mfdr,
                        netsnmp_request_group *rg);
@end@

/* Initializes the $name module */
void
init_$name(void)
{ 
    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

  /* here we initialize all the tables we're planning on supporting */
  @foreach $table table@
    if (should_init("$table"))
        initialize_table_$table();

  @end@
}

########################################################################
##
@foreach $table table@
@    include m2c_setup_table.m2i@
/*
 * Initialize the table $table 
 *    (Define its contents and how it's structured)
 */
void
initialize_table_$table(void)
{
    static oid ${table}_oid[] = { $table.uc_OID };
    netsnmp_handler_registration *my_handler;
    netsnmp_table_registration_info *table_info;
    netsnmp_mfd_registration *mfdr;
    netsnmp_container *container;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    /** create the table registration information structures */
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    if (!table_info) {
        snmp_log(LOG_ERR, "table_info malloc failed in "
                          "initialize_table_$table");
        return; /** Serious error. */
    }

    /** if your table is read only, it's easiest to change the
        HANDLER_CAN_RWRITE definition below to HANDLER_CAN_RONLY */
    my_handler = netsnmp_create_handler_registration("$table",
                                             NULL,
                                             ${table}_oid,
                                             OID_LENGTH(${table}_oid),
                                             HANDLER_CAN_BABY_STEP |
@if $m2c_table_writable == 1@
                                             HANDLER_CAN_RWRITE
@else@
                                             HANDLER_CAN_RONLY
@end@
);
    if (!my_handler) {
        snmp_log(LOG_ERR, "handler registration failed in "
                          "initialize_table_$table");
        return; /** Serious error. */
    }

    /***************************************************
     * Setting up the table's definition
     */
    netsnmp_table_helper_add_indexes(table_info,
    @foreach $tabledx index@
                                  $tabledx.type, /** index: $tabledx */
    @end@
                             0);

    /** Define the minimum and maximum accessible columns.  This
        optimizes retrival. */
    table_info->min_column = $table.uc_MIN_COL;
    table_info->max_column = $table.uc_MAX_COL;


    /***************************************************
     * create the table registration information structures
     */
    mfdr = SNMP_MALLOC_TYPEDEF(netsnmp_mfd_registration);
    if (!mfdr) {
        snmp_log(LOG_ERR, "mfd registration malloc failed in "
                          "initialize_table_$table");
        return; /** Serious error. */
    }
    mfdr->cbsm.get_values = ${table}_get_values;

    /***************************************************
     * set up container
     */
    container = ${table}_container_init(mfdr);

    /***************************************************
     * registering the table with the master agent
     */
    DEBUGMSGTL(("$name:init_$table",
                "Registering $table as a mibs-for-dummies table.\n"));		 
    netsnmp_mfd_register_table(my_handler, table_info, container, mfdr);
}

@end@

########################################################################
## Do support files
########################################################################
@run generic-table-oids.m2c@
@run generic-table-enums.m2c@
@run mfd-interface.m2c@
@run mfd-data-access.m2c@
@run mfd-data-get.m2c@
@run mfd-data-set.m2c@
@run mfd-makefile.m2m@
@run mfd-readme.m2c@
@run subagent.m2c@
##@run mib2c.column_enums.conf@
##
########################################################################
@if $m2c_mark_boundary == 1@
/** END code generated by $RCSfile$ $Revision$ */
@end@

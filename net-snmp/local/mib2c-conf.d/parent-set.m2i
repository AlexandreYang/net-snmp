#############################################################  -*- c -*-
## generic include for XXX. Do not use directly.
##
## $Id$
########################################################################
@if $m2c_mark_boundary == 1@
/** START code generated by $RCSfile$ $Revision$ */
@end@
########################################################################
##//####################################################################
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@if $m2c_processing_type eq 'h'@

@   if $m2c_table_row_creation == 1@
int ${context}_validate_index( ${context}_registration_ptr ${context}_reg,
                               ${context}_rowreq_ctx *rowreq_ctx);
@   end@
@   if "$m2c_data_context" ne "generated"@
int ${context}_undo_setup( ${context}_rowreq_ctx *rowreq_ctx);
@   end@
int ${context}_commit( ${context}_rowreq_ctx *rowreq_ctx);
@   if $m2c_irreversible_commit == 1@
int ${context}_irreversible_commit( ${context}_rowreq_ctx *rowreq_ctx);
@   end@

@end@ // m2c_processing_type eq 'h'
########################################################################
##//####################################################################
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
##//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@if $m2c_processing_type eq 'c'@
@if $m2c_table_row_creation == 1@
/**
 * create new data context, if specified index is valid.
 *
 * @param ${context}_reg
 *        Pointer to the user registration data
 * @param ${context}_rowreq_ctx
 *        Pointer to the users context.
 * @retval MFD_SUCCESS   : success
 * @retval MFD_BAD_VALUE : index not valid
 */
int
${context}_validate_index( ${context}_registration_ptr ${context}_reg,
                           ${context}_rowreq_ctx *rowreq_ctx)
{
    int rc;

    DEBUGTRACE;

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:
     * Validate incoming index
     *
     * Check that the values specified in the incoming index are valid
     * values. All of the individual index component functions have been
     * called, so this is the place to make sure they are valid as
     * a whole when combined.
     */
$example_start
    /*
     * TODO:
     * update this code or row creation won't work
     */
    if(1) {
        snmp_log(LOG_WARNING,"invalid index for a new row in the "
                 "${table} table.\n");
        /*
         * TODO:
         * determine failure type.
         *
         * If the index could not ever be created, SNMP_ERR_NOCREATION.
         * If the index can not be created under the  present circumstances
         * (even though it could be created under other circumstances),
         * SNMP_ERR_INCONSISTENTNAME.
         */
        if(1) {
            return SNMP_ERR_NOCREATION;
        }
        else {
            return SNMP_ERR_INCONSISTENTNAME;
        }
    }
$example_end

    return MFD_SUCCESS;
}

@end@ # row creation
##----------------------------------------------------------------------
@if "$m2c_data_context" ne "generated"@
/**
 * Setup up context with information needed to undo a set request.
 *
 * This function will be called before the individual node undo setup
 * functions are called. If you need to do any undo setup that is not
 * related to a specific column, you can do it here.
 *
 * Note that an individual node's undo_setup function will only be called
 * if that node is being set to a new value.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in the node's undo_setup
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (${context}_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int
${context}_undo_setup( ${context}_rowreq_ctx *rowreq_ctx)
{
    int rc;

    DEBUGTRACE;

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );


    return MFD_SUCCESS;
}

@end@ // ne generated
##----------------------------------------------------------------------
/**
 * commit new valies.
 *
 * At this point, you should have done everything you can to ensure that
 * this commit will not fail.
 *
 * @param ${context}_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
${context}_commit( ${context}_rowreq_ctx *rowreq_ctx)
{
    int rc;

    DEBUGTRACE;

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:
     * commit data
     */
##$example_start
##$example_end

    return MFD_SUCCESS;
}


@if $m2c_irreversible_commit == 1@
##----------------------------------------------------------------------
/**
 * perform commit actions that are not reversible
 *
 * THERE IS NO ATTEMPT AT RECOVERY FOR ERRORS FROM THIS STATE!
 *
 * @param ${context}_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : other error
 */
int
${context}_irreversible_commit( ${context}_rowreq_ctx *rowreq_ctx)
{
    int rc;

    DEBUGTRACE;

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:
     * commit data here
     */
##$example_start
##$example_end

    return MFD_SUCCESS;
}

@end@ // irreversable commit
##
########################################################################
@end@ // m2c_processing_type ne c
########################################################################
@if $m2c_mark_boundary == 1@
/** END code generated by $RCSfile$ $Revision$ */
@end@

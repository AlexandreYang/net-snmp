########################################################################
## generic include for XXX. Don't use directly.
##
## $Id$
########################################################################
@if $m2c_mark_boundary == 1@
/** START code generated by $RCSfile$ $Revision$ */
@end@
########################################################################
##
/*
 * ${context}_allocate_data
 *
 * Purpose: create new data data.
 *
 */
${context}_data *
${context}_allocate_data_context(  )
{
    /*
     * allocate memory for the context
     */
$example_start
    ${context}_data *rtn = SNMP_MALLOC_STRUCT(${context}_data);
$example_end

    if(NULL == rtn) {
        snmp_log(LOG_ERR,
                 "unable to malloc memory for new data context for the "
                 "${table} table.\n");
    }

    return rtn;
}

/*
 * ${context}_create_context
 *
 * Purpose: create new data context, if specified index is valid.
 *
 */
int
${context}_create_data_context( ${context}_ctx *ctx )
{
    int rc;

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != ctx );

    /*
     * TODO: Validate incoming index
     * Check that the values specified in the incoming index are valid
     * values.
     */
$example_start
    /** TODO: no row creation for you till you update this code */
    if(1) {
        snmp_log(LOG_WARN,"invalid index for a new row in the "
                 "${table} table.\n");
        /*
         * TODO: determine failure type.
         * If the index could not ever be created, SNMP_ERR_NOCREATION.
         * If the index can not be created under the  present circumstances
         * (even though it could be created under other circumstances),
         * SNMP_ERR_INCONSISTENTNAME.
         */
        if(1) {
            return SNMP_ERR_NOCREATION;
        }
        else {
            return SNMP_ERR_INCONSISTENTNAME;
        }
    }
$example_end

    /*
     * allocate memory for the data context
     */
    ctx->data = ${context}_allocate_data();
    if(NULL == ctx->data) {
        /** msg already logged */
        return SNMP_ERR_RESOURCEUNAVAILABLE;
    }

    return SNMP_ERR_NOERROR;
}

/*
 * ${context}_create_undo
 *
 * Create an 
 */
int
${context}_create_undo_context( ${context}_ctx *ctx )
{
    int rc;

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != ctx );

    /*
     * allocate context
     */
$example_start
    ctx->undo = ${context}_allocate_data();
    if(NULL == ctx->data) {
        /** msg already logged */
        return SNMP_ERR_RESOURCEUNAVAILABLE;
    }
$example_end

    /*
     * copy the data
     */
@    foreach $node nonindex@
@        include m2c_setup_node.m2i@
@        eval $m2c_ctx_lh = "ctx->undo"@
@        eval $m2c_ctx_rh = "ctx->data"@
@        include generic-ctx-copy.m2i@
@    end@ # foreach nonindex

    return SNMP_ERR_NOERROR;
}

##
########################################################################
@if $m2c_mark_boundary == 1@
/** END code generated by $RCSfile$ $Revision$ */
@end@

#############################################################  -*- c -*-
## generic include for XXX. Do not use directly.
##
## $Id$
########################################################################
@if $m2c_mark_boundary == 1@
/** START code generated by $RCSfile$ $Revision$ */
@end@
########################################################################
##
##----------------------------------------------------------------------
@if $m2c_table_row_creation == 1@
/*
 * ${context}_validate_index
 *
 * Purpose: create new data context, if specified index is valid.
 *
 * @param mfdr Pointer to the netsnmp_mfd_registration for the handler.
 * @param ${context}_ctx
 *        Pointer to the users context.
 * @return SNMP_ERR_NOERROR on success, or appropriate SNMP_ERR_* error
 * code on failure.
 */
int
${context}_validate_index( netsnmp_mfd_registration *mfdr, ${context}_ctx *ctx )
{
    int rc;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != ctx );

    /*
     * TODO: Validate incoming index
     * Check that the values specified in the incoming index are valid
     * values.
     */
$example_start
    /** TODO: no row creation for you till you update this code */
    if(1) {
        snmp_log(LOG_WARNING,"invalid index for a new row in the "
                 "${table} table.\n");
        /*
         * TODO: determine failure type.
         * If the index could not ever be created, SNMP_ERR_NOCREATION.
         * If the index can not be created under the  present circumstances
         * (even though it could be created under other circumstances),
         * SNMP_ERR_INCONSISTENTNAME.
         */
        if(1) {
            return SNMP_ERR_NOCREATION;
        }
        else {
            return SNMP_ERR_INCONSISTENTNAME;
        }
    }
$example_end

    return SNMP_ERR_NOERROR;
}

@end@ # row creation
##----------------------------------------------------------------------
@if $m2c_data_context ne "generated"@
/**
 * Setup up context with information needed to undo a set request.
 *
 * This function will be called before the individual node undo setup
 * functions are called. If you need to do any undo setup that is not
 * related to a specific column, you can do it here.
 */
int
${context}_undo_setup( ${context}_ctx *ctx )
{
    int rc;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != ctx );

    /*
     * copy data to undo
     */
@if $m2c_data_context ne "generated"@
$example_start
@end@
@    foreach $node nonindex@
@        include m2c_setup_node.m2i@
@        eval $m2c_ctx_lh = "$m2c_undo_item"@
@        eval $m2c_ctx_rh = "$m2c_data_item"@
@        include generic-ctx-copy.m2i@
@    end@ # foreach nonindex
@if $m2c_data_context ne "generated"@
$example_end
@end@

    return SNMP_ERR_NOERROR;
}
@end@
##----------------------------------------------------------------------
/*
 * ${context}_reversible_commit
 *
 * Purpose: perform commit actions that are reversible
 *
 * @param mfdr Pointer to the netsnmp_mfd_registration for the handler.
 * @param requests A linked list of requests for this row
 * @param ${context}_ctx
 *        Pointer to the users context.
 * @return SNMP_ERR_NOERROR on success, or appropriate SNMP_ERR_* error
 */
int
${context}_reversible_commit( $mfd_base_params, ${context}_ctx *ctx )
{
    int rc;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != ctx );

    /*
     * TODO: commit any data that is not difficult to undo and/or
     * is not service affecting.
     */
##$example_start
##$example_end

    return SNMP_ERR_NOERROR;
}

##----------------------------------------------------------------------
/*
 * ${context}_final_commit
 *
 * Purpose: perform remaining commit actions.
 *
 * At this point, you should have done everything you can to ensure that
 * this commit will not fail.
 *
 * THERE IS NO ATTEMPT AT RECOVERY FOR ERRORS FROM THIS STATE!
 *
 * @param mfdr Pointer to the netsnmp_mfd_registration for the handler.
 * @param requests A linked list of requests for this row
 * @param ${context}_ctx
 *        Pointer to the users context.
 * @return SNMP_ERR_NOERROR on success, or appropriate SNMP_ERR_* error
 */
int
${context}_final_commit( $mfd_base_params, ${context}_ctx *ctx )
{
    int rc;

    DEBUGMSGT(("${name}:trace",">%s\n",__FUNCTION__));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != ctx );

    /*
     * TODO: commit any remaining data.
     */
##$example_start
##$example_end

    return SNMP_ERR_NOERROR;
}

@end@
##
########################################################################
@if $m2c_mark_boundary == 1@
/** END code generated by $RCSfile$ $Revision$ */
@end@

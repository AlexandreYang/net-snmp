#!/usr/bin/perl

use strict;
use Data::Dumper;
use Getopt::Std;
our %opts;

getopts('thl', \%opts) || usage();

usage() if ($opts{'h'});

my @argumentsets =
    (
     {
	 title => 'security-types',
	 arguments =>
	 {
	     usm => {
		 'with-security-modules' => 'usm',
	     },
	     dtlsandtls => {
		 'with-security-modules'     => 'tsm',
		 'with-out-security-modules' => 'usm',
		 'with-transports'           => 'DTLSUDP TLSTCP',
		 'mib-modules'               => 'tlstm-mib tsm-mib'
	     },
	     usmanddtlsandtls => {
		 'with-security-modules'     => 'tsm usm',
		 'with-transports'           => 'DTLSUDP TLSTCP',
		 'mib-modules'               => 'tlstm-mib tsm-mib'
	     }
	 }
     },
     {
	 title => 'minimalist',
	 arguments =>
	 { 
	     minimal => {
		 'enable-minimalist'    => '',
	     },
	     'not-minimal' => {
	     }
	 }
     },
     {
	 title => 'mib-loading',
	 arguments =>
	 { 
	     'without-mib-loading' => {
		 'disable-mib-loading'    => '',
	     },
	     'with-mib-loading' => {
	     }
	 }
     },
     {
	 title => 'debugging',
	 arguments =>
	 { 
	     'without-debugging' => {
		 'disable-debugging'    => '',
	     },
	     'with-debugging' => {
	     }
	 }
     },
    );

if ($opts{'l'}) {
    print "Types available:\n";
    printf("  %-40.40s %s\n", "Test Title", "Number of subtests");
    printf("  %-40.40s %s\n", "-" x 39, "-" x length("Number of subtests"));
    foreach my $type (@argumentsets) {
	my @keys = keys(%{$type->{'arguments'}});
	printf("  %-40.40s %s\n", $type->{'title'}, $#keys+1);
    }
    exit;
}

my @sets = ({});

foreach my $set (@argumentsets) {
    @sets = add_in_flags($set, @sets);
}

foreach my $set (@sets) {
    print "$set->{'title'}:\n";
    print " ", generate_configure_flags($set), "\n";
}

sub add_in_flags {
    my ($argumentset, @current_flags) = @_;

    my @new_flags;

    foreach my $flags (@current_flags) {
	foreach my $newargs (keys(%{$argumentset->{'arguments'}})) {
	    my %flags = %{$flags};  # copy the existing hash-set of flags
	    
	    if (exists($flags{'title'})) {
		$flags{'title'} .= ", $newargs";
	    } else {
		$flags{'title'} .= "$newargs";
	    }
	    foreach my $newflag (keys(%{$argumentset->{'arguments'}{$newargs}})) {

		$flags{$newflag} .= " $argumentset->{'arguments'}{$newargs}{$newflag}";
	    }

	    push @new_flags, \%flags;
	}
    }

    return @new_flags;
}

sub generate_configure_flags {
    my ($arguments) = @_;
    my $line = "";
    foreach my $arg (keys(%$arguments)) {
	next if ($arg eq 'title');
	if ($arguments->{$arg} =~ /^\s*$/) {
	    $line .= " --$arg";
	} else {
	    $line .= " --$arg=\"$arguments->{$arg}\"";
	}
    }
    return $line;
}

sub usage {
    print "Usage: $0 [FLAGS]\n\n";
    print "FLAGS:\n";
    print "\t-h\thelp\n";
    print "\t-t TYPES\tSelect types to analyze (default = all)\n";
    print "\t-l\tList available types\n";
    exit;
}

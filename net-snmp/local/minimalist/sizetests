#!/usr/bin/perl

use strict;
use Data::Dumper;

my @argumentsets =
    (
     {
	 name => 'SNMPv3 Security',
	 arguments =>
	 {
	     usm => {
		 'with-security-modules' => 'usm',
	     },
	     dtlsandtls => {
		 'with-security-modules'     => 'tsm',
		 'with-out-security-modules' => 'usm',
		 'with-transports'           => 'DTLSUDP TLSTCP',
		 'mib-modules'               => 'tlstm-mib tsm-mib'
	     }
	 }
     },
     {
	 name => 'minimalist',
	 arguments =>
	 { 
	     minimal => {
		 'enable-minimalist'    => '',
	     },
	     nominimal => {
	     }
	 }
     },
     {
	 name => 'mib-loading',
	 arguments =>
	 { 
	     'without-mib-loading' => {
		 'disable-mib-loading'    => '',
	     },
	     'with-mib-loading' => {
	     }
	 }
     },
     {
	 name => 'debugging',
	 arguments =>
	 { 
	     'without-debugging' => {
		 'disable-debugging'    => '',
	     },
	     'with-debugging' => {
	     }
	 }
     },
    );

my @sets = ({});

foreach my $set (@argumentsets) {
    @sets = add_in_flags($set, @sets);
}

foreach my $set (@sets) {
    print generate_configure_flags($set), "\n";
}

sub add_in_flags {
    my ($argumentset, @current_flags) = @_;

    my @new_flags;

    foreach my $flags (@current_flags) {
	foreach my $newargs (keys(%{$argumentset->{'arguments'}})) {
	    my %flags = %{$flags};  # copy the existing hash-set of flags
	    
	    foreach my $newflag (keys(%{$argumentset->{'arguments'}{$newargs}})) {

		$flags{$newflag} .= " $argumentset->{'arguments'}{$newargs}{$newflag}";
	    }

	    push @new_flags, \%flags;
	}
    }

    return @new_flags;
}

sub generate_configure_flags {
    my ($arguments) = @_;
    my $line = "";
    foreach my $arg (keys(%$arguments)) {
	if ($arguments->{$arg} =~ /^\s*$/) {
	    $line .= " --$arg";
	} else {
	    $line .= " --$arg=\"$arguments->{$arg}\"";
	}
    }
    return $line;
}

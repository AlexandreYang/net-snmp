#!/usr/local/bin/perl

use SNMP;
use DBI;
init_mib;

#===========================================================================
#  Global defines
#===========================================================================

$hostname = 'localhost';          # Host that serves the mSQL Database
$dbname = 'snmp';                 # mySQL Database name
$doit = 1;

sub usage {
    print "$0 [-H host] [-u user] [-p password] [-v] [-h] [-n] [-d] <-m mibnode>\n";
    exit 0;
}

while ($#ARGV > -1) {
    $_ = shift @ARGV;
    usage if (/-h/);
    $hostname = shift if (/-H/);
    $user = shift if (/-u/);
    $pass = shift if (/-p/);
    $verbose = 1 if (/-v/);
    $delete = 1 if (/-d/);
    $doit = 0 if (/-n/);
}

#===========================================================================
# Connect to the mSQL database with the appropriate driver
( $dbh = DBI->connect("DBI:mysql:database=$dbname;host=$hostname", $user, $pass))
    or die "\tConnect not ok: $DBI::errstr\n";

#===========================================================================
# Get host records from database and process

( $cursor = $dbh->prepare( "SELECT distinct host FROM hosttables" ) )
    or die "\nnot ok: $DBI::errstr\n";
( $cursor->execute )
    or print( "\tnot ok: $DBI::errstr\n" );

while (  $hostrow = $cursor->fetchrow_hashref ) {

    #set up the session
    my $host = $hostrow->{'host'};
    print " starting $host\n" if ($verbose);
    my $x = $dbh->prepare("select community from hosts where name = '$host'");
    my $y = $x->execute();
    my $comm = "public";
    print "$host...$y\n";
    if (defined($y) && "$y" ne "0E0") {
	$comm =  ${$x->fetchrow_hashref}{'community'};
    }
    print STDERR "$host: $comm\n";
    my $sess = new SNMP::Session (  DestHost => $host, Community => $comm, Timeout => 5000000 );

    # get a list of tables we want to store
    $cmd = "SELECT * FROM hosttables where (host = '$host')";
    print " $cmd\n" if ($verbose);
    ( $tblh = $dbh->prepare( $cmd ) )
	or die "\nnot ok: $DBI::errstr\n";
    ( $tblh->execute )
	or print( "\tnot ok: $DBI::errstr\n" );

    while (  $tablelist = $tblh->fetchrow_hashref ) {
	my $mib = $SNMP::MIB{SNMP::translateObj($tablelist->{'tablename'})};
	die "mib node $tablelist->{'tablename'} doesn't exist" if (!$mib);
	my $children = $$mib{'children'};
	die "children of $mib->{label} don't exist\n" if ($#{$children} == -1);

	# create the table in our database if it doesn't exist.
	if ($delete) {
	    setuptable($tablelist->{tablename});
	} else {
	    $dbh->do("select * from $tablelist->{tablename}")
		or setuptable($tablelist->{tablename});
	}
	
	$var = 
	    new SNMP::Varbind([SNMP::translateObj($tablelist->{'tablename'})]);
	my $val = $sess->getnext($var);
	$initlabel = "";
	print " starting $tablelist->{tablename}\n" if ($verbose);
	while (1) {
	    my $varlabel = $var->[$SNMP::Varbind::tag_f];
	    $varlabel = SNMP::translateObj($var->[$SNMP::Varbind::tag_f]) if ($varlabel =~ /^[\.0-9]+$/);
	    $initlabel = $varlabel if ($initlabel eq "");
	    my $val = $sess->getnext($var);
	    last if ($sess->{'ErrorStr'});
	    my $id = $var->[$SNMP::Varbind::iid_f];
	    last if ($varlabel ne $initlabel);
	    my %vals;
	    foreach $c (@$children) {
		my $oid = $$c{'objectID'} . "." . $id;
		my $newvar = new SNMP::Varbind([$oid]);
		my $val = $sess->get($newvar);
		my $label = SNMP::translateObj($$c{'objectID'});
		$vals{$label} = $val;
	    }
	    my $cmd;
	    $res = $dbh->do("select * from $tablelist->{'tablename'} where ( host = '$host' and oidindex = '$id')");
	    print "  result: $res/$\n" if ($verbose);
	    if ($res ne "0E0" && $tablelist->{'keephistory'} != 1) {
		$cmd = "update $tablelist->{'tablename'} set ";
		foreach $h (keys(%vals)) {
		    $cmd .= "$h = '$vals{$h}', ";
		}
		$cmd .= " updated = NULL where (host = '$host' and oidindex = '$id')";
		
	    } else {
		$cmd = "insert into $tablelist->{'tablename'}(host, oidindex, " . join(", ",keys(%vals)) .
		    ") values('$host', '$id', '" .
			join("', '",values(%vals)). "')";
	    }
	    print "  $cmd\n" if ($verbose);
	    $dbh->do("$cmd")
		or die "\nnot ok: $DBI::errstr\n" if ($doit);

	} # snmp loop
    } # table loop
} # host loop

# disconnect
$dbh->disconnect();

sub setuptable {

    my %conversions = qw(INTEGER integer OCTETSTR varchar(254) COUNTER integer UINTEGER integer IPADDR varchar(254) OBJECTID varchar(254) GAGUE integer OPAQUE varchar(254) TICKS integer);

    # set up mib info
    my ($mibnode) = @_;
    my $mib = $SNMP::MIB{SNMP::translateObj($mibnode)};
    my $children = $$mib{'children'};
    die "$mib has no chlidren" if (ref($children) ne "ARRAY");
    my ($cmd, $j);

    print " creating table for $mibnode\n";
    if ($delete) {
	$cmd = "drop table if exists $mib->{label}";
	print "cmd: $cmd\n" if ($verbose);
	$dbh->do($cmd)
	    or die "\nnot ok: $DBI::errstr\n" if ($doit);
    }

    $cmd = "create table $mib->{label} (id integer auto_increment primary key, host varchar(16), oidindex varchar(254)";
    foreach $j (@$children) {
	$cmd .= ", $j->{label} $conversions{$j->{type}}";
    }
    $cmd .= ", updated timestamp)";

    print "cmd: $cmd\n" if ($verbose);
    $dbh->do("$cmd")
	or die "\nnot ok: $DBI::errstr\n" if ($doit);

}

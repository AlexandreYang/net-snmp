This is a summary of the steps required to make a new release.
Do not attempt to run these manually - instead use the 'makerelease'
script, which will automate as much of this process as possible.

Invoke this script as:

        makerelease 5.x.y

For pre-releases and release candidates, append the relevant suffix:

	makerelease 5.x.y.preN
or	makerelease 5.x.y.rcN

Any mention of "5.x.y" or "5-x-y" in these intructions should have the
appropriate suffix appended, in the obvious manner.

Certain stages need to be handled manually - there are further
details about these particular steps later on in this file.


IMPORTANT NOTE:
    Don't *ever* release a second tar ball under the same name as the
    first.  It's much much much better to release another version
    instead, since you don't have to figure out from the bug reports
    that a user really grabbed the first snapshot instead of the
    second when they complain about version "XXX" not working.

***************************************************************************
TESTING:

  1) Update the source tree to catch all recent commits,
     and check that all local changes have been committed.

     $ svn -u status
     $ svn    update

  2) Change the libtool version information in Makefile.top.
     See MANUAL - STEP 1 later in these instructions.
     'makerelease' will commit this file automatically.

  3) Configure the suite with as many modules as possible,
     build and test it.  The makerelease script will use
     the options:

      $ ./configure  '--with-mib-modules=host examples examples/example  \
                              testhandler smux Rmon disman/event-mib'    \
                      --with-transports=IPX  --enable-ipv6               \
                      --enable-embedded-perl --enable-shared

     Ideally this should be repeated on as many systems as possible
     (including running "make install").  However the makerelease
     script will only test things on the current box, and will not
     try to install the software.


***************************************************************************
DOCUMENTATION:

  4)  Update the version number in the doxygen.conf file
      (handled automatically by 'makerelease') and generate
      the doxygen extracted manual pages.

        $ make docs
        $ make mancp

     'makerelease' will commit this file automatically.
     Note that any new man pages should be added to Makefile.in.
     This is *NOT* currently handled by the makerelease script.

  5) Check the code for illegal constructs (e.g. C++ style comments
     or GNU make specific constructs in Makefiles):

        $ make checks

  6) Update Makefile dependencies:

        $ make distdepend

     'makerelease' will commit these dependencies automatically.

  7) Update the ChangeLog file with details of all (recent) changes
     to the suite.  See MANUAL - STEP 2 later in these instructions.
     'makerelease' will commit this file automatically.

  8) Update the README, NEWS, and CHANGES files with details of
     significant changes to the suite.  See MANUAL - STEP 3 later
     in these instructions.
     'makerelease' will commit these files automatically.


***************************************************************************
RELEASE:

  9) Make sure all changes are checked in:

       $ svn -u status
       $ svn    update

     [Note that this step is omitted when running "makerelease"]

 10) Change the version number in various files
       (README, FAQ, configure.in, net-snmp.spec and assorted Perl modules).
     'makerelease' will update and commit these files automatically.

 11) Create a tag checkpoint for this release:

       $ svn copy  /trunk                 /tags/Ext-5-x
     or
       $ svn copy  /branches/V5-x-patches /tags/Ext-5-x-y

 12) Construct the source packages:

        $ svn export /tags/Ext-5-x-y/net-snmp net-snmp-5.x.y
        $ net-snmp-5.x.y/remove-files         net-snmp-5.x.y
        $ star artype=ustar -c -z -f net-snmp-5.x.y.tar.gz    net-snmp-5.x.y
        $ rm -f net-snmp-5.x.y.zip"
        $ zip -r net-snmp-5.x.y.zip net-snmp-5.x.y"


 13) Sign (or checksum) the packages:

     Wes/Robert:
        $ gpg -u net-snmp-admin -a --detach-sign net-snmp-5.x.y.tar.gz
        $ gpg -u net-snmp-admin -a --detach-sign net-snmp-5.x.y.zip
     Others:
        $ md5sum net-snmp-5.x.y.tar.gz > net-snmp-5.x.y.tar.gz.md5
        $ md5sum net-snmp-5.x.y.zip    > net-snmp-5.x.y.zip.md5


***************************************************************************
RELEASE TESTING:

 14) Unpack a clean copy of the tarball, configure, build and
     test the release tarball.

 15) Double-check that there are no outstanding changes that have
     been missed from the CVS checkin:

        $ svn status

Note:  This is the last stage that is handled by the "makerelease" script
       Everything following will need to be done manually.

 15) Upload the packages (and signature files) to the SourceForge server:
 
        $ ncftpput upload.sf.net incoming net-snmp-5.x.y.tar.gz
        $ ncftpput upload.sf.net incoming net-snmp-5.x.y.zip
        * SF pages:  "Admin" -> "File Releases"
        * net-snmp:  "Add Release" (or "Edit Release")
        * Create (or choose) an appropriate release name
             e.g.  "5.x.y source code"  (or "5.x.y pre-releases")
        * "Edit This Release"
        * Select the tarball and/or other relevant files

 16) Announce the release on the appropriate list.
     Pre-release announcements (and a call for testing) should be
     sent to net-snmp-coders, release-candidates to net-snmp-users.

     Full releases should be announced on net-snmp-users, and as a
     news item on the project home page - including the NEWS snippet
     of significant changes since the last release.

 17) Update the following htdocs files (in the main SVN trunk):
         htdocs/download.html
         htdocs/dev/schedule.html

     [Make sure you have permissions set up properly on the web
      server so that files created become group-writable!!!]

     That concludes the process for pre-releases and release-candidates.
     For full releases, wait a week to ensure that there are no major
     problems, before continuing with the remaining steps.

        If there are known problems and another release is planned to
     fix them, don't announce the broken version - wait for the updated
     one instead.

 18) Once this week has elapsed, submit an announement of the new
     release to net-snmp-announce.  This message will need to be
     explicitly authorized via MailMan.

     Also update the IRC topic to include mention of this release.

 19) For a release on the most recent development line, start bugging
     Wes to update the freshmeat, Free Software Directory and
     Wikipedia entries.

 20) For a release on the most recent development line, update the
     'htdocs/page-top.html' file (in the main SVN trunk) to reference
     the latest version.

     Update the following files with any changes:

         htdocs/readmefiles/NEWS
         htdocs/readmefiles/CHANGES
         htdocs/readmefiles/ChangeLog
         htdocs/readmefiles/README*
         htdocs/readmefiles/COPYING

     [Make sure you have permissions set up properly on the web
      server so that files created become group-writable!!!]
         

 21) For a major new-feature release (i.e. 5.x), create the patches
     branch:

        $ svn copy  /tags/Ext-5-x   /branches/V5-x-patches

     and update the SVN main trunk with a new version number:

        $ local/Version-Munge.pl -v 5.(x+1).dev -M -P -C

     The 1 week delay (and continued code freeze) is to to ensure that
     developer effort is concentrated on immediate problems following
     the release.  Any major problems should hopefully come to light
     during this period, so after a week it should be safe to create
     the patches branch and officially end the code freeze on MAIN.

 22) Update the official patches tracker set:

     - any patches for this new release tarball should be given
       priority 9
     - all patches for the previous release on this line should
       be marked at priority 5
     - all patches for earlier releases on this line should
       be marked at priority 1, and closed

     If a line has been designated closed, then all official
     patches for that line should be marked as closed as well.

 23) Hide the pre-release repository from the File Releases
     admin pages.

 24) Clean up the 'dist' dir of the relevant V5-x-patches branch.
     Only leave the following files:

     changelogfix  cvsshow  cvsup  extractnews  makerelease
     net-snmp.spec  snmpd-init.d  snmptrapd-init.d

     Note that any files removed should also be deleted from
     SVN repository.


***************************************************************************
CREATING BINARY DISTRIBUTIONS

  0) Always REMOVE ALL PREVIOUS INSTALLS FIRST, then do a make install
     from the tar-ball extracted sources and *THEN* rebuild all
     binaries again.  This ensures that everything (especially perl
     modules) are properly linked against the right libraries.

  1) always build releases from a tarball, not from SVN.

  2) Add mib modules that are common.  Basically, add:

       host                      -- where supported.
       disman/event-mib
       smux

  3) use --with-defaults --with-syscontact="Unknown" 
                         --with-syslocation="Unknown"

  4) when running make install, do it like:

     $ make install prefix=/some/path/to/home/ARCH/usr/local \
            exec_prefix=/some/path/to/home/ARCH/usr/local
    
  5) Tar it up:

     $ cd /some/path/to/home/ARCH
     $ tar czf net-snmp-5.0.3-ARCH.tar.gz usr/local

  6) upload and release, like you did for the source code but with a
     different package name for binaries (5.0.3 binaries).

  7) RPMs [do this in main line even if its for a patch branch]:
     $ cd dist
     $ cp ../net-snmp-5.0.8.tar.gz rpm/SOURCES
     $ make RELEASE=1
     
     This should put multiple binary rpm files in:
       dist/rpm/RPMS/i386/
     And one source RPM in:
       dist/rpm/SRPMS/

     *** These files need to be renamed to include the OS version.

         EG: ...i386.rpm needs to become ...fc5.i386.rpm

  8) Remove (or hide) binaries from older releases of the same line,
     where you have submitted a newer binary for the same architecture.
     Once the last binary for a particular release version has been
     removed, hide that repository.
     

***************************************************************************
***************************************************************************
MANUAL - STEP 1

  Changing the libtool version information in Makefile.top.

      - If any interfaces/structures have been removed or changed since the
        last update, increment current (+5), and set age and revision to 0.
        Stop!

      - If any interfaces have been added since the last public release,
        then increment current and age, and set revision to 0.
        Stop!

      - If the source code has changed at all since the last update,
        then increment revision (c:r:a becomes c:r+1:a).

      Note: maintenance releases (eg 5.2.x) should never have changes
            that would require current to be incremented.

  The check-api-changes script in the dist directory will construct a
  diff of all headers, which can be useful for determining if anything
  needs bumping.

     Update these variables now, so that when you run
     make in a second to test things you can spot libtool yelling
     about improper numbering before you make the release and not
     after you've uploaded the tar ball :-/


***************************************************************************
MANUAL - STEP 2

  Changing the libtool version information in Makefile.top.
  Updating the ChangeLog file

      - The ChangeLog entries are extracted (normally automatically)
        using the command:

          $ svn2cl -f ChangeLog.add --break-before-msg --stop-on-copy

        If you don't have svn2cl installed, you can try and find a
        suitable binary package for your architecture, or you can
        get it directly from
              http://ch.tudelft.nl/~arthur/svn2cl
        You may need to rename the script from 'svn2cl.sh' to 'svn2cl'

      - In either case, they are fixed up (automatically) using:

          $ perl dist/changelogfix < ChangeLog.add > ChangeLog.reallyadd
        or
          $ perl dist/changelogfix V5-{N}-patches < ChangeLog.add > ChangeLog.reallyadd

      - The manual processing step is to insert the appropriate portion
        of the file 'ChangeLog.reallyadd' into 'ChangeLog'.  You can
        usually find the point where the previous release started in
        the file by searching for "version tag".

      - Please keep the line of dashes at the top of the file, as this
        makes it easier to copy during the next release.

      - If using emacs, switch from changelog-mode to text-mode.

      - Check in the new ChangeLog:

          $ svn commit -m "update for release X" ChangeLog

        This is done automatically by "makerelease"


***************************************************************************
MANUAL - STEP 3

Updating README, NEWS, and CHANGES files

  [ This information has been moved to:

  http://www.net-snmp.org/wiki/index.php/Commit_message_auto-extraction_formats

  ]

However, leaving some examples here for quick referral:

  SVN commit messages that generate auto-NEWS and auto-CHANGES
  extractions should be formatted like the following examples:

    NEWS: snmpd: I did something really cool to the agent
    CHANGES: snmptrapd: fixed something minor in snmptrapd
    NEWS: perl: PATCH: 123,456: Applied patches 123 and 456 to support perl6
    CHANGES: BUG: 13: Fixed bug 13 & secured the world at large against hackers
    NEWS: perl: PATCH: 123: from Robert: did something
    NEWS: perl: PATCH: 123: from "Robert Story": did something else

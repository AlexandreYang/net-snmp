***************************************************************************
*
* README.win32
*
***************************************************************************

This guide describes building with Microsoft Visual C++ and
with the gcc compiler from Cygwin.  As developers build with
other Win32 environments, their notes will be included here.

The remainder of this guide has the following sections :

Status as of 30-Jan-2004 for Win32 platforms
Visual C++ Overview
Installing Platform SDK
Building with MS VC++
Building with OpenSSL with MS VC++
Installing from MS VC++ build
Extending the Agent with MS VC++
How to Register Net-SNMP Agent as a Windows service
Building with Cygwin
Notes on SET support for WIN32 ports
Acknowledgements


***************************************************************************
*
* Status as of 30-Jan-2004 for Win32 platforms
*
***************************************************************************

All applications build with MS VC++, gcc under Cygwin, and gcc under MinGW.

  -  All of the applications work
     (snmpwalk, snmpget, snmpset, snmptrap, etc...)
  -  The system, snmp, ip, tcp, udp, icmp mibgroups function
         (when agent is built using the snmpdsdk project).
  -  The Net-SNMP agent runs as an AgentX master agent or as subagent
         when the callback transport patch is compiled.
  -  smux is working
  -  The target, notification, disman/mte groups compile but are not tested
         
  -  Extending the agent to support enterprise-specific MIBs works
  -  Running the agent on a non-standard UDP or TCP port works
  -  Snmpd can be registered as a Windows NT/2000 service
         (the procedure is included later in this document).
  -  Snmptrapd cannot register as a Windows service.


The next subsection relates to items that are built using Visual Studio

  -  all Visual Studio project (.dsp) files are cleaned, and 
     a) generate code to use Multi-Threaded DLL (/MD) "C" run-time library.
     b) provide the same preprocesor defines (WIN32,_CONSOLE,_MBCS)
     c) remove unnecessary references to GDI, ODBC, and "C" libraries.
     d) Debug versions build source browsing and debugging information.
     e) provide consistent include search paths

  -  Building netsnmp.dll is not supported, as the DLL does not
	prevent corruption of dynamically changing shared data.

  -  All Debug and Release targets linked with libsnmp project targets
        build without errors, and are fully functional.


***************************************************************************
*
* Interactions with Other Vendor's Products
*
***************************************************************************

  -  Running the Net-SNMP Agent or trap receiver on Windows 95 or Win3.1
         is not supported.

  -  The Net-SNMP agent and trap receiver will fail to start
	if either cannot bind to their connect port
	 (161 for agent, 162 for trap receiver).

  -  Running the Net-SNMP agent instead of the MS supplied one "works"
         (at the loss of most of the functionality).

  -  The Net-SNMP agent does not use the MS SNMP.dll,
         therefore it cannot run as an extensible part of the MS agent.

  -  Snmptrapd does not "share" nor multiplex traps with SNMPTRAP.EXE,
         a program that is available from Microsoft or ACE#COMM.


***************************************************************************
*
* Visual C++ Overview
*
***************************************************************************

There are two Win32 workspaces ('win32.dsw' and 'win32sdk.dsw'), containing
more or less the same set of projects.  The former is for developers who
have not installed the Platform SDK from Microsoft's MSDN SDK Update site.
The latter is for those who have.   This only affects building the agent.

There is one core development library ('libsnmp'),
together with a number of utility projects for the individual executable
commands ('snmpget', 'snmpwalk', etc...).  All of these projects require
the .lib created by the libsnmp project.

The agent requires the core library plus the other three
library projects ('libagent', libhelpers' and either 'netsnmpmibs' or
'netsnmpmibssdk' depending on which workspace is being used) together
with the main agent project (either 'snmpd' or 'snmpdsdk').

The final application project is the trap handler 'snmptrapd'.  This also
requires the agent libraries ('libagent', 'libhelpers' and 'netsnmpmibs')
as well as the core development library.


***************************************************************************
*
* Installing Platform SDK
*
***************************************************************************

The core elements of the mibII group of the agent, use the "IP Helper API"
which is part of Microsoft's "Core Platform SDK".  This is typically
not installed by default, but can be downloaded from
		http://msdn.microsoft.com/downloads/
as follows:

    -  Using Internet Explorer (Netscape won't work), go to the above URL
    -  From the menu at the left, select
		"Software Development Kits"
		"Platform SDK"
    -  From the new window that appears, select "Core SDK".
    -  The full Core SDK is ~240Mb (expanding to ~560Mb on installation).
       In fact, the only portion that's required is the basic "Build
       Environment" (36Mb) So it's safe to deselect the pre-release version,
       documentation, sample code and 64-bit elements.

    -  Once this package has installed, from the Start Menu run
	"Register PSDK directories with Visual Studio"

See the Building section below in order to build the agent.


***************************************************************************
*
* Building with MS VC++
*
***************************************************************************

The win32 directory contains two Microsoft VC++ workspaces and project
files to build static versions of the applications.

Both VC++ 6.0 and 7.0 have been tested.  Building with earlier Microsoft
compiler versions has been dropped and is no longer supported.

A manually generated net-snmp-config.h file has been provided for use with
the win32 build since the basic win32 environment does not support autoconf.

Note: the compiled in MIB path is \usr\mibs which may be changed by
editing win32/net-snmp/net-snmp-config.h.  Note that the install
instructions below should be adjusted when changes are made to paths.

Note: All paths must use forward slashes, even if drive letters are used.  
For example: c:/Program Files/net-snmp/mibs.  If a drive letter is not 
specified, the current drive letter is assumed.

To build the libraries and applications, open the workspace file
"win32\win32.dsw" from VC++.

Note there is a Debug version and Release version for each subproject.

The projects are arranged so that ALL of the usable products,
the .exe files, are written to the win32\bin
directory.  The win32\lib directory is used only to build the
the files in the win32\bin directory.  Once building is completed,
there is no further use for the files in the win32\lib directory.

The Debug product .exe files have "_d" appended to the basename
of the applications.  This is so the Debug and Release versions
of an application can be built and tested separately.


Project Settings
----------------

Linking in an snmplib built to use the Multithreaded DLL
runtime library to an application configured for the Debug
Multithreaded DLL runtime library results in a link error along the
lines of 'defaultlib "MSVCRT" conflicts with use of other libs'.   If
you receive a similar message, check that the projects settings
between library and application match up.

To successfully build your existing project with Net-SNMP libraries,
change the project settings FOR YOUR APPLICATION ONLY as follows:

   1. In the Link section, Select "Additional Libraries".
        Add netsnmp.lib for Release version.
        Add netsnmp_d.lib for Debug version.

   2. Remove all references to these libraries:
        libsnmp*.lib msvcrt*.lib libc*.lib oldnames.lib

   3. In the C++ section, Select "Code Generation".
        For Release, select /MD or "MultiThreaded DLL".
        For Debug, select /MDd or "Debug MultiThreaded DLL".

   4. Make sure "Ignore all default libraries" is NOT SET.

   5. Make sure "_MBCS" is included in your pre-processor defines.



Debug Information
-----------------

Note that VC++ 6.0 has options for debugging information -
the 'Program Database'.  This option is set in the Project settings,
C/C++ tab, 'General' category, and is turned on by default during the
conversion of the project files. This option is not for use with a
library, as it embeds debug information into the library that
references an external file that will not be available to the linking
application. If you get an error message along the lines of
'debugging information not available in file vc60.pdb, make sure the
library debug option is set to 'Program Database' or "/Zi".


Building
--------

Because snmptrapd builds only using win32.dsw, and since the library
projects are exactly the same from the workspaces' point of view,
start by building from the win32.dsw workspace.

1. Open win32.dsw.  Click "Build->Batch Build..."  
2. Set Release and/or Debug in 'Project configurations' to suit.
3. Click "ReBuild All".
4. When building is done, View the Output window, clip and
   save to a text file if there is some information to share.
5. Click "File->Close Workspace".


Skip the next five steps if you did not install the Platform SDK.

6. Open win32sdk.dsw.  Click "Build->Batch Build..."
7. Set Release and/or Debug in 'Project configurations' to suit.
8. Set netsnmpmibssdk, snmpdsdk, then Click "Build".
9. When building is done, View the Output window, clip and
   save to a text file if there is some information to share.
10.Click "File->Close Workspace".


***************************************************************************
*
* Building with OpenSSL with MS VC++
*
***************************************************************************

OpenSSL is required to support the encryption capabilities in SNMPv3
(and will also support MD5 authentication). The win32 version of OpenSSL
can be built from the source at:

ftp://ftp.openssl.org/source/

Follow the instructions for building on win32 in that package. if you do
not have the M$ assembler installed (MASM) you can get a free one(NASM)
from:

http://www.kernel.org/pub/software/devel/nasm

You will also need to change the win32/net-snmp/net-snmp-config.h file from

---
/* define if you are using the internal MD5 code */
#define USE_INTERNAL_MD5 1
---
to
---
/* define if you are using the internal MD5 code */
#undef USE_INTERNAL_MD5

/* define if you are using OpenSSL */
#define USE_OPENSSL 1
---

Now edit the VC++ Project settings for the applications only.
Click Project->Settings.  Highlight only the names of the application projects.
Add the next line to the 'Object/Library Modules' list for Debug and Release
versions

libeay32.lib


***************************************************************************
*
* Installing from MS VC++ build
*
***************************************************************************

There is a basic installation, which installs the programs and MIB files only.
The development installation includes library files and header files for
other sources to compile against the Net-SNMP library, but the programs
do not require library files nor include header files to function correctly.


Create these subdirectories on the root directory of the
volume you wish to hold the UC-Davis SNMP applications :

  usr, usr\bin, usr\mibs, usr\lib, usr\include\ucd-snmp

Copy mibs\*.txt to usr\mibs
Copy win32\bin\*.* to usr\bin
Copy win32\lib\*.* to usr\lib
Copy include\ucd-snmp\*.* to usr\include\ucd-snmp  (recursively)
Copy include\net-snmp\*.* to usr\include\net-snmp  (recursively)
Copy snmplib\*.h to usr\include\ucd-snmp
Copy win32\net-snmp\*.*   to usr\include\net-snmp  (recursively)
Copy win32\config.h to usr\include\ucd-snmp\ucd-snmp-config.h

Change usr\include\net-snmp\net-snmp-config.h and remove the typedef
definition for mode_t (if there is one).

if using OpenSSL
Copy libeay32.dll to usr\bin
If using OpenSSL for development
Copy libeay32.lib to usr\lib

If you do not want to install the debug versions, type :
del \usr\bin\*_d.exe
del \usr\bin\*_d.dll


Installing is complete.  You may want to create a compressed
archive of the \usr hierarchy.


***************************************************************************
*
* Extending the Agent with MS VC++
*
***************************************************************************

Assuming that the MIB compiler generated the my.h and my.c files for the
custom MIB "my", the following changes are required to extend the agent
using VC++:

   - Add the my.h and my.c files to your 'netsnmpmibs' project in VC++.
   - Next edit the '<sourcedir>\win32\mib_module_includes.h' file to
     add an include to your .h file.

        #include "mibgroup/my.h"

   - Next edit the '<sourcedir>\win32\mib_module_inits.h' file to add
     code to call your initialize function.

        if (should_init("my")) init_my();


That's all that is needed. Now go ahead and compile the 'netsnmpmibs'
and 'snmpd' project. And things should work just fine.


***************************************************************************
*
* How to Register Net-SNMP Agent as a Windows service
*
***************************************************************************

 1. If the Net-SNMP Agent is already registered, the existing program
    must first be unregistered.  If you don't know the program's location,
    either search for it with Windows Explorer, or invoke REGEDIT and
    search the key using "Net-SNMP". Once it is found, Cd to the
    program's directory, then type:
	.\snmpd -unregister

 2. View win32\net-snmp\net-snmp-config.h to know these directories:
        MIB directory (DEFAULT_MIBDIRS),
    "config" directory (SNMPCONFPATH), and
    "engine" directory PERSISTENT_DIRECTORY).
    These values take precedence when comprehending the on-line documentation.
    For help remembering which configuration settings can be made, or
    into which file a particular setting belongs, print then read the manual:
    	.\snmpd -H > snmp.settings.txt

 3. Copy "snmpd" to the "install" directory.
    The configuration files snmpd.conf, and possibly snmp.conf, must
    be properly formed and copied to the "config" directory.

 4. Go to the "install" directory.
    Invoke ".\snmpd -f -Le" , with no other command line parameters.

 5. Test that the agent runs correctly from local and from remote
    command generators.  Snmpwalk, snmpbulkwalk, and snmpget
    are good for testing "snmpd".  When tests are completed,
    stop the "snmpd" program.

 6. Repeat steps 3, 4 and 5, until "snmpd" works as you intend.
    Once the agent is working, Cd to the "install" directory, and type:
	.\snmpd -register

 7. Start the service:   net start "Net-SNMP Agent"

 8. Run the tests you ran in step 5.  You should get similar results
    as you did when you ran those tests.  If you did not, start over
    from step 1.

 9. Save your work, and reboot the system.  After the system restarts,
    and you've logged in, run the tests you ran in steps 5 and 8.
    The results should still compare favorably.



***************************************************************************
*
* Building with Cygwin
*
***************************************************************************

An alternate way to build Net-SNMP for win32 is to use Cygnus's cygwin32
environment.  Information on the Cygnus cygwin32 environment is available
on the web at: http://sources.redhat.com/cygwin/.

Cygwin allows you to compile almost the complete agent and applications.
The following configure options creates a working set of programs:

./configure --with-mib-modules="host agentx smux examples/example" \
 	--with-out-mib-modules=host/hr_network \
	--with-libs="-liphlpapi"

This has been tested for Windows 98 and Windows NT 4.0.  In order for
the process part of the host resources MIB to work under NT you will need
to get hold of the PSAPI.DLL. This available under the download section
of www.microsoft.com. The DLL is included with Windows 2000 and XP,
and is also part of the VC++ distribution.  The IPHLPAPI library is
part of the "Microsoft Platform SDK", which is also available from
www.microsoft.com.  See above for details.

Earlier releases of Cygwin may need to use the configure flag
	--with-libs="-lregex -libphlpapi"
but this regular expression support has since been incorporated
into the main Cygwin package, and it is no longer necessary to
include it separately.


***************************************************************************
*
* Notes on SET support for WIN32 ports
*
***************************************************************************

Requirements:

  Windows NT/2000 or later: Requires Windows NT 4.0 SP4 or later. 
  Windows 95/98/Me: Requires Windows 98 or later. 

Windows support for SET on following groups:

interfaces:
----------
ifAdminStatus is read-write. Status can be set with either 'up' or
'down'. (IE, 'testing' status is not supported.)


ip group:
--------
Scalar objects: 
ipForwarding:Currently windows supports only ON->OFF (IE,
enable->disable). For any other value, it returns with failure.

ipDefaultTTL: Supports value greater than or equal to 0. 

Table objects:
-------------
1. ipRouteTable:
   ------------
route_write.c implements this.

ipRouteDest: Setting this value, updates row with new ipRouteDest and all other
             entries will be same as old row. 
    EX:
    Consider there is an entry with ipRouteDest = 10.0.0.20
    Request, snmpset localhost private ip.ipRouteTable.ipRouteEntry.ipRouteDest.10.0.0.20 -a 10.0.0.16
    Updates that row with ipRouteDest = 10.0.0.16

ipRouteIfIndex:Write supported.

ipRouteMetric1: Supports value greater than or equal to -1

ipRouteMetric2, ipRouteMetric3, ipRouteMetric4, ipRouteMetric5: Even though
		call returns with success, Windows doesn't change these (as
		these are not used in Windows)

ipRouteNextHop: Write supported.

ipRouteType: Write Supported. If value is 2, IE 'invalid', it deletes the entry.

ipRouteAge: Whenever any row is updated this will be automatically reset.

ipRouteMask: Write Supported.

Creation of ipRouteTable row:
-----------------------------
snmpset request for non existent OID with ipRouteIfIndex, ipRouteMetric1, 
ipRouteNextHop and ipRouteMask varbinds, creates a row.

snmpset with create option is not supported, as row creation requires 
ipRouteIfIndex, ipRouteMetric1, ipRouteNextHop and ipRouteMask  in a single 
request.

Example to create a row:
-----------------------
Consider there is no entry for 10.0.0.18

snmpset localhost private ip.ipRouteTable.ipRouteEntry.ipRouteIfIndex.10.0.0.18 i 2 4.21.1.ipRouteMask.10.0.0.18 a 255.255.255.255 4.21.1.ipRouteNextHop.10.0.0.0 a 10.0.0.0 4.21.1.ipRouteMetric1.10.0.0.18 i 1

If ipRouteIfIndex is valid then creates row with:
ipRouteIfIndex = 2
ipRouteMask = 255.255.255.255
ipRouteNextHop = 10.0.0.0
ipRouteMetric1 = 1

2. ipNetToMediaTable:
--------------------
ipNetToMediaIfIndex: write supported
ipNetToMediaPhysAddress: write supported
ipNetToMediaNetAddress: write supported
ipNetToMediaType: write supported, setting with value 2, deletes the row.

Creation of row:
--------------------
snmpset request for non existent OID with ipNetToMediaPhysAddress varbind
creates a row.

snmpset with create option is not supported, as row creation requires 
ipNetToMediaPhysAddress in a request 
request.

Example to create a row:
-----------------------
Consider there is no entry for 10.0.0.32

snmpset localhost private ip.ipNetToMediaTable.ipNetToMediaEntry.ipNetToMediaPhysAddress.2.10.0.0.32 x efcd12130103

If ipNetToMediaIfIndex is valid then creates row with:
ipNetToMediaIfIndex = 2
ipNetToMediaPhysAddress = ef:cd:12:12:01:03
ipNetToMediaNetAddress = 10.0.0.32
ipNetToMediaType = 4

TCP:
---
tcpConnState of tcpConnTable is writable and the only value which may
be set by a management station is deleteTCB(12)



***************************************************************************
*
* Acknowledgements
*
***************************************************************************

These people are known to have contributed to one or more of
the Win32 platform ports.  If you have, and your name is not here,
please accept our apologies, and tell us so we can add your name.

David Perkins, Joe Marzot, Wes Hardaker, Niels Baggesen, Dave Shield,
Robert Story, Suvrit Sra, Mike Slifcak, Latha Prabhu, Nikolai Devereaux,
Alex Burger, Bernhard Penz, and Andy Smith.


#!/usr/bin/perl

use Getopt::Long;
use Data::Dumper;
use strict;

########################################
# Globals and Command Line options

my %opts = ('g' => 'default',
	    'd' => 'fulltests');
GetOptions(\%opts, "v", "h", "q", "g=s", "debug") || usage();
usage() if ($opts{'h'});

# Build the harness object
my %args = (
	    verbosity => ($opts{'v'} ? 1 : 0),
	    exec => \&decide_exec,
	    failures => ($opts{'q'} ? 0 : 1),
	    errors => ($opts{'q'} ? 0 : 1),
	   );

# create the testing harness infrastructure
use TAP::Harness;
my $harness = TAP::Harness->new(\%args);

########################################
# gather the tests

my @tests = gather_tests($opts{'g'});

########################################
# build any needed tests

DEBUG("Building tests:\n"); 

@tests = build_tests(@tests);
@tests = rename_tests(@tests);

########################################
# run the tests

DEBUG("Running tests:\n"); 
DEBUG("-" x 78, "\n");

$harness->runtests(@tests);

########################################
# decides how we should execute a test
#
sub decide_exec {
    my ( $harness, $test_file ) = @_;
    if ($test_file =~ /c$/) {
	return [$test_file];
    }
    return undef;
}

sub gather_tests {
    my ( $groups ) = @_;
    my @groups;

    # figure out the list of groups we need to search through
    if ($groups eq 'all') {
	# find every group we can
	# we exclude:
	#  - things not a directory
	#  - anything with "template" in the name
	@groups =
	  grep { !/(template|support)/ &&
		   -d $_ && s/$opts{'d'}.// } glob("$opts{'d'}/*");
    } else {
	# they specified a comma separated list
	@groups = split(/,\s*/, $groups);
    }
    DEBUG("Checking groups: ", join(", ", @groups), "\n");

    my @tests;
    foreach my $group (@groups) {
	my @files;

	DEBUG("checking group $group\n");

	if (! -d "$opts{'d'}/$group") {
	    ERROR("group '$group' is not a directory under '$opts{'d'}'; ignoring\n");
	    next;
	}

	# push on all files that start with T[NUM]*
	push_or_skip(\@tests, glob("$opts{'d'}/$group/T[0-9]*"));
    }

    return @tests;
}

sub push_or_skip {
    my ($array, @files) = @_;
    foreach my $file (@files) {
	next if ($file =~ /.(bak|old|orig|rej)$/);
	next if ($file =~ /~$/);
	DEBUG("  Adding file $file\n");
	push @$array, $file;
    }
}

# rename all the tests to remove the top subdir to help readability
sub rename_tests {
    my (@tests) = @_;
    my @newtests;

    # yes, I could have used map.  But I didn't.
    foreach my $file (@tests) {
	my $title = "$file";
	$title =~ s/$opts{'d'}.//;
	push @newtests, [$file, $title];
    }
    return @newtests;
}

# called to possibly manipluate the list of tests to run by building some
sub build_tests {
    my (@tests) = @_;
    my @newtests;

    foreach my $test (@tests) {
	my $title;
	
	my $built = build_test($test);
	if (ref($built) eq 'ARRAY') {
	    push @newtests, @$built;
	} else {
	    push @newtests, $built;
	}
    }
    return @newtests;
}

# called to build a test from a registerd builder
sub build_test {
    my ($testfile) = @_;

    # choices:
    # 1) we have a registered subroutine to build an extension from
    # 2) we have a BUILD_TYPE file in the same directory
    # 3) we have a BUILD_TYPE file in some other directory (first wins)
    # 4) we assume it's fine as is

    # 1) we have a registered subroutine to build an extension from
    # 2) we have a BUILD_TYPE file in the same directory
    # 3) we have a BUILD_TYPE file in some other directory (first wins)
    # XXX

    # 4) we assume it's fine as is
    return $testfile;
}

# usage output
sub usage {
    print "$0 [-v] [-q] [-g GROUP]\n";
    print "  -v\t\tRuns in verbose mode; dumping all test output\n";
    print "  -q\t\tRuns in quieter mode; dumps less test output\n";
    print "  -g GROUP\tRuns the group of specified tests (default = 'default')\n";
    print "\t\t(use 'all' to run all tests)\n";
    print "  -h\t\tThis help output\n";
    print "  --debug\t\tDebugging output\n";
    exit;
}

sub DEBUG {
    return if (!$opts{'debug'});
    print @_;
}

sub ERROR {
    print STDERR "Error:", @_;
}

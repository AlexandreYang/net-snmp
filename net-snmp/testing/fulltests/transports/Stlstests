#!/bin/sh

# this file contains tests common to both tls and dtls usages

# start the agent up
FLAGS="-On $SNMP_FLAGS $SNMP_TRANSPORT_SPEC:$SNMP_TEST_DEST$SNMP_SNMPD_PORT"

STARTAGENT

######################################################################
# perform more steps of configuration that should occur *after* the
# agent has started in order to prevent it from having seen these
# files ahead of time.

# this user's fingerprint should not be recognized 
CAPTURE $NSCERT gencert -t unknownuser --san email:unknownuser@example.com  $NSCERTARGS
UNKNOWNUSER=`$NSCERT showcerts --fingerprint unknownuser $NSCERTARGS | grep Finger | sed 's/.*=//'`
CHECKVALUEISNT "$UNMAPPEDFP" "" "generated fingerprint for unknownuser certificate"

# this user's fingerprint should not be directly recognized, but it's
# CA should.

# user 9: CA signed cert
CAPTURE $NSCERT gencert -D -t unknowncauser --cn unknowncauser@net-snmp.org --email unknowncauser@net-snmp.org  --ca ca-net-snmp.org --san email:user8@test.net-snmp.org $NSCERTARGS
UNKNOWNCAUSERFP=`$NSCERT showcerts --fingerprint unknowncauser $NSCERTARGS | grep Finger | sed 's/.*=//'`
CHECKVALUEISNT "$UNKNOWNCAUSERFP" "" "generated fingerprint for unknowncauser certificate"

######################################################################
# Run the actual list of tests
#

# using user 1 - a common name mapped certificate
CAPTURE "snmpget $FLAGS .1.3.6.1.2.1.1.3.0"

CHECK       ".1.3.6.1.2.1.1.3.0 = Timeticks:"

# using user 2 - a common name mapped certificate with a direct -T FP request
CAPTURE "snmpget -T our_identity=$OTHERUSERFP $FLAGS .1.3.6.1.2.1.1.4.0"

CHECK              ".1.3.6.1.2.1.1.4.0 = STRING:"
CHECKAGENTCOUNT 2  "otheruser"

# using user 2, specifying the file name instead of the fingerprint
CAPTURE "snmpget -T our_identity=otheruser $FLAGS .1.3.6.1.2.1.1.4.0"

CHECK              ".1.3.6.1.2.1.1.4.0 = STRING:"
CHECKAGENTCOUNT 4  "otheruser"

# using user 3 - an invalid certificate (mapped but not authorized)
CAPTURE "snmpget  -T our_identity=$INVALIDUSERFP $FLAGS .1.3.6.1.2.1.1.3.0"

CHECK "authorizationError"

# using user 4 - an unmapped certificate
CAPTURE "snmpget -T our_identity=$UNMAPPEDFP $FLAGS .1.3.6.1.2.1.1.3.0"

CHECK "failed rfc5343"

# Check *their* certificate with a different one than expected; should fail
CAPTURE "snmpget -r 0 -T our_identity=$OTHERUSERFP -T their_identity=$OTHERUSERFP $FLAGS .1.3.6.1.2.1.1.3.0"

CHECK "failed to verify ssl certificate"

# using user 5 - a completely remapped certificate (direct specified secname)
CAPTURE "snmpget -T our_identity=$MAPPEDUSERFP $FLAGS .1.3.6.1.2.1.1.5.0"

CHECK              ".1.3.6.1.2.1.1.5.0 = STRING:"
CHECKAGENTCOUNT 2  "aftermapping"

# using user 6 - a subjectAltName=email certificate mapping
CAPTURE "snmpget -T our_identity=$EMAILUSERFP $FLAGS .1.3.6.1.2.1.1.6.0"

CHECK              ".1.3.6.1.2.1.1.6.0 = "
CHECKAGENTCOUNT 2 foobaruser@example.com

# using user 7 - a subjectAltName=dns certificate mapping
CAPTURE "snmpget -T our_identity=$DNSUSERFP $FLAGS .1.3.6.1.2.1.1.3.0"

CHECK              ".1.3.6.1.2.1.1.3.0 = Timeticks"
CHECKAGENTCOUNT 2 foobar.example.com

# using user 8 - a subjectAltName=ipv4 certificate mapping
CAPTURE "snmpget -T our_identity=$IPUSERFP $FLAGS .1.3.6.1.2.1.1.4.0"

CHECK              ".1.3.6.1.2.1.1.4.0 = STRING:"
CHECKAGENTCOUNT 2 127.0.0.1

# using user 9 - a CA signed certificate
CAPTURE "snmpget -T our_identity=$CAUSERFP $FLAGS .1.3.6.1.2.1.1.5.0"
CHECK              ".1.3.6.1.2.1.1.5.0 = STRING:"

# using user unknown - the server will not have seen this fingerprint at all
CAPTURE "snmpget -T our_identity=$UNKNOWNUSER $FLAGS .1.3.6.1.2.1.1.6.0"

# different types of failure messaages for tls/dtls...
if [ $SNMP_TRANSPORT_SPEC = dtlsudp ]; then
    CHECK              "failed rfc5343 contextEngineID probing"
    CHECKAGENTCOUNT  1 "TLS Error: no certificate returned"
else
    CHECK              "failed to ssl_connect"
    CHECKAGENTCOUNT  1 "Failed SSL_accept"
fi

# using the user without a known fingerprint but with a known CA
CAPTURE "snmpget -T our_identity=$UNKNOWNCAUSERFP $FLAGS .1.3.6.1.2.1.1.6.0"
CHECK              ".1.3.6.1.2.1.1.6.0 = "

STOPAGENT

FINISHED

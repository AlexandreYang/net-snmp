.TH "Net-SNMP Agent handler and extensibility API" 3 "17 Feb 2004" "net-snmp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Net-SNMP Agent handler and extensibility API \- The basic theory goes something like this: In the past, with the original mib module api (which derived from the original CMU SNMP code) the underlying mib modules were passed very little information (only the truly most basic information about a request). 
More...
.SS "Modules"

.in +1c
.ti -1c
.RI "\fButility_handlers: simplify request processing\fP"
.br
.RI "\fIA group of handlers intended to simplify certain aspects of processing a request for a MIB object.\fP"
.PP
.in +1c

.ti -1c
.RI "\fBleaf_handlers: process individual leaf objects\fP"
.br
.RI "\fIA group of handlers to implement individual leaf objects and instances (both scalar objects, and individual objects and instances within a table).\fP"
.PP
.in +1c

.ti -1c
.RI "\fBbaby_steps: calls your handler in baby_steps for set processing.\fP"
.br
.ti -1c
.RI "\fBold_api: Calls mib module code written in the old style of code.\fP"
.br
.RI "\fIThis is a backwards compatilibity module that allows code written in the old API to be run under the new handler based architecture.\fP"
.PP
.in +1c

.ti -1c
.RI "\fBstash_cache: automatically caches data for certain handlers.\fP"
.br
.RI "\fIThis handler caches data in an optimized way which may aleviate the need for the lower level handlers to perform as much optimization.\fP"
.PP
.in +1c

.ti -1c
.RI "\fBtable: Helps you implement a table.\fP"
.br
.RI "\fIThis handler helps you implement a table by doing some of the processing for you.\fP"
.PP

.in -1c
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBnetsnmp_delegated_cache_s\fP"
.br
.ti -1c
.RI "struct \fBnetsnmp_handler_registration_s\fP"
.br
.RI "\fIRoot registration info.\fP"
.ti -1c
.RI "struct \fBnetsnmp_handler_registration_s\fP"
.br
.RI "\fIRoot registration info.\fP"
.ti -1c
.RI "struct \fBnetsnmp_mib_handler_s\fP"
.br
.RI "\fIthe mib handler structure to be registered\fP"
.ti -1c
.RI "struct \fBnetsnmp_mib_handler_s\fP"
.br
.RI "\fIthe mib handler structure to be registered\fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBnetsnmp_mib_handler_s\fP \fBnetsnmp_mib_handler\fP"
.br
.RI "\fITypedefs the \fBnetsnmp_mib_handler_s\fP struct into netsnmp_mib_handler.\fP"
.ti -1c
.RI "typedef \fBnetsnmp_handler_registration_s\fP \fBnetsnmp_handler_registration\fP"
.br
.RI "\fITypedefs the \fBnetsnmp_handler_registration_s\fP struct into netsnmp_handler_registration.\fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBnetsnmp_mib_handler\fP * \fBnetsnmp_create_handler\fP (const char *name, Netsnmp_Node_Handler *handler_access_method)"
.br
.RI "\fIcreates a netsnmp_mib_handler structure given a name and a access method.\fP"
.ti -1c
.RI "\fBnetsnmp_handler_registration\fP * \fBnetsnmp_create_handler_registration\fP (const char *name, Netsnmp_Node_Handler *handler_access_method, oid *reg_oid, size_t reg_oid_len, int modes)"
.br
.RI "\fIcreates a handler registration structure given a name, a access_method function, a registration location oid and the modes the handler supports.\fP"
.ti -1c
.RI "int \fBnetsnmp_register_handler\fP (\fBnetsnmp_handler_registration\fP *reginfo)"
.br
.RI "\fIregister a handler, as defined by the netsnmp_handler_registration pointer.\fP"
.ti -1c
.RI "int \fBnetsnmp_register_handler_nocallback\fP (\fBnetsnmp_handler_registration\fP *reginfo)"
.br
.RI "\fIregister a handler, as defined by the netsnmp_handler_registration pointer.\fP"
.ti -1c
.RI "int \fBnetsnmp_inject_handler_before\fP (\fBnetsnmp_handler_registration\fP *reginfo, \fBnetsnmp_mib_handler\fP *handler, const char *before_what)"
.br
.RI "\fIinject a new handler into the calling chain of the handlers definedy by the netsnmp_handler_registration pointer.\fP"
.ti -1c
.RI "int \fBnetsnmp_inject_handler\fP (\fBnetsnmp_handler_registration\fP *reginfo, \fBnetsnmp_mib_handler\fP *handler)"
.br
.RI "\fIinject a new handler into the calling chain of the handlers definedy by the netsnmp_handler_registration pointer.\fP"
.ti -1c
.RI "NETSNMP_INLINE int \fBnetsnmp_call_handler\fP (\fBnetsnmp_mib_handler\fP *next_handler, \fBnetsnmp_handler_registration\fP *reginfo, netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests)"
.br
.RI "\fIcalls a handler with with appropriate NULL checking of arguments, etc.\fP"
.ti -1c
.RI "NETSNMP_INLINE int \fBnetsnmp_call_next_handler\fP (\fBnetsnmp_mib_handler\fP *current, \fBnetsnmp_handler_registration\fP *reginfo, netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests)"
.br
.RI "\fIcalls the next handler in the chain after the current one with with appropriate NULL checking, etc.\fP"
.ti -1c
.RI "NETSNMP_INLINE int \fBnetsnmp_call_next_handler_one_request\fP (\fBnetsnmp_mib_handler\fP *current, \fBnetsnmp_handler_registration\fP *reginfo, netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests)"
.br
.RI "\fIcalls the next handler in the chain after the current one with with appropriate NULL checking, etc.\fP"
.ti -1c
.RI "void \fBnetsnmp_handler_free\fP (\fBnetsnmp_mib_handler\fP *handler)"
.br
.RI "\fIfree's the resourceses associated with a given handler\fP"
.ti -1c
.RI "\fBnetsnmp_mib_handler\fP * \fBnetsnmp_handler_dup\fP (\fBnetsnmp_mib_handler\fP *handler)"
.br
.RI "\fIdulpicates a handler\fP"
.ti -1c
.RI "void \fBnetsnmp_handler_registration_free\fP (\fBnetsnmp_handler_registration\fP *reginfo)"
.br
.RI "\fIfree the resources associated with a handler registration object\fP"
.ti -1c
.RI "\fBnetsnmp_handler_registration\fP * \fBnetsnmp_handler_registration_dup\fP (\fBnetsnmp_handler_registration\fP *reginfo)"
.br
.RI "\fIduplicates the handler registration object\fP"
.ti -1c
.RI "NETSNMP_INLINE netsnmp_delegated_cache * \fBnetsnmp_create_delegated_cache\fP (\fBnetsnmp_mib_handler\fP *handler, \fBnetsnmp_handler_registration\fP *reginfo, netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests, void *localinfo)"
.br
.RI "\fIcreates a cache of information which can be saved for future reference.\fP"
.ti -1c
.RI "NETSNMP_INLINE netsnmp_delegated_cache * \fBnetsnmp_handler_check_cache\fP (netsnmp_delegated_cache *dcache)"
.br
.RI "\fIcheck's a given cache and returns it if it is still valid (ie, the agent still considers it to be an outstanding request.\fP"
.ti -1c
.RI "NETSNMP_INLINE void \fBnetsnmp_free_delegated_cache\fP (netsnmp_delegated_cache *dcache)"
.br
.RI "\fIfrees a cache once you're finished using it\fP"
.ti -1c
.RI "void \fBnetsnmp_handler_mark_requests_as_delegated\fP (netsnmp_request_info *requests, int isdelegated)"
.br
.RI "\fImarks a list of requests as delegated (or not if isdelegaded = 0)\fP"
.ti -1c
.RI "NETSNMP_INLINE void \fBnetsnmp_request_add_list_data\fP (netsnmp_request_info *request, netsnmp_data_list *node)"
.br
.RI "\fIadd data to a request that can be extracted later by submodules\fP"
.ti -1c
.RI "NETSNMP_INLINE void * \fBnetsnmp_request_get_list_data\fP (netsnmp_request_info *request, const char *name)"
.br
.RI "\fIextract data from a request that was added previously by a parent module\fP"
.ti -1c
.RI "NETSNMP_INLINE void \fBnetsnmp_free_request_data_set\fP (netsnmp_request_info *request)"
.br
.RI "\fIFree the extra data stored in a request.\fP"
.ti -1c
.RI "NETSNMP_INLINE void \fBnetsnmp_free_request_data_sets\fP (netsnmp_request_info *request)"
.br
.RI "\fIFree the extra data stored in a bunch of requests (all data in the chain).\fP"
.ti -1c
.RI "\fBnetsnmp_mib_handler\fP * \fBnetsnmp_find_handler_by_name\fP (\fBnetsnmp_handler_registration\fP *reginfo, const char *name)"
.br
.RI "\fIReturns a handler from a chain based on the name.\fP"
.ti -1c
.RI "void * \fBnetsnmp_find_handler_data_by_name\fP (\fBnetsnmp_handler_registration\fP *reginfo, const char *name)"
.br
.RI "\fIReturns a handler's void * pointer from a chain based on the name.\fP"
.ti -1c
.RI "\fBnetsnmp_mib_handler\fP * \fBclone_handler\fP (\fBnetsnmp_mib_handler\fP *it)"
.br
.RI "\fIclones a mib handler (it's name and access methods onlys; not myvoid)\fP"
.ti -1c
.RI "void \fBnetsnmp_register_handler_by_name\fP (const char *name, \fBnetsnmp_mib_handler\fP *handler)"
.br
.RI "\fIregisters a given handler by name so that it can be found easily later.\fP"
.ti -1c
.RI "void \fBnetsnmp_clear_handler_list\fP (void)"
.br
.RI "\fIclears the entire handler-registration list\fP"
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
The basic theory goes something like this: In the past, with the original mib module api (which derived from the original CMU SNMP code) the underlying mib modules were passed very little information (only the truly most basic information about a request).
.PP
This worked well at the time but in todays world of subagents, device instrumentation, low resource consumption, etc, it just isn't flexible enough. 'handlers' are here to fix all that.
.PP
With the rewrite of the agent internals for the net-snmp 5.0 release, we introduce a modular calling scheme that allows agent modules to be written in a very flexible manner, and more importantly allows reuse of code in a decent way (and without the memory and speed overheads of OO languages like C++).
.PP
Functionally, the notion of what a handler does is the same as the older api: A handler is \fBcreated\fP and then \fBregistered\fP with the main agent at a given OID in the OID tree and gets called any time a request is made that it should respond to. You probably should use one of the convenience helpers instead of doing anything else yourself though:
.PP
Most importantly, though, is that the handlers are built on the notion of modularity and reuse. Specifically, rather than do all the really hard work (like parsing table indexes out of an incoming oid request) in each module, the API is designed to make it easy to write 'helper' handlers that merely process some aspect of the request before passing it along to the final handler that returns the real answer. Most people will want to make use of the \fBinstance\fP, \fBtable\fP, \fBtable_iterator\fP, \fBtable_data\fP, or \fBtable_dataset\fP helpers to make their life easier. These 'helpers' interpert important aspects of the request and pass them on to you.
.PP
For instance, the \fBtable\fP helper is designed to hand you a list of extracted index values from an incoming request. THe \fBtable_iterator\fP helper is built on top of the table helper, and is designed to help you iterate through data stored elsewhere (like in a kernel) that is not in OID lexographical order (ie, don't write your own index/oid sorting routine, use this helper instead). The beauty of the 
.SH "TYPEDEF DOCUMENTATION"
.PP 
.SS "struct \fBnetsnmp_handler_registration_s\fP netsnmp_handler_registration"
.PP
Typedefs the \fBnetsnmp_handler_registration_s\fP struct into netsnmp_handler_registration.
.PP
.SS "struct \fBnetsnmp_mib_handler_s\fP netsnmp_mib_handler"
.PP
Typedefs the \fBnetsnmp_mib_handler_s\fP struct into netsnmp_mib_handler.
.PP
.SH "FUNCTION DOCUMENTATION"
.PP 
.SS "\fBnetsnmp_mib_handler\fP* clone_handler (\fBnetsnmp_mib_handler\fP * it)"
.PP
clones a mib handler (it's name and access methods onlys; not myvoid)
.PP
Definition at line 764 of file agent_handler.c.
.PP
References netsnmp_mib_handler_s::access_method, netsnmp_mib_handler_s::handler_name, and netsnmp_create_handler().
.SS "NETSNMP_INLINE int netsnmp_call_handler (\fBnetsnmp_mib_handler\fP * next_handler, \fBnetsnmp_handler_registration\fP * reginfo, netsnmp_agent_request_info * reqinfo, netsnmp_request_info * requests)"
.PP
calls a handler with with appropriate NULL checking of arguments, etc.
.PP
Definition at line 339 of file agent_handler.c.
.PP
References netsnmp_mib_handler_s::access_method, netsnmp_mib_handler_s::handler_name, netsnmp_agent_request_info_s::mode, and snmp_log().
.PP
Referenced by netsnmp_call_next_handler(), netsnmp_call_next_handler_one_request(), and netsnmp_multiplexer_helper_handler().
.SS "NETSNMP_INLINE int netsnmp_call_next_handler (\fBnetsnmp_mib_handler\fP * current, \fBnetsnmp_handler_registration\fP * reginfo, netsnmp_agent_request_info * reqinfo, netsnmp_request_info * requests)"
.PP
calls the next handler in the chain after the current one with with appropriate NULL checking, etc.
.PP
Definition at line 438 of file agent_handler.c.
.PP
References netsnmp_call_handler(), netsnmp_mib_handler_s::next, and snmp_log().
.PP
Referenced by netsnmp_cache_helper_handler(), netsnmp_row_merge_helper_handler(), netsnmp_serialize_helper_handler(), netsnmp_stash_cache_update(), netsnmp_table_data_helper_handler(), netsnmp_table_data_set_helper_handler(), netsnmp_table_iterator_helper_handler(), and table_helper_handler().
.SS "NETSNMP_INLINE int netsnmp_call_next_handler_one_request (\fBnetsnmp_mib_handler\fP * current, \fBnetsnmp_handler_registration\fP * reginfo, netsnmp_agent_request_info * reqinfo, netsnmp_request_info * requests)"
.PP
calls the next handler in the chain after the current one with with appropriate NULL checking, etc.
.PP
Definition at line 456 of file agent_handler.c.
.PP
References netsnmp_call_handler(), netsnmp_mib_handler_s::next, netsnmp_request_info_s::next, and snmp_log().
.SS "void netsnmp_clear_handler_list (void)"
.PP
clears the entire handler-registration list
.PP
Definition at line 792 of file agent_handler.c.
.PP
References netsnmp_free_all_list_data().
.SS "NETSNMP_INLINE netsnmp_delegated_cache* netsnmp_create_delegated_cache (\fBnetsnmp_mib_handler\fP * handler, \fBnetsnmp_handler_registration\fP * reginfo, netsnmp_agent_request_info * reqinfo, netsnmp_request_info * requests, void * localinfo)"
.PP
creates a cache of information which can be saved for future reference.
.PP
Use \fBnetsnmp_handler_check_cache()\fP later to make sure it's still valid before referencing it in the future. 
.PP
\fBExamples: \fP
.in +1c
\fBdelayed_instance.c\fP.
.PP
Definition at line 612 of file agent_handler.c.
.PP
References netsnmp_agent_request_info_s::asp, and SNMP_MALLOC_TYPEDEF.
.SS "\fBnetsnmp_mib_handler\fP* netsnmp_create_handler (const char * name, Netsnmp_Node_Handler * handler_access_method)"
.PP
creates a netsnmp_mib_handler structure given a name and a access method.
.PP
The returned handler should then be \fBregistered.\fP
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIname\fP\fP
is the handler name and is copied then assigned to netsnmp_mib_handler->handler_name
.TP
\fB\fIhandler_access_method\fP\fP
is a function pointer used as the access method for this handler registration instance for whatever required needs.
.PP
\fBReturns: \fP
.in +1c
a pointer to a populated netsnmp_mib_handler struct to be registered
.PP
\fBSee also: \fP
.in +1c
\fBnetsnmp_create_handler_registration()\fP , \fBnetsnmp_register_handler()\fP 
.PP
Definition at line 101 of file agent_handler.c.
.PP
References netsnmp_mib_handler_s::access_method, netsnmp_mib_handler_s::handler_name, and SNMP_MALLOC_TYPEDEF.
.PP
Referenced by clone_handler(), get_old_api_handler(), netsnmp_create_handler_registration(), netsnmp_get_baby_steps_handler(), netsnmp_get_bulk_to_next_handler(), netsnmp_get_cache_handler(), netsnmp_get_debug_handler(), netsnmp_get_instance_handler(), netsnmp_get_mode_end_call_handler(), netsnmp_get_multiplexer_handler(), netsnmp_get_read_only_handler(), netsnmp_get_row_merge_handler(), netsnmp_get_scalar_handler(), netsnmp_get_serialize_handler(), netsnmp_get_stash_cache_handler(), netsnmp_get_table_data_handler(), netsnmp_get_table_data_set_handler(), netsnmp_get_table_handler(), and netsnmp_get_table_iterator_handler().
.SS "\fBnetsnmp_handler_registration\fP* netsnmp_create_handler_registration (const char * name, Netsnmp_Node_Handler * handler_access_method, oid * reg_oid, size_t reg_oid_len, int modes)"
.PP
creates a handler registration structure given a name, a access_method function, a registration location oid and the modes the handler supports.
.PP
If modes == 0, then modes will automatically be set to the default value of only HANDLER_CAN_DEFAULT, which is by default read-only GET and GETNEXT requests. 
.PP
\fBNote: \fP
.in +1c
This ends up calling netsnmp_create_handler(name, handler_access_method) 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIname\fP\fP
is the handler name and is copied then assigned to netsnmp_handler_registration->handlerName.
.TP
\fB\fIhandler_access_method\fP\fP
is a function pointer used as the access method for this handler registration instance for whatever required needs.
.TP
\fB\fIreg_oid\fP\fP
is the registration location oid.
.TP
\fB\fIreg_oid_len\fP\fP
is the length of reg_oid, can use the macro, OID_LENGTH
.TP
\fB\fImodes\fP\fP
is used to configure read/write access. If modes == 0,  then modes will automatically be set to the default  value of only HANDLER_CAN_DEFAULT, which is by default read-only GET  and GETNEXT requests. The other two mode options are read only,  HANDLER_CAN_RONLY, and read/write, HANDLER_CAN_RWRITE.
.PP
.TP
HANDLER_CAN_GETANDGETNEXT
.TP
HANDLER_CAN_SET
.TP
HANDLER_CAN_GETBULK
.PP
.TP
HANDLER_CAN_RONLY (HANDLER_CAN_GETANDGETNEXT)
.TP
HANDLER_CAN_RWRITE (HANDLER_CAN_GETANDGETNEXT |  HANDLER_CAN_SET)
.TP
HANDLER_CAN_DEFAULT HANDLER_CAN_RONLY
.PP
\fBReturns: \fP
.in +1c
Returns a pointer to a netsnmp_handler_registration struct. NULL is returned only when memory could not be allocated for the  netsnmp_handler_registration struct.
.PP
\fBSee also: \fP
.in +1c
\fBnetsnmp_create_handler()\fP , \fBnetsnmp_register_handler()\fP 
.PP
\fBExamples: \fP
.in +1c
\fBdelayed_instance.c\fP.
.PP
Definition at line 154 of file agent_handler.c.
.PP
References netsnmp_handler_registration_s::handler, netsnmp_handler_registration_s::handlerName, memdup(), netsnmp_handler_registration_s::modes, netsnmp_create_handler(), netsnmp_handler_registration_s::rootoid, netsnmp_handler_registration_s::rootoid_len, and SNMP_MALLOC_TYPEDEF.
.SS "\fBnetsnmp_mib_handler\fP* netsnmp_find_handler_by_name (\fBnetsnmp_handler_registration\fP * reginfo, const char * name)"
.PP
Returns a handler from a chain based on the name.
.PP
Definition at line 735 of file agent_handler.c.
.PP
References netsnmp_handler_registration_s::handler, netsnmp_mib_handler_s::handler_name, and netsnmp_mib_handler_s::next.
.PP
Referenced by netsnmp_find_handler_data_by_name().
.SS "void* netsnmp_find_handler_data_by_name (\fBnetsnmp_handler_registration\fP * reginfo, const char * name)"
.PP
Returns a handler's void * pointer from a chain based on the name.
.PP
This probably shouldn't be used by the general public as the void * data may change as a handler evolves. Handlers should really advertise some function for you to use instead. 
.PP
Definition at line 752 of file agent_handler.c.
.PP
References netsnmp_mib_handler_s::myvoid, and netsnmp_find_handler_by_name().
.PP
Referenced by netsnmp_find_table_registration_info().
.SS "NETSNMP_INLINE void netsnmp_free_delegated_cache (netsnmp_delegated_cache * dcache)"
.PP
frees a cache once you're finished using it
.PP
\fBExamples: \fP
.in +1c
\fBdelayed_instance.c\fP.
.PP
Definition at line 650 of file agent_handler.c.
.PP
References SNMP_FREE.
.SS "NETSNMP_INLINE void netsnmp_free_request_data_set (netsnmp_request_info * request)"
.PP
Free the extra data stored in a request.
.PP
Definition at line 717 of file agent_handler.c.
.PP
References netsnmp_free_list_data(), and netsnmp_request_info_s::parent_data.
.SS "NETSNMP_INLINE void netsnmp_free_request_data_sets (netsnmp_request_info * request)"
.PP
Free the extra data stored in a bunch of requests (all data in the chain).
.PP
Definition at line 725 of file agent_handler.c.
.PP
References netsnmp_free_all_list_data(), and netsnmp_request_info_s::parent_data.
.PP
Referenced by netsnmp_table_iterator_helper_handler().
.SS "NETSNMP_INLINE netsnmp_delegated_cache* netsnmp_handler_check_cache (netsnmp_delegated_cache * dcache)"
.PP
check's a given cache and returns it if it is still valid (ie, the agent still considers it to be an outstanding request.
.PP
Returns NULL if it's no longer valid. 
.PP
\fBExamples: \fP
.in +1c
\fBdelayed_instance.c\fP.
.PP
Definition at line 636 of file agent_handler.c.
.PP
References netsnmp_check_transaction_id().
.SS "\fBnetsnmp_mib_handler\fP* netsnmp_handler_dup (\fBnetsnmp_mib_handler\fP * handler)"
.PP
dulpicates a handler
.PP
Definition at line 496 of file agent_handler.c.
.PP
References netsnmp_mib_handler_s::access_method, netsnmp_mib_handler_s::handler_name, netsnmp_mib_handler_s::myvoid, netsnmp_mib_handler_s::next, netsnmp_mib_handler_s::prev, and SNMP_FREE.
.PP
Referenced by netsnmp_handler_registration_dup().
.SS "void netsnmp_handler_free (\fBnetsnmp_mib_handler\fP * handler)"
.PP
free's the resourceses associated with a given handler
.PP
Definition at line 478 of file agent_handler.c.
.PP
References netsnmp_mib_handler_s::handler_name, netsnmp_mib_handler_s::next, and SNMP_FREE.
.PP
Referenced by netsnmp_handler_registration_free().
.SS "void netsnmp_handler_mark_requests_as_delegated (netsnmp_request_info * requests, int isdelegated)"
.PP
marks a list of requests as delegated (or not if isdelegaded = 0)
.PP
Definition at line 664 of file agent_handler.c.
.PP
References netsnmp_request_info_s::delegated, and netsnmp_request_info_s::next.
.SS "\fBnetsnmp_handler_registration\fP* netsnmp_handler_registration_dup (\fBnetsnmp_handler_registration\fP * reginfo)"
.PP
duplicates the handler registration object
.PP
Definition at line 550 of file agent_handler.c.
.PP
References netsnmp_handler_registration_s::contextName, netsnmp_handler_registration_s::handler, netsnmp_handler_registration_s::handlerName, memdup(), netsnmp_handler_registration_s::modes, netsnmp_handler_dup(), netsnmp_handler_registration_free(), netsnmp_handler_registration_s::priority, netsnmp_handler_registration_s::range_subid, netsnmp_handler_registration_s::range_ubound, netsnmp_handler_registration_s::rootoid, netsnmp_handler_registration_s::rootoid_len, and netsnmp_handler_registration_s::timeout.
.SS "void netsnmp_handler_registration_free (\fBnetsnmp_handler_registration\fP * reginfo)"
.PP
free the resources associated with a handler registration object
.PP
Definition at line 537 of file agent_handler.c.
.PP
References netsnmp_handler_registration_s::contextName, netsnmp_handler_registration_s::handler, netsnmp_handler_registration_s::handlerName, netsnmp_handler_free(), netsnmp_handler_registration_s::rootoid, and SNMP_FREE.
.PP
Referenced by netsnmp_handler_registration_dup(), netsnmp_register_mib_table_row(), and netsnmp_register_old_api().
.SS "int netsnmp_inject_handler (\fBnetsnmp_handler_registration\fP * reginfo, \fBnetsnmp_mib_handler\fP * handler)"
.PP
inject a new handler into the calling chain of the handlers definedy by the netsnmp_handler_registration pointer.
.PP
The new handler is injected at the top of the list and hence will be the new handler to be called first. 
.PP
Definition at line 331 of file agent_handler.c.
.PP
References netsnmp_inject_handler_before().
.PP
Referenced by netsnmp_register_cache_handler(), netsnmp_register_handler(), netsnmp_register_instance(), netsnmp_register_read_only_instance(), netsnmp_register_read_only_scalar(), netsnmp_register_read_only_table_data(), netsnmp_register_row_merge(), netsnmp_register_scalar(), netsnmp_register_serialize(), netsnmp_register_table(), netsnmp_register_table_data(), netsnmp_register_table_data_set(), and netsnmp_register_table_iterator().
.SS "int netsnmp_inject_handler_before (\fBnetsnmp_handler_registration\fP * reginfo, \fBnetsnmp_mib_handler\fP * handler, const char * before_what)"
.PP
inject a new handler into the calling chain of the handlers definedy by the netsnmp_handler_registration pointer.
.PP
The new handler is injected after the before_what handler, or if NULL at the top of the list and hence will be the new handler to be called first. 
.PP
Definition at line 286 of file agent_handler.c.
.PP
References netsnmp_handler_registration_s::handler, netsnmp_mib_handler_s::handler_name, netsnmp_mib_handler_s::next, netsnmp_mib_handler_s::prev, and snmp_log().
.PP
Referenced by netsnmp_inject_handler().
.SS "int netsnmp_register_handler (\fBnetsnmp_handler_registration\fP * reginfo)"
.PP
register a handler, as defined by the netsnmp_handler_registration pointer.
.PP
Definition at line 180 of file agent_handler.c.
.PP
References netsnmp_handler_registration_s::contextName, netsnmp_handler_registration_s::handler, netsnmp_mib_handler_s::handler_name, netsnmp_handler_registration_s::handlerName, netsnmp_handler_registration_s::modes, netsnmp_get_bulk_to_next_handler(), netsnmp_inject_handler(), netsnmp_mib_handler_s::next, netsnmp_handler_registration_s::priority, netsnmp_handler_registration_s::range_subid, netsnmp_handler_registration_s::range_ubound, netsnmp_handler_registration_s::rootoid, netsnmp_handler_registration_s::rootoid_len, snmp_log(), and netsnmp_handler_registration_s::timeout.
.PP
Referenced by netsnmp_register_cache_handler(), netsnmp_register_old_api(), netsnmp_register_row_merge(), netsnmp_register_serialize(), and netsnmp_register_table().
.SS "void netsnmp_register_handler_by_name (const char * name, \fBnetsnmp_mib_handler\fP * handler)"
.PP
registers a given handler by name so that it can be found easily later.
.PP
Definition at line 780 of file agent_handler.c.
.PP
References netsnmp_add_list_data(), and netsnmp_create_data_list().
.PP
Referenced by netsnmp_init_baby_steps_helper(), netsnmp_init_bulk_to_next_helper(), netsnmp_init_debug_helper(), netsnmp_init_read_only_helper(), netsnmp_init_row_merge(), netsnmp_init_serialize(), and netsnmp_init_stash_cache_helper().
.SS "int netsnmp_register_handler_nocallback (\fBnetsnmp_handler_registration\fP * reginfo)"
.PP
register a handler, as defined by the netsnmp_handler_registration pointer.
.PP
Definition at line 235 of file agent_handler.c.
.PP
References netsnmp_handler_registration_s::contextName, netsnmp_handler_registration_s::handler, netsnmp_mib_handler_s::handler_name, netsnmp_handler_registration_s::modes, netsnmp_mib_handler_s::next, netsnmp_handler_registration_s::priority, netsnmp_handler_registration_s::range_subid, netsnmp_handler_registration_s::range_ubound, netsnmp_handler_registration_s::rootoid, netsnmp_handler_registration_s::rootoid_len, snmp_log(), and netsnmp_handler_registration_s::timeout.
.PP
Referenced by netsnmp_register_mib_table_row().
.SS "NETSNMP_INLINE void netsnmp_request_add_list_data (netsnmp_request_info * request, netsnmp_data_list * node)"
.PP
add data to a request that can be extracted later by submodules
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIrequset\fP\fP
the netsnmp request info structure
.TP
\fB\fInode\fP\fP
this is the data to be added to the linked list request->parent_data
.PP
\fBReturns: \fP
.in +1c
void 
.PP
\fBExamples: \fP
.in +1c
\fBdelayed_instance.c\fP.
.PP
Definition at line 684 of file agent_handler.c.
.PP
References netsnmp_add_list_data(), and netsnmp_request_info_s::parent_data.
.PP
Referenced by netsnmp_insert_iterator_context(), netsnmp_old_api_helper(), netsnmp_table_data_helper_handler(), netsnmp_table_data_set_helper_handler(), netsnmp_table_iterator_helper_handler(), and table_helper_handler().
.SS "NETSNMP_INLINE void* netsnmp_request_get_list_data (netsnmp_request_info * request, const char * name)"
.PP
extract data from a request that was added previously by a parent module
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIrequest\fP\fP
the netsnmp request info function
.TP
\fB\fIname\fP\fP
used to compare against the request->parent_data->name value, if a match is found request->parent_data->data is returned
.PP
\fBReturns: \fP
.in +1c
a void pointer(request->parent_data->data), otherwise NULL is returned if request is NULL or request->parent_data is NULL or request->parent_data object is not found. 
.PP
\fBExamples: \fP
.in +1c
\fBdelayed_instance.c\fP.
.PP
Definition at line 707 of file agent_handler.c.
.PP
References netsnmp_get_list_data(), and netsnmp_request_info_s::parent_data.
.PP
Referenced by netsnmp_extract_array_context(), netsnmp_extract_iterator_context(), netsnmp_extract_table_data_set(), netsnmp_extract_table_info(), netsnmp_extract_table_row(), netsnmp_old_api_helper(), and netsnmp_table_iterator_helper_handler().

.TH "net-snmp agent related processing" 3 "15 Mar 2004" "net-snmp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
net-snmp agent related processing \- 
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_agent_nsap\fP"
.br
.ti -1c
.RI "struct \fBaddrCache\fP"
.br
.ti -1c
.RI "struct \fBagent_set_cache_s\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBhandle_pdu\fP (netsnmp_agent_session *asp)"
.br
.RI "\fIThis function calls into netsnmp_set_mode_request_error, sets error_value given a reqinfo->mode value.\fP"
.ti -1c
.RI "int \fBhandle_getnext_loop\fP (netsnmp_agent_session *asp)"
.br
.RI "\fIrepeatedly calls getnext handlers looking for an answer till all requests are satisified.\fP"
.ti -1c
.RI "int \fBagent_check_and_process\fP (int block)"
.br
.RI "\fIThis function checks for packets arriving on the SNMP port and processes them(snmp_read) if some are found, using the select().\fP"
.ti -1c
.RI "void \fBdump_sess_list\fP (void)"
.br
.RI "\fIif asp->pdu\fP"
.ti -1c
.RI "int \fBhandle_snmp_packet\fP (int op, netsnmp_session *session, int reqid, netsnmp_pdu *pdu, void *magic)"
.br
.RI "\fIhandles an incoming SNMP packet into the agent\fP"
.ti -1c
.RI "int \fBcheck_acm\fP (netsnmp_agent_session *asp, u_char type)"
.br
.ti -1c
.RI "int \fBnetsnmp_check_transaction_id\fP (int transaction_id)"
.br
.RI "\fIDecide if the requested transaction_id is still being processed within the agent.\fP"
.ti -1c
.RI "int \fBcheck_getnext_results\fP (netsnmp_agent_session *asp)"
.br
.RI "\fIreturns 1 if there are valid GETNEXT requests left.\fP"
.ti -1c
.RI "NETSNMP_STATIC_INLINE int \fB_request_set_error\fP (netsnmp_request_info *request, int mode, int error_value)"
.br
.RI "\fIset error for a request\fP"
.ti -1c
.RI "int \fBnetsnmp_request_set_error\fP (netsnmp_request_info *request, int error_value)"
.br
.RI "\fIset error for a request\fP"
.ti -1c
.RI "NETSNMP_INLINE int \fBnetsnmp_request_set_error_all\fP (netsnmp_request_info *requests, int error)"
.br
.RI "\fIset error for all requests\fP"
.ti -1c
.RI "int \fBnetsnmp_set_request_error\fP (netsnmp_agent_request_info *reqinfo, netsnmp_request_info *request, int error_value)"
.br
.RI "\fIdeprecated, use netsnmp_request_set_error instead\fP"
.ti -1c
.RI "int \fBnetsnmp_set_mode_request_error\fP (int mode, netsnmp_request_info *request, int error_value)"
.br
.RI "\fIdeprecated, use netsnmp_request_set_error instead\fP"
.ti -1c
.RI "int \fBnetsnmp_set_all_requests_error\fP (netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests, int error_value)"
.br
.RI "\fIset error for all request\fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "timeval \fBstarttime\fP"
.br
.RI "\fIparanoid sanity checks\fP"
.in -1c
.SH "FUNCTION DOCUMENTATION"
.PP 
.SS "NETSNMP_STATIC_INLINE int _request_set_error (netsnmp_request_info * request, int mode, int error_value)"
.PP
set error for a request
.PP
Definition at line 3075 of file snmp_agent.c.
.PP
References netsnmp_request_info_s::delegated, netsnmp_request_info_s::processed, netsnmp_request_info_s::requestvb, snmp_log(), netsnmp_request_info_s::status, and variable_list::type.
.PP
Referenced by netsnmp_request_set_error(), netsnmp_request_set_error_all(), netsnmp_set_mode_request_error(), and netsnmp_set_request_error().
.SS "int agent_check_and_process (int block)"
.PP
This function checks for packets arriving on the SNMP port and processes them(snmp_read) if some are found, using the select().
.PP
If block is non zero, the function call blocks until a packet arrives
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIblock\fP\fP
used to control blocking in the select() function, 1 = block forever, and 0 = don't block
.PP
\fBReturns: \fP
.in +1c
Returns a positive integer if packets were processed, and -1 if an error was found. 
.PP
Definition at line 499 of file snmp_agent.c.
.PP
References snmp_log().
.SS "int check_acm (netsnmp_agent_session * asp, u_char type)"
.PP
\fBTodo: \fP
.in +1c
 make this be more intelligent about ranges. Right now we merely take the highest level commonality of a registration range and use that. At times we might be able to be smarter about checking the range itself as opposed to the node above where the range exists, but I doubt this will come up all that frequently. 
.PP
Definition at line 1865 of file snmp_agent.c.
.PP
References variable_list::name, variable_list::name_length, netsnmp_request_info_s::next, variable_list::next_variable, netsnmp_request_info_s::orig_repeat, netsnmp_request_info_s::repeat, netsnmp_request_info_s::requestvb, netsnmp_request_info_s::requestvb_start, snmp_set_var_typed_value(), and variable_list::type.
.PP
Referenced by handle_getnext_loop(), and handle_pdu().
.SS "int check_getnext_results (netsnmp_agent_session * asp)"
.PP
returns 1 if there are valid GETNEXT requests left.
.PP
Returns 0 if not. 
.PP
Definition at line 2491 of file snmp_agent.c.
.PP
References netsnmp_request_info_s::inclusive, netsnmp_request_info_s::index, variable_list::name, variable_list::name_length, netsnmp_request_info_s::next, netsnmp_request_info_s::range_end, netsnmp_request_info_s::range_end_len, netsnmp_request_info_s::repeat, netsnmp_request_info_s::requestvb, snmp_oid_compare(), snmp_set_var_typed_value(), and variable_list::type.
.PP
Referenced by handle_getnext_loop().
.SS "void dump_sess_list (void)"
.PP
if asp->pdu
.PP
Definition at line 1512 of file snmp_agent.c.
.SS "int handle_getnext_loop (netsnmp_agent_session * asp)"
.PP
repeatedly calls getnext handlers looking for an answer till all requests are satisified.
.PP
It's expected that one pass has been made before entering this function 
.PP
Definition at line 2596 of file snmp_agent.c.
.PP
References check_acm(), check_getnext_results(), and variable_list::next_variable.
.PP
Referenced by handle_pdu().
.SS "int handle_pdu (netsnmp_agent_session * asp)"
.PP
This function calls into netsnmp_set_mode_request_error, sets error_value given a reqinfo->mode value.
.PP
It's used to send specific errors back to the agent to process accordingly.
.PP
If error_value is set to SNMP_NOSUCHOBJECT, SNMP_NOSUCHINSTANCE, or SNMP_ENDOFMIBVIEW the following is applicable: Sets the error_value to request->requestvb->type if  reqinfo->mode value is set to MODE_GET. If the reqinfo->mode  value is set to MODE_GETNEXT or MODE_GETBULK the code calls  snmp_log logging an error message.
.PP
Otherwise, the request->status value is checked, if it's < 0 snmp_log is called with an error message and SNMP_ERR_GENERR is  assigned to request->status. If the request->status value is >= 0 the error_value is set to request->status.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIreqinfo\fP\fP
is a pointer to the netsnmp_agent_request_info struct. It contains the reqinfo->mode which is required to set error_value or log error messages.
.TP
\fB\fIrequest\fP\fP
is a pointer to the netsnmp_request_info struct. The  error_value is set to request->requestvb->type
.TP
\fB\fIerror_value\fP\fP
is the exception value you want to set, below are possible values.
.TP
SNMP_NOSUCHOBJECT
.TP
SNMP_NOSUCHINSTANCE
.TP
SNMP_ENDOFMIBVIEW
.TP
SNMP_ERR_NOERROR
.TP
SNMP_ERR_TOOBIG
.TP
SNMP_ERR_NOSUCHNAME
.TP
SNMP_ERR_BADVALUE
.TP
SNMP_ERR_READONLY
.TP
SNMP_ERR_GENERR
.TP
SNMP_ERR_NOACCESS
.TP
SNMP_ERR_WRONGTYPE
.TP
SNMP_ERR_WRONGLENGTH
.TP
SNMP_ERR_WRONGENCODING
.TP
SNMP_ERR_WRONGVALUE
.TP
SNMP_ERR_NOCREATION
.TP
SNMP_ERR_INCONSISTENTVALUE
.TP
SNMP_ERR_RESOURCEUNAVAILABLE
.TP
SNMP_ERR_COMMITFAILED
.TP
SNMP_ERR_UNDOFAILED
.TP
SNMP_ERR_AUTHORIZATIONERROR
.TP
SNMP_ERR_NOTWRITABLE
.TP
SNMP_ERR_INCONSISTENTNAME
.PP
\fBReturns: \fP
.in +1c
Returns error_value under all conditions. 
.PP
Definition at line 2890 of file snmp_agent.c.
.PP
References check_acm(), handle_getnext_loop(), variable_list::next_variable, snmp_set_var_typed_value(), and variable_list::type.
.SS "int handle_snmp_packet (int op, netsnmp_session * session, int reqid, netsnmp_pdu * pdu, void * magic)"
.PP
handles an incoming SNMP packet into the agent
.PP
Definition at line 1573 of file snmp_agent.c.
.PP
References snmp_pdu::command, snmp_session::s_snmp_errno, send_easy_trap(), and snmp_pdu::version.
.SS "int netsnmp_check_transaction_id (int transaction_id)"
.PP
Decide if the requested transaction_id is still being processed within the agent.
.PP
This is used to validate whether a delayed cache (containing possibly freed pointers) is still usable.
.PP
returns SNMPERR_SUCCESS if it's still valid, or SNMPERR_GENERR if not. 
.PP
Definition at line 2401 of file snmp_agent.c.
.PP
Referenced by netsnmp_handler_check_cache().
.SS "int netsnmp_request_set_error (netsnmp_request_info * request, int error_value)"
.PP
set error for a request
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIrequest\fP\fP
request which has error 
.TP
\fB\fIerror_value\fP\fP
error value for request 
.PP
Definition at line 3140 of file snmp_agent.c.
.PP
References _request_set_error(), netsnmp_request_info_s::agent_req_info, and netsnmp_agent_request_info_s::mode.
.SS "NETSNMP_INLINE int netsnmp_request_set_error_all (netsnmp_request_info * requests, int error)"
.PP
set error for all requests
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIrequests\fP\fP
request list 
.TP
\fB\fIerror_value\fP\fP
error value for requests 
.PP
\fBReturns: \fP
.in +1c
SNMPERR_SUCCESS, or an error code 
.PP
Definition at line 3155 of file snmp_agent.c.
.PP
References _request_set_error(), netsnmp_request_info_s::agent_req_info, netsnmp_agent_request_info_s::mode, netsnmp_request_info_s::next, and snmp_log().
.PP
Referenced by netsnmp_set_all_requests_error().
.SS "int netsnmp_set_all_requests_error (netsnmp_agent_request_info * reqinfo, netsnmp_request_info * requests, int error_value)"
.PP
set error for all request
.PP
\fBDeprecated: \fP
.in +1c
use netsnmp_request_set_error_all 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIreqinfo\fP\fP
agent_request_info pointer for requests 
.TP
\fB\fIrequests\fP\fP
request list 
.TP
\fB\fIerror_value\fP\fP
error value for requests 
.PP
\fBReturns: \fP
.in +1c
error_value 
.PP
Definition at line 3319 of file snmp_agent.c.
.PP
References netsnmp_request_set_error_all().
.PP
Referenced by netsnmp_multiplexer_helper_handler().
.SS "int netsnmp_set_mode_request_error (int mode, netsnmp_request_info * request, int error_value)"
.PP
deprecated, use netsnmp_request_set_error instead
.PP
\fBDeprecated: \fP
.in +1c
, use netsnmp_request_set_error instead 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fImode\fP\fP
Net-SNMP agent processing mode 
.TP
\fB\fIrequest\fP\fP
request_info pointer 
.TP
\fB\fIerror_value\fP\fP
error value for requests 
.PP
\fBReturns: \fP
.in +1c
error_value 
.PP
Definition at line 3303 of file snmp_agent.c.
.PP
References _request_set_error().
.SS "int netsnmp_set_request_error (netsnmp_agent_request_info * reqinfo, netsnmp_request_info * request, int error_value)"
.PP
deprecated, use netsnmp_request_set_error instead
.PP
\fBDeprecated: \fP
.in +1c
, use netsnmp_request_set_error instead 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIreqinfo\fP\fP
agent_request_info pointer for request 
.TP
\fB\fIrequest\fP\fP
request_info pointer 
.TP
\fB\fIerror_value\fP\fP
error value for requests 
.PP
\fBReturns: \fP
.in +1c
error_value 
.PP
\fBExamples: \fP
.in +1c
\fBdelayed_instance.c\fP.
.PP
Definition at line 3284 of file snmp_agent.c.
.PP
References _request_set_error(), and netsnmp_agent_request_info_s::mode.
.PP
Referenced by netsnmp_old_api_helper(), netsnmp_table_data_helper_handler(), netsnmp_table_data_set_helper_handler(), and table_helper_handler().
.SH "VARIABLE DOCUMENTATION"
.PP 
.SS "struct timeval starttime"
.PP
paranoid sanity checks
.PP
Definition at line 3182 of file snmp_agent.c.
.PP
Referenced by init_agent().

.TH "table_iterator: The table iterator helper is designed to simplify the task of writing a table handler for the net-snmp agent when the data being accessed is not in an oid sorted form and must be accessed externally." 3 "2 Sep 2003" "net-snmp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
table_iterator: The table iterator helper is designed to simplify the task of writing a table handler for the net-snmp agent when the data being accessed is not in an oid sorted form and must be accessed externally. \- Functionally, it is a specialized version of the more generic table helper but easies the burden of GETNEXT processing by manually looping through all the data indexes retrieved through function calls which should be supplied by the module that wishes help. 
More...
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBnetsnmp_iterator_info_s\fP"
.br
.RI "\fIHolds iterator information containing functions which should be called by the iterator_handler to loop over your data set and sort it in a SNMP specific manner.\fP"
.ti -1c
.RI "struct \fBnetsnmp_iterator_info_s\fP"
.br
.RI "\fIHolds iterator information containing functions which should be called by the iterator_handler to loop over your data set and sort it in a SNMP specific manner.\fP"
.ti -1c
.RI "struct \fBti_cache_info_s\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBnetsnmp_iterator_info_s\fP \fBnetsnmp_iterator_info\fP"
.br
.RI "\fITypedefs the \fBnetsnmp_iterator_info_s\fP struct into netsnmp_iterator_info.\fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "netsnmp_mib_handler * \fBnetsnmp_get_table_iterator_handler\fP (\fBnetsnmp_iterator_info\fP *iinfo)"
.br
.RI "\fIreturns a netsnmp_mib_handler object for the table_iterator helper\fP"
.ti -1c
.RI "int \fBnetsnmp_register_table_iterator\fP (netsnmp_handler_registration *reginfo, \fBnetsnmp_iterator_info\fP *iinfo)"
.br
.RI "\fIregisters a table after attaching it to a table_iterator helper\fP"
.ti -1c
.RI "void * \fBnetsnmp_extract_iterator_context\fP (netsnmp_request_info *request)"
.br
.RI "\fIextracts the table_iterator specific data from a request\fP"
.ti -1c
.RI "int \fBnetsnmp_table_iterator_helper_handler\fP (netsnmp_mib_handler *handler, netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests)"
.br
.RI "\fIimplements the table_iterator helper\fP"
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
Functionally, it is a specialized version of the more generic table helper but easies the burden of GETNEXT processing by manually looping through all the data indexes retrieved through function calls which should be supplied by the module that wishes help.
.PP
The module the table_iterator helps should, afterwards, never be called for the case of 'MODE_GETNEXT' and only for the GET and SET related modes instead.
.PP
The fundamental notion between the table iterator is that it allows your code to iterate over each 'row' within your data storage mechanism, without requiring that it be sorted in a SNMP-index-compliant manner. Through the get_first_data_point and get_next_data_point hooks, the table_iterator helper will repeatedly call your hooks to find the 'proper' row of data that needs processing. The following concepts are important:
.PP
.TP
A loop context is a pointer which indicates where in the current processing of a set of rows you currently are. The most simple example would be a pointer to an integer which simply counts rows from 1 to X. More commonly, it might be a pointer to a linked list node, or someother internal or external reference to a data set (file seek value, array pointer, ...). If allocated during iteration, either the free_loop_context_at_end (preferably) or the free_loop_context pointers should be set.
.PP
.TP
A data context is something that your handler code can use later in order to retrieve the rest of the data for the needed row. The important difference between a loop context and a data context is that multiple data contexts can be kept by the table_iterator helper, where as only one loop context will ever be held by the table_iterator helper. If allocated during iteration the free_data_context pointer should be set to an appropriate function.
.PP
The table iterator operates in a series of steps that call your code hooks from your netsnmp_iterator_info registration pointer.
.PP
.TP
the get_first_data_point hook is called at the beginning of processing. It should set the variable list to a list of indexes for the given table. It should also set the loop_context and maybe a data_context which you will get a pointer back to when it needs to call your code to retrieve actual data later. The list of indexes should be returned after being update.
.PP
.TP
the get_next_data_point hook is then called repeatedly and is passed the loop context and the data context for it to update. The indexes, loop context and data context should all be updated if more data is available, otherwise they should be left alone and a NULL should be returned. Ideally, it should update the loop context without the need to reallocate it. If reallocation is necessary for every iterative step, then the free_loop_context function pointer should be set. If not, then the free_loop_context_at_end pointer should be set, which is more efficient since a malloc/free will only be performed once for every iteration. 
.PP
.SH "TYPEDEF DOCUMENTATION"
.PP 
.SS "struct \fBnetsnmp_iterator_info_s\fP netsnmp_iterator_info"
.PP
Typedefs the \fBnetsnmp_iterator_info_s\fP struct into netsnmp_iterator_info.
.PP
.SH "FUNCTION DOCUMENTATION"
.PP 
.SS "void* netsnmp_extract_iterator_context (netsnmp_request_info * request)\fC [inline]\fP"
.PP
extracts the table_iterator specific data from a request
.PP
Definition at line 118 of file table_iterator.c.
.PP
References netsnmp_request_get_list_data().
.PP
Referenced by netsnmp_multiplexer_helper_handler().
.SS "netsnmp_mib_handler* netsnmp_get_table_iterator_handler (\fBnetsnmp_iterator_info\fP * iinfo)"
.PP
returns a netsnmp_mib_handler object for the table_iterator helper
.PP
Definition at line 89 of file table_iterator.c.
.PP
References netsnmp_create_handler(), and netsnmp_table_iterator_helper_handler().
.PP
Referenced by netsnmp_register_table_iterator().
.SS "int netsnmp_register_table_iterator (netsnmp_handler_registration * reginfo, \fBnetsnmp_iterator_info\fP * iinfo)"
.PP
registers a table after attaching it to a table_iterator helper
.PP
Definition at line 105 of file table_iterator.c.
.PP
References netsnmp_get_table_iterator_handler(), netsnmp_inject_handler(), netsnmp_register_table(), and netsnmp_iterator_info_s::table_reginfo.
.SS "int netsnmp_table_iterator_helper_handler (netsnmp_mib_handler * handler, netsnmp_handler_registration * reginfo, netsnmp_agent_request_info * reqinfo, netsnmp_request_info * requests)"
.PP
implements the table_iterator helper
.PP
Definition at line 197 of file table_iterator.c.
.PP
References netsnmp_iterator_info_s::flags, netsnmp_iterator_info_s::free_data_context, netsnmp_iterator_info_s::free_loop_context, netsnmp_iterator_info_s::free_loop_context_at_end, netsnmp_iterator_info_s::get_first_data_point, netsnmp_iterator_info_s::get_next_data_point, netsnmp_call_next_handler(), netsnmp_extract_stash_cache(), netsnmp_extract_table_info(), netsnmp_find_table_registration_info(), netsnmp_free_request_data_sets(), netsnmp_get_list_node(), netsnmp_oid_stash_add_data(), netsnmp_request_add_list_data(), netsnmp_request_get_list_data(), SNMP_FREE, SNMP_MALLOC_TYPEDEF, snmp_oid_compare(), and netsnmp_iterator_info_s::table_reginfo.
.PP
Referenced by netsnmp_get_table_iterator_handler().

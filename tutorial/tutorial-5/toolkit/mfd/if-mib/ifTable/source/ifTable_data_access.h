/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.8 $ of : mfd-data-access.m2c,v $
 *
 * $Id$
 */
#ifndef IFTABLE_DATA_ACCESS_H
#define IFTABLE_DATA_ACCESS_H

#ifdef __cplusplus
extern          "C" {
#endif


    /*
     *********************************************************************
     * function declarations
     */

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table ifTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * ifTable is subid 2 of interfaces.
     * It's status is Current.
     * OID: .1.3.6.1.2.1.2.2, length: 8
     */


    int             ifTable_init_data(ifTable_registration_ptr
                                      ifTable_reg);

    /***************************************************/
    /***             START EXAMPLE CODE              ***/
    /***---------------------------------------------***/
    /*
     *********************************************************************
     * Since we have no idea how you really access your data, we'll go with
     * a worst case example: a flat text file.
     */
#define MAX_LINE_SIZE 256
    /***---------------------------------------------***/
    /***              END  EXAMPLE CODE              ***/
    /***************************************************/

/**
 * loop context
 *
 * TODO:
 * define loop context structure
 *
 *  Since the actual loop is in the MFD handler, a loop contex parameter
 *  is provided to help you keep track of where you are in between calls
 *  to functions that you wrote and the master MFD handler calls. The
 *  structure of this context is user defineable, and is defined in the
 *  file ifTable_data_access.h.
 *
 *  E.G., if your data is stored in a linked list, the obvious thing you
 *  want to know from one function call to the next is your current
 *  position in the linked list.  Thus the easiest context to use is a
 *  pointer within the linked list.  For an array, the current index to
 *  that array would be easiest.
 *
 *  The funtion calls are actually passed a reference to the loop
 *  context, to allow the loop context to be allocated memory. Here are
 *  some simple examples definitions for various data formats. These
 *  definitions are used in examples later on.
 *
 */
    typedef struct ifTable_loop_context_s {
        /*
         * temporary context used during iteration
         */
        ifTable_rowreq_ctx *rowreq_ctx;

        /*
         * this example code is based on a data source that is a
         * text file to be read and parsed.
         */
        FILE           *filep;
        char            line[MAX_LINE_SIZE];
    } ifTable_loop_context;

    /*
     * define a reference to the loop context
     *
     * NOTE: DO NOT ADD ITEMS TO THIS STRUCTURE!
     */
    typedef struct ifTable_ref_loop_ctx_s {
        ifTable_loop_context *loop_ctx;
    } ifTable_ref_loop_ctx;

    int             ifTable_loop_get_first(ifTable_registration_ptr
                                           ifTable_reg,
                                           ifTable_ref_loop_ctx *
                                           loop_ctx_ref,
                                           ifTable_ref_rowreq_ctx *
                                           rowreq_ctx_ref);
    int             ifTable_loop_get_next(ifTable_registration_ptr
                                          ifTable_reg,
                                          ifTable_ref_loop_ctx *
                                          loop_ctx_ref,
                                          ifTable_ref_rowreq_ctx *
                                          rowreq_ctx_ref);
    int             ifTable_loop_get_data(ifTable_registration_ptr
                                          ifTable_reg,
                                          ifTable_ref_loop_ctx *
                                          loop_ctx_ref,
                                          ifTable_ref_rowreq_ctx *
                                          rowreq_ctx_ref);
    int             ifTable_loop_save_position(ifTable_registration_ptr
                                               ifTable_reg,
                                               ifTable_ref_loop_ctx *
                                               loop_ctx_ref,
                                               ifTable_ref_loop_ctx *
                                               save_loop_ctx_ref,
                                               int reuse);
    int             ifTable_loop_cleanup_context(ifTable_registration_ptr
                                                 ifTable_reg,
                                                 ifTable_ref_loop_ctx *
                                                 ref);



#ifdef __cplusplus
};
#endif

#endif                          /* IFTABLE_DATA_ACCESS_H */
